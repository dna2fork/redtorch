{"version":3,"sources":["stores/nodeStore.tsx","stores/gatewayStore.tsx","stores/userStore.tsx","stores/authenticationStore.tsx","stores/tradeContractStore.tsx","stores/tradeOrderStore.tsx","stores/tradePositionStore.tsx","stores/tradeAccountStore.tsx","stores/tradeTradeStore.tsx","stores/tradeActionStore.tsx","stores/tradeTickStore.tsx","stores/customizeStore.tsx","stores/marketDataRecordingStore.tsx","stores/operatorStore.tsx","stores/storesIndex.tsx","request.tsx","node/pb/pb.js","node/client/service/rpcClientApi.ts","pages/management/ManagementPage.tsx","pages/management/NodePage.tsx","pages/management/GatewayPage.tsx","pages/common/SettingPage.tsx","pages/LoginPage.tsx","pages/NotFoundPage.tsx","pages/management/UserPage.tsx","pages/common/RedirectToManagementPage.tsx","pages/common/RedirectToTradeMobilePage.tsx","pages/common/RedirectToTradePage.tsx","pages/trade/childcomponents/AccountDetailsPage.tsx","pages/trade/childcomponents/PositionDetailsPage.tsx","pages/trade/childcomponents/OrderDetailsPage.tsx","pages/trade/childcomponents/ContractDetailsPage.tsx","pages/trade/childcomponents/FavoriteContractDetailsPage.tsx","pages/trade/childcomponents/TradeDetailsPage.tsx","pages/trade/childcomponents/TradeBoardPage.tsx","pages/trade/childcomponents/MarketDetailsPage.tsx","pages/trade/TradeHomePage.tsx","pages/trade/TradePage.tsx","pages/tradeMobile/TradeMobileHomePage.tsx","pages/tradeMobile/TradeMobilePage.tsx","pages/management/OperatorPage.tsx","pages/management/MarketDataRecordingPage.tsx","router.tsx","index.tsx","node/client/service/rpcClientProcess.ts","node/client/service/rpcClientRtnHandler.ts","node/client/service/rpcClientRspHandler.ts","utils.tsx","node/client/websocket/webSocketClientHandler.ts"],"names":["nodeStore","constructor","nodeList","makeObservable","this","observable","getNodeList","action","createNode","deleteNodeByNodeId","resetNodeTokenByNodeId","updateNodeDescriptionByNodeId","setNodeList","request","then","res","status","Array","isArray","voData","toast","error","message","catch","err","console","log","nodeId","method","data","description","gatewayStore","gatewayList","getGatewayList","saveOrUpdateGateway","deleteGatewayByGatewayId","connectGatewayByGatewayId","disconnectGatewayByGatewayId","disconnectAllGateways","connectAllGateways","setGatewayList","gateway","gatewayId","userStore","userList","getUserList","addUser","deleteUserByUsername","updateUserDescriptionByUsername","updateUserPasswordByUsername","updateUserPermissionByUsername","setUserList","user","username","password","authenticationStore","isAuthenticated","userPo","saveLoginInfoState","operatorId","authToken","initStore","setUsername","setPassword","setSaveLoginInfoState","logout","getAuthToken","checkLoginStatus","login","setLoginSuccess","deleteLoginInfo","changePassword","window","setInterval","userPoJsonStr","sessionStorage","getItem","JSON","parse","randomAuthToken","webSocketClientHandler","setAuthToken","connect","localStorage","removeItem","disconnect","setItem","stringify","newPassword","success","tradeContractStore","mixContractList","mxiContractMap","Map","hasBeenChanged","startIntervalCheckChange","coverMapToList","setTimeout","getContractList","storeContract","clearAndStoreContractList","storeContractList","rpcClientApi","asyncGetContractList","contract","isDevEnv","debug","set","uniformSymbol","newMixContractMap","i","length","values","tradeOrderStore","orderList","orderMap","getOrderList","storeOrder","clearAndStoreOrderList","storeOrderList","asyncGetOrderList","order","orderId","newOrderMap","tempOrderList","sortOrderListByDatetimeAndOrderId","sort","orderA","orderB","orderAKey","orderDate","orderTime","leftZeroPad","adapterOrderId","orderBKey","localeCompare","CurrencyEnum","xyz","redtorch","pb","tradePositionStore","positionList","positionMap","summaryMap","getPositionList","storePosition","clearAndStorePositionList","storePositionList","calcSummary","asyncGetPositionList","position","positionId","newPositionMap","tempPositionList","sortPositionListByAccountIdAndPositionId","allContractValue","allOpenPositionProfit","tradeAccountStore","selectedAccountIdSet","has","accountId","currency","CNY","openPositionProfit","contractValue","cnySummary","positionA","positionB","positionAKey","positionBKey","accountList","accountMap","Set","getAccountList","setSelectedAccountIdSet","storeAccount","clearAndStoreAccountList","storeAccountList","asyncGetAccountList","account","newAccountMap","tempAccountList","sortAccountListByAccountId","allBalance","allPreBalance","allCloseProfit","allTodayProfit","allPositionProfit","allMargin","allCommission","allDepositAndWithdraw","balance","preBalance","withdraw","deposit","closeProfit","positionProfit","margin","commission","accountA","accountB","tradeTradeStore","tradeList","tradeMap","getTradeList","storeTrade","clearAndStoreTradeList","storeTradeList","asyncGetTradeList","trade","tradeId","newTradeMap","tempTradeList","sortTradeListByDatetimeAndTradeId","tradeA","tradeB","tradeAKey","tradeDate","tradeTime","adapterTradeId","tradeBKey","SubmitOrderReqField","ContractField","OrderPriceTypeEnum","DirectionEnum","OffsetFlagEnum","TimeConditionEnum","VolumeConditionEnum","HedgeFlagEnum","AccountField","ContingentConditionEnum","ForceCloseReasonEnum","tradeActionStore","selectedContract","orderPriceType","OPT_LimitPrice","autoFillOrderPriceType","price","stopPrice","volume","timeCondition","TC_GFD","volumeCondition","VC_AV","minVolume","hedgeFlag","HF_Speculation","contingentCondition","CC_Immediately","setSelectedContract","fillPrice","setVolume","setMinVolume","setHedgeFlag","setPrice","setStopPrice","setTimeCondition","setContingentCondition","setVolumeCondition","setOrderPriceType","setAutoFillOrderPriceType","submitOrder","cancelOrder","reset","get","asyncSubscribe","warn","fullName","tradeTickStore","mixTickMap","tick","tmpPrice","lastPrice","upperLimit","lowerLimit","bidPrice","askPrice","Number","MAX_VALUE","parseInt","direction","offsetFlag","originOrderId","contractField","fromObject","submitOrderReqField","OPT_AnyPrice","OPT_FiveLevelPrice","OPT_BestPrice","OPT_LastPrice","OPT_LastPricePlusOneTicks","OPT_LastPricePlusThreeTicks","D_Buy","D_Sell","OF_Open","OF_Close","OF_CloseToday","OF_CloseYesterday","TC_GTC","TC_IOC","VC_MV","VC_CV","HF_Hedge","HF_MarketMaker","HF_Arbitrage","HF_SpecHedge","HF_HedgeSpec","CC_LastPriceGreaterEqualStopPrice","CC_LastPriceLesserEqualStopPrice","CC_LocalLastPriceGreaterEqualStopPrice","CC_LocalLastPriceLesserEqualStopPrice","accountField","accountCode","code","forceCloseReason","FCR_NotForceClose","asyncSubmitOrder","asyncCancelOrder","tickList","selectedTick","startIntervalUpdateSelectedTick","setSelectedTick","storeTick","clearAndStoreTickList","storeTickList","newMixTickMap","customizeStore","favoriteContractList","favoriteContractUniformSymbolSet","getFavoriteContractList","addFavoriteContractByUniformSymbol","deleteFavoriteContractByUniformSymbol","setFavoriteContractList","add","autoClose","type","marketDataRecordingStore","contractList","contractUniformSymbolSet","addContractByUniformSymbol","deleteContractByUniformSymbol","setContractList","info","operatorStore","operatorList","operatorMap","getOperatorList","saveOrUpdateOperator","deleteOperatorByOperatorId","createOperator","setOperatorList","forEach","element","operator","browserHistory","createBrowserHistory","routingStore","location","history","push","state","replace","go","n","goBack","goForward","_updateLocation","bind","newState","store","handleLocationChange","unsubscribeFromHistory","listen","subscribe","listener","unsubscribeFromStore","observe","rawLocation","unsubscribe","syncHistoryWithStore","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","extend","errorHandler","response","errortext","statusText","url","credentials","interceptors","use","options","headers","$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","StrategyEngineTypeEnum","valuesById","Object","create","GatewayTypeEnum","GatewayAdapterTypeEnum","CommonStatusEnum","LogLevelEnum","MarketDataDBTypeEnum","BarPeriodEnum","ConnectStatusEnum","OrderActionStatusTyp","OrderStatusEnum","OrderSubmitStatusEnum","ProductClassEnum","PositionTypeEnum","PositionDirectionEnum","OrderTypeEnum","ActionFlagEnum","TradingRightEnum","OrderSourceEnum","TradeTypeEnum","PriceSourceEnum","ExchangeEnum","OptionsTypeEnum","StrikeModeEnum","CombinationTypeEnum","GatewayField","properties","keys","prototype","name","gatewayType","gatewayAdapterType","authErrorFlag","targetNodeId","version","Long","fromBits","encode","writer","hasOwnProperty","uint32","string","int32","bool","fixed32","fixed64","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isString","isInteger","low","high","object","String","Boolean","fromValue","unsigned","LongBits","toNumber","toObject","defaults","enums","long","longs","toString","call","toJSON","toJSONOptions","contractId","thirdPartyId","symbol","exchange","productClass","multiplier","priceTick","longMarginRatio","shortMarginRatio","maxMarginSideAlgorithm","underlyingSymbol","strikePrice","optionsType","underlyingMultiplier","lastTradeDateOrContractMonth","maxMarketOrderVolume","minMarketOrderVolume","maxLimitOrderVolume","minLimitOrderVolume","combinationType","double","json","isFinite","holder","available","localCreatedTimestamp","OrderField","orderLocalId","brokerOrderSeq","orderSysId","sequenceNo","orderStatus","totalVolume","tradedVolume","gtdDate","autoSuspend","userForceClose","swapOrder","tradingDay","activeTime","suspendTime","cancelTime","updateTime","statusMsg","frontId","sessionId","orderSubmitStatus","fork","TypeError","TradeField","settlementId","tradeType","priceSource","tradeTimestamp","PositionField","positionDirection","frozen","ydPosition","ydFrozen","tdPosition","tdFrozen","priceDiff","openPrice","openPriceDiff","positionProfitRatio","openPositionProfitRatio","useMargin","exchangeMargin","TickField","bidVolume","askVolume","actionDay","actionTime","actionTimestamp","avgPrice","volumeDelta","turnover","turnoverDelta","openInterest","openInterestDelta","preOpenInterest","preClosePrice","settlePrice","preSettlePrice","highPrice","lowPrice","emptyArray","end2","arrays","j","BarField","closePrice","period","CommonReqField","transactionId","CommonRspField","errorId","errorMsg","CancelOrderReqField","GatewaySettingField","gatewayName","gatewayDescription","implementClassName","autoConnectTimeRanges","ctpApiSetting","ibApiSetting","CtpApiSettingField","IbApiSettingField","userId","brokerId","tdHost","tdPort","mdHost","mdPort","authCode","userProductInfo","appId","host","port","clientId","LogField","logLevel","timestamp","content","NoticeField","RpcSubscribeReq","commonReq","RpcSubscribeRsp","commonRsp","RpcUnsubscribeReq","RpcUnsubscribeRsp","RpcSubmitOrderReq","submitOrderReq","RpcSubmitOrderRsp","RpcCancelOrderReq","cancelOrderReq","RpcCancelOrderRsp","RpcSearchContractReq","RpcSearchContractRsp","RpcGetOrderListReq","RpcGetOrderListRsp","RpcGetWorkingOrderListReq","RpcGetWorkingOrderListRsp","RpcQueryOrderByOrderIdReq","RpcQueryOrderByOrderIdRsp","RpcQueryOrderByOriginOrderIdReq","RpcQueryOrderByOriginOrderIdRsp","RpcQueryOrderListByAccountIdReq","RpcQueryOrderListByAccountIdRsp","RpcQueryOrderListByUniformSymbolReq","RpcQueryOrderListByUniformSymbolRsp","RpcGetTradeListReq","RpcGetTradeListRsp","RpcQueryTradeByTradeIdReq","RpcQueryTradeByTradeIdRsp","RpcQueryTradeListByUniformSymbolReq","RpcQueryTradeListByUniformSymbolRsp","RpcQueryTradeListByAccountIdReq","RpcQueryTradeListByAccountIdRsp","RpcQueryTradeListByOrderIdReq","RpcQueryTradeListByOrderIdRsp","RpcQueryTradeListByOriginOrderIdReq","RpcQueryTradeListByOriginOrderIdRsp","RpcGetPositionListReq","RpcGetPositionListRsp","RpcQueryPositionByPositionIdReq","RpcQueryPositionByPositionIdRsp","RpcQueryPositionListByAccountIdReq","RpcQueryPositionListByAccountIdRsp","RpcQueryPositionListByUniformSymbolReq","RpcQueryPositionListByUniformSymbolRsp","RpcGetAccountListReq","RpcGetAccountListRsp","RpcQueryAccountByAccountIdReq","RpcQueryAccountByAccountIdRsp","RpcQueryAccountListByAccountCodeReq","RpcQueryAccountListByAccountCodeRsp","RpcGetContractListReq","RpcGetContractListRsp","RpcQueryContractByUniformSymbolReq","RpcQueryContractByUniformSymbolRsp","RpcSyncSlaveNodeRuntimeDataReq","RpcSyncSlaveNodeRuntimeDataRsp","gatewaySetting","subscribedContract","RpcGetTickListReq","RpcGetTickListRsp","RpcQueryDBBarListReq","startTimestamp","endTimestamp","barPeriod","marketDataDBType","RpcQueryDBBarListRsp","bar","RpcQueryDBTickListReq","RpcQueryDBTickListRsp","RpcQueryVolumeBarListReq","RpcQueryVolumeBarListRsp","RpcExceptionRsp","originalRpcId","originalTransactionId","originalTimestamp","RpcOrderRtn","RpcTradeRtn","RpcContractRtn","RpcPositionRtn","RpcAccountRtn","RpcTickRtn","RpcOrderListRtn","RpcTradeListRtn","RpcContractListRtn","RpcPositionListRtn","RpcAccountListRtn","RpcTickListRtn","RpcNoticeRtn","notice","RpcId","DataExchangeProtocol","contentType","rpcId","contentBytes","newBuffer","bytes","base64","ContentType","slice","module","exports","RpcClientApi","generateCommonReq","uuidv4","rpcSubscribeReq","rpcClientProcess","sendRpc","SUBSCRIBE_REQ","finish","asyncUnsubscribe","rpcUnsubscribeReq","UNSUBSCRIBE_REQ","rpcSubmitOrderReq","SUBMIT_ORDER_REQ","rpcCancelOrderReq","CANCEL_ORDER_REQ","asyncSearchContract","rpcSearchContractReq","SEARCH_CONTRACT_REQ","rpcGetAccountListReq","sendAsyncHttpRpc","GET_ACCOUNT_LIST_REQ","rpcGetContractListReq","GET_CONTRACT_LIST_REQ","rpcGetPositionListReq","GET_POSITION_LIST_REQ","rpcGetOrderListReq","GET_ORDER_LIST_REQ","rpcGetTradeListReq","GET_TRADE_LIST_REQ","asyncGetTickList","rpcGetTickListReq","GET_TICK_LIST_REQ","getInstance","instance","ManagementPage","inject","observer","React","selectedKey","onLinkClick","item","props","itemKey","render","routes","defaultSelectedKey","map","route","pathname","startsWith","path","Pivot","styles","linkIsSelected","height","link","linkContent","root","text","lineHeight","PivotItem","headerText","withRouter","columnProps","tokens","childrenGap","width","NodePage","showTokenModal","tokenForShow","nodeIdForTokenShow","hiddenDeleteNodeDialog","nodeIdForDelete","hiddenResetNodeTokenDialog","nodeIdForReset","editNodeDescription","editNodeId","showUpdateNodeDescriptionModal","windowInnerWidth","innerWidth","windowInnerHeight","innerHeight","resize","setState","openShowTokenModal","token","closeShowTokenModal","openDeleteNodeDialog","closeDeleteNodeDialog","openResetNodeTokenDialog","closeResetNodeTokenDialog","openUpdateNodeDescriptionModal","closeUpdateNodeDescriptionModal","getCommandBarItems","key","iconProps","iconName","onClick","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","columns","minWidth","isResizable","isCollapsible","onRender","style","color","recentlySessionId","recentlyIpAddress","recentlyPort","recentlyLoginTime","recentlyLogoutTime","IconButton","menuIconProps","role","aria-haspopup","aria-label","float","menuProps","items","classNames","mergeStyleSets","wrapper","maxHeight","Stack","CommandBar","className","ScrollablePane","scrollbarVisibility","ScrollbarVisibility","auto","DetailsList","compact","selectionMode","SelectionMode","none","setKey","layoutMode","DetailsListLayoutMode","fixedColumns","constrainMode","ConstrainMode","unconstrained","onRenderDetailsHeader","detailsHeaderProps","defaultRender","Sticky","stickyPosition","StickyPositionType","Header","isScrollSynced","DetailsHeader","paddingTop","check","cellIsCheck","onRenderDetailsFooter","detailsFooterProps","Footer","Modal","isOpen","isBlocking","onDismiss","padding","Item","align","horizontal","overflowX","TextField","label","defaultValue","disabled","readOnly","Dialog","hidden","dialogContentProps","DialogType","normal","title","subText","modalProps","main","maxWidth","DialogFooter","PrimaryButton","DefaultButton","Separator","fontSize","FontSizes","xxLarge","multiline","resizable","onChange","event","newValue","editNodeDescriptionOnChange","target","value","theme","createTheme","fonts","medium","fontFamily","actionButtonStyles","dropdownStyles","dropdown","gatewayTypeOptions","gatewayAdapterTypeOptions","gatewayImplementClassNameOptions","GatewayPage","hiddenDisconnectGatewayDialog","gatewayIdForDisconnect","hiddenDeleteGatewayDialog","gatewayIdForDelete","hiddenConnectAllGatewaysDialog","hiddenDisconnectAllGatewaysDialog","showEditGatewayModal","editGatewayId","editGatewayName","editGatewayNameErrorMessage","editGatewayDescription","editGatewayTargetNodeId","editGatewayTargetNodeIdErrorMessage","editGatewayImplementClassName","editGatewayImplementClassNameErrorMessage","editGatewayType","editGatewayAdapterType","editAutoConnectTimeRanges","editGatewayCtpSettingUserId","editGatewayCtpSettingUserIdErrorMessage","editGatewayCtpSettingPassword","editGatewayCtpSettingPasswordErrorMessage","editGatewayCtpSettingMdHost","editGatewayCtpSettingMdHostErrorMessage","editGatewayCtpSettingMdPort","editGatewayCtpSettingMdPortErrorMessage","editGatewayCtpSettingTdHost","editGatewayCtpSettingTdHostErrorMessage","editGatewayCtpSettingTdPort","editGatewayCtpSettingTdPortErrorMessage","editGatewayCtpSettingUserProductInfo","editGatewayCtpSettingAuthCode","editGatewayCtpSettingBrokerId","editGatewayCtpSettingBrokerIdErrorMessage","editGatewayCtpSettingAppId","editGatewayIbSettingClientId","editGatewayIbSettingHost","editGatewayIbSettingHostErrorMessage","editGatewayIbSettingPort","editGatewayIbSettingPortErrorMessage","openConnectAllGatewaysDialog","closeConnectAllGatewaysDialog","openDisconnectAllGatewaysDialog","closeDisconnectAllGatewaysDialog","openDisconnectGatewayDialog","closeDisconnectGatewayDialog","openDeleteGatewayDialog","closeDeleteGatewayDialog","openEditGatewayModal","CS_Disconnected","CS_Connected","CS_Disconnecting","CS_Connecting","GTE_TradeAndMarketData","GTE_MarketData","GTE_Trade","GAT_CTP","GAT_IB","GAT_COMMON","ActionButton","allowDisabledFocus","checked","id","errorMessage","commonHandleFieldChange","ComboBox","allowFreeform","autoComplete","option","index","onPendingValueChanged","Dropdown","saveEditGateway","closeEditGatewayModal","validateAllField","validateEditGatewayName","validateEditGatewayTargetNodeId","normalIntegerPattern","test","validateEditGatewayImplementClassName","validateEditGatewayCtpSettingUserId","validateEditGatewayCtpSettingBrokerId","validateEditGatewayCtpSettingPassword","validateEditGatewayCtpSettingMdHost","hostNamePattern","ipv4PattenPattern","validateEditGatewayCtpSettingMdPort","portPattern","validateEditGatewayCtpSettingTdHost","validateEditGatewayCtpSettingTdPort","validateEditGatewayIbSettingHost","validateEditGatewayIbSettingPort","result","errorMessateState","isValidated","ctpSetting","ibSetting","SettingPage","handlePasswordChange","handleNewPasswordChange","LoginPage","redirectToPah","handleUsernameChange","handleSaveLoginInfoChange","currentTarget","to","Checkbox","background","DefaultPalette","themeTertiary","white","themePrimary","NotFoundPage","synchronizedHistory","UserPage","hiddenDeleteUserDialog","usernameForDelete","editUserDescription","editUsername","editUserPassword","editCanReadGateway","editCanChangeGatewayStatus","editCanWriteGateway","editCanReadUser","editCanChangeUserStatus","editCanWriteUser","editCanReadOperator","editCanChangeOperatorStatus","editCanWriteOperator","editCanReadNode","editCanChangeNodeToken","editCanWriteNode","editCanReadLog","editCanReadMarketDataRecording","editCanWriteMarketDataRecording","showUpdateUserDescriptionModal","showUpdateUserPasswordModal","showEditPermissionModal","showAddUserModal","openAddUserModal","closeAddUserModal","canReadGateway","canChangeGatewayStatus","canWriteGateway","canReadUser","canChangeUserStatus","canWriteUser","canReadOperator","canChangeOperatorStatus","canWriteOperator","canReadNode","canChangeNodeToken","canWriteNode","canReadLog","canReadMarketDataRecording","canWriteMarketDataRecording","openEditPermissionModal","closeEditPermissionModal","openDeleteUserDialog","closeDeleteUserDialog","openUpdateUserPasswordModal","closeUpdateUserPasswordModal","openUpdateUserDescriptionModal","closeUpdateUserDescriptionModal","loginTimes","recentlyNodeId","editUserPasswordOnChange","editUserDescriptionOnChange","RedirectToManagementPage","RedirectToTradeMobilePage","RedirectToTradePage","AccountDetailsPage","accountSelection","Selection","onSelectionChanged","pAccountSelection","selectionList","getSelection","handleAccountSelectionChange","componentHeight","borderBottom","labelStyls","display","textAlign","paddingRight","TooltipHost","calloutProps","gapSpace","tooltipProps","onRenderContent","delay","TooltipDelay","directionalHint","DirectionalHint","bottomCenter","styleClasses","todayProfit","numberFormat","marginRate","xSmall","whiteSpace","borderLeft","MarqueeSelection","selection","multiple","selectionPreservedOnEmptyClick","tableLabelStyls","PositionDetailsPage","showMerged","showEmpty","tradePositionStorePositionList","mergedPositionMap","tmpKey","tmpPosition","tmpGateway","deepCopy","isNumber","tooltipLabelStyls","clazzNames","cursor","PD_Long","PD_Short","PD_Net","PD_Unknown","HF_Unknown","decimalsLen","split","marginRatio","marginTop","OrderDetailsPage","statusChoice","showRejected","tradeAccountStoreOrderList","OS_AllTraded","OS_Canceled","OS_Rejected","OF_Unknown","OPT_Unknown","OS_PartTradedQueueing","OS_PartTradedNotQueueing","OS_NoTradeQueueing","OS_NoTradeNotQueueing","OS_Touched","OS_NotTouched","OS_Unknown","TC_GFA","TC_GFS","TC_GTD","TC_Unknown","VC_Unknown","CC_Unknown","onItemInvoked","ChoiceGroup","ev","ContractDetailsPage","filterExchange","filterProductClass","filterCurrency","filterSymbol","filterUnderlyingSymbol","filterThirdPartyId","filterName","filterLastTradeDateOrContractMonth","flag","indexOf","O_CallOptions","O_PutOptions","O_Unknown","paddingLeft","exchangeOptions","productClassOptions","currencyOptions","FavoriteContractDetailsPage","TradeDetailsPage","directionChoice","tradeTradeStoreTradeList","mergedTradeMap","tmpTrade","TradeBoardPage","showSubmitOrderModal","confirmPrice","actionType","closeSubmitOrderModal","openSubmitOrderModal","size","counter","reuseVolume","resetVolume","shortName","generateAccountVolumeDom","isFinal","tmpAccountVolumeDomList","finalVolume","step","min","accountVolumeDomList","execOrders","submitFlag","buyButtonForModal","coverButtonForModal","shortButtonForModal","sellButtonForModal","borderRight","paddingBottom","overflowY","dragOptions","moveMenuItemText","closeMenuItemText","menu","ContextualMenu","large","MarketDetailsPage","askPrice1","askPrice1ClassName","askVolume1","askPrice2","askPrice2ClassName","askVolume2","askPrice3","askPrice3ClassName","askVolume3","askPrice4","askPrice4ClassName","askVolume4","askPrice5","askPrice5ClassName","askVolume5","bidPrice1","bidPrice1ClassName","bidVolume1","bidPrice2","bidPrice2ClassName","bidVolume2","bidPrice3","bidPrice3ClassName","bidVolume3","bidPrice4","bidPrice4ClassName","bidVolume4","bidPrice5","bidPrice5ClassName","bidVolume5","lastPriceClassName","pctChange","openPriceClassName","highPriceClassName","lowPriceClassName","settlePriceClassName","dayOpenInterestChange","time","preReferencePrice","numberOfDecimalDigits","tmpNumberOfDecimalDigits","getNumberOfDecimalDigits","checkEffectiveNumber","timestampFormat","xLarge","zero","TradeHomePage","TradePage","TradeMobileHomePage","TradeMobilePage","HomePage","hiddenDeleteOperatorDialog","showUpdateOperatorDescriptionModal","operatorIdForUpdateDescription","editOperatorDescription","operatorIdForDelete","selectedOperatorId","acceptReadSpecialAccountIdInput","denyReadSpecialAccountIdInput","acceptTradeSpecialAccountIdInput","denyTradeSpecialAccountIdInput","acceptTradeSpecialUniformSymbolInput","denyTradeSpecialUniformSymbolInput","acceptSubscribeSpecialUniformSymbolInput","denySubscribeSpecialUniformSymbolInput","operatorSelection","selectionCount","getSelectedCount","openUpdateOperatorDescriptionModal","closeUpdateOperatorDescriptionModal","updateOperatorDescriptionByOperatorId","operatorDescription","operatorItems","canReadAllAccounts","acceptReadSpecialAccountIdList","denyReadSpecialAccountIdList","canTradeAllAccounts","acceptTradeSpecialAccountIdList","denyTradeSpecialAccountIdList","canTradeAllContracts","acceptTradeSpecialUniformSymbolList","denyTradeSpecialUniformSymbolList","canSubscribeAllContracts","acceptSubscribeSpecialUniformSymbolList","denySubscribeSpecialUniformSymbolList","selectedOperator","acceptReadSpecialAccountIdSet","denyReadSpecialAccountIdSet","acceptTradeSpecialAccountIdSet","denyTradeSpecialAccountIdSet","acceptTradeSpecialUniformSymbolSet","denyTradeSpecialUniformSymbolSet","acceptSubscribeSpecialUniformSymbolSet","denySubscribeSpecialUniformSymbolSet","columnRightProps","operatorColumns","associatedToUser","openDeleteOperatorDialog","acceptReadSpecialAccountIdSetColumns","tmpSet","delete","denyReadSpecialAccountIdSetColumns","acceptTradeSpecialAccountIdSetColumns","denyTradeSpecialAccountIdSetColumns","acceptTradeSpecialUniformSymbolSetColumns","denyTradeSpecialUniformSymbolSetColumns","acceptSubscribeSpecialUniformSymbolSetColumns","denySubscribeSpecialUniformSymbolSetColumns","selectTableWrapper","childTableWrapper","isEnabled","single","small","placeholder","borderTop","closeDeleteOperatorDialog","deleteOperatorById","editOperatorDescriptionOnChange","setAllSelected","MarketDataRecordingPage","component","isPrivate","OperatorPage","RouteWithSubRoutes","from","configure","wordBreak","zIndex","initializeIcons","loadTheme","palette","themeLighterAlt","themeLighter","themeLight","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","stores","ReactDOM","document","getElementById","RpcClientProcess","intervalRefreshAllDataStarted","startIntervalRefreshAllData","checkConnected","onConnectd","processData","dep","Buffer","finalContentBytes","COMPRESSED_LZ4","lz4","ROUTINE","doCoreRpc","UNKNOWN_RPC_ID","SUBSCRIBE_RSP","rpcSubscribeRsp","checkCommonRsp","rpcClientRspHandler","onSubscribeRsp","UNSUBSCRIBE_RSP","rpcUnsubscribeRsp","onUnsubscribeRsp","SUBMIT_ORDER_RSP","rpcSubmitOrderRsp","onSubmitOrderRsp","CANCEL_ORDER_RSP","rpcCancelOrderRsp","onCancelOrderRsp","SEARCH_CONTRACT_RSP","rpcSearchContractRsp","GET_ACCOUNT_LIST_RSP","rpcGetAccountListRsp","onGetAccountListRsp","GET_CONTRACT_LIST_RSP","rpcGetContractListRsp","onGetContractListRsp","GET_POSITION_LIST_RSP","rpcGetPositionListRsp","onGetPositionListRsp","GET_TRADE_LIST_RSP","rpcGetTradeListRsp","onGetTradeListRsp","GET_ORDER_LIST_RSP","rpcGetOrderListRsp","onGetOrderListRsp","GET_TICK_LIST_RSP","rpcGetTickListRsp","onGetTickListRsp","EXCEPTION_RSP","rpcExceptionRsp","onExceptionRsp","ORDER_RTN","rpcOrderRtn","rpcClientRtnHandler","onOrderRtn","TRADE_RTN","rpcTradeRtn","onTradeRtn","POSITION_RTN","rpcPositionRtn","onPositionRtn","ACCOUNT_RTN","rpcAccountRtn","onAccountRtn","CONTRACT_RTN","rpcContractRtn","onContractRtn","TICK_RTN","rpcTickRtn","onTickRtn","ORDER_LIST_RTN","rpcOrderListRtn","onOrderListRtn","TRADE_LIST_RTN","rpcTradeListRtn","onTradeListRtn","POSITION_LIST_RTN","rpcPositionListRtn","onPositionListRtn","ACCOUNT_LIST_RTN","rpcAccountListRtn","onAccountListRtn","CONTRACT_LIST_RTN","rpcContractListRtn","onContractListRtn","TICK_LIST_RTN","rpcTickListRtn","onTickListRtn","NOTICE_RTN","rpcNoticeRtn","onNoticeRtn","generateRpcDep","resData","sendData","generateLz4RpcDep","generateRoutineRpcDep","encodeContent","Date","now","Error","RpcClientRtnHandler","commonStatus","COMS_INFO","COMS_WARN","COMS_ERROR","COMS_SUCCESS","RpcClientRspHandler","rpcTransactionId","onSearchContractRsp","accountListlength","decimals","comma","isNaN","Math","abs","toExponential","toFixed","reg","val","minLength","substring","formatDate","date","fmt","RegExp","$1","getFullYear","substr","o","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","keyList","k","str","toISOString","formatStr","x","y","WebSocketClientHandler","authFailedState","connectRetry","connectRetryTimes","connectStatus","closeCode","closeReason","ws","getStatus","STATUS_CONNECTED","STATUS_DISCONNECTED","STATUS_CONNECTING","WebSocket","hostname","binaryType","onopen","onclose","onerror","onmessage","STATUS_DISCONNECTING","close","send","e","verified","Uint8Array","reason","that","readyState"],"mappings":"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","file":"static/js/main.fe4c3a21.chunk.js","sourcesContent":["import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass NodeStore {\r\n    nodeList: any[] = [];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            nodeList: observable,\r\n            getNodeList: action,\r\n            createNode: action,\r\n            deleteNodeByNodeId: action,\r\n            resetNodeTokenByNodeId: action,\r\n            updateNodeDescriptionByNodeId: action,\r\n            setNodeList: action\r\n        });\r\n    }\r\n\r\n    setNodeList(nodeList:any[]) {\r\n        this.nodeList = nodeList\r\n    }\r\n\r\n    getNodeList() {\r\n        request('/api/management/node/getNodeList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const nodeList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setNodeList(nodeList)\r\n                } else {\r\n                    toast.error(`查询节点错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    createNode() {\r\n        request('/api/management/node/createNode').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`新增节点错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteNodeByNodeId(nodeId: number) {\r\n        request('/api/management/node/deleteNodeByNodeId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': nodeId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`删除节点错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    resetNodeTokenByNodeId(nodeId: number) {\r\n        request('/api/management/node/resetNodeTokenByNodeId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': nodeId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`重置节点令牌错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    updateNodeDescriptionByNodeId(nodeId: number, description: string) {\r\n        request('/api/management/node/updateNodeDescriptionByNodeId', {\r\n            method: 'POST',\r\n            data: {\r\n                'nodeId': nodeId,\r\n                'description': description\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getNodeList()\r\n                } else {\r\n                    toast.error(`更新节点描述错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const nodeStore = new NodeStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass GatewayStore {\r\n    gatewayList: any[] = [];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            gatewayList: observable,\r\n            getGatewayList: action,\r\n            saveOrUpdateGateway: action,\r\n            deleteGatewayByGatewayId: action,\r\n            connectGatewayByGatewayId: action,\r\n            disconnectGatewayByGatewayId: action,\r\n            disconnectAllGateways: action,\r\n            connectAllGateways: action,\r\n            setGatewayList: action\r\n        });\r\n    }\r\n\r\n    setGatewayList(gatewayList:any[]) {\r\n        this.gatewayList = gatewayList\r\n    }\r\n\r\n    getGatewayList() {\r\n        request('/api/management/gateway/getGatewayList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const gatewayList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setGatewayList(gatewayList)\r\n                } else {\r\n                    toast.error(`查询网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveOrUpdateGateway(gateway: any) {\r\n        request('/api/management/gateway/saveOrUpdateGateway', {\r\n            method: 'POST',\r\n            data: {\r\n                ...gateway\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`增加或修改网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteGatewayByGatewayId(gatewayId: string) {\r\n        request('/api/management/gateway/deleteGatewayByGatewayId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': gatewayId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`删除网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n\r\n    connectGatewayByGatewayId(gatewayId: string) {\r\n        request('/api/management/gateway/connectGatewayByGatewayId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': gatewayId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`连接网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n\r\n    disconnectGatewayByGatewayId(gatewayId: string) {\r\n        request('/api/management/gateway/disconnectGatewayByGatewayId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': gatewayId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`断开网关错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n\r\n    disconnectAllGateways() {\r\n        request('/api/management/gateway/disconnectAllGateways').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`断开全部网关错误:${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    connectAllGateways() {\r\n        request('/api/management/gateway/connectAllGateways').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getGatewayList()\r\n                } else {\r\n                    toast.error(`连接全部网关错误:${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n}\r\nexport const gatewayStore = new GatewayStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass UserStore {\r\n    userList: any[] = [];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userList: observable,\r\n            getUserList: action,\r\n            addUser: action,\r\n            deleteUserByUsername: action,\r\n            updateUserDescriptionByUsername: action,\r\n            updateUserPasswordByUsername: action,\r\n            updateUserPermissionByUsername: action,\r\n            setUserList: action\r\n        });\r\n    }\r\n\r\n    setUserList(userList:any[]){\r\n        this.userList = userList\r\n    }\r\n\r\n    getUserList() {\r\n        request('/api/management/user/getUserList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const userList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setUserList(userList)\r\n                } else {\r\n                    toast.error(`查询用户错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    addUser(user: any) {\r\n\r\n        request('/api/management/user/addUser', {\r\n            method: 'POST',\r\n            data: {\r\n                ...user\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`新增用户错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteUserByUsername(username: string) {\r\n        request('/api/management/user/deleteUserByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': username\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`删除用户错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n\r\n    updateUserDescriptionByUsername(username: string, description: string) {\r\n        request('/api/management/user/updateUserDescriptionByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                'username': username,\r\n                'description': description\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`更新用户描述错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n\r\n    updateUserPasswordByUsername(username: string, password: string) {\r\n        request('/api/management/user/updateUserPasswordByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                'username': username,\r\n                'newPassword': password\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`更新用户密码错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    updateUserPermissionByUsername(user: any) {\r\n\r\n        request('/api/management/user/updateUserPermissionByUsername', {\r\n            method: 'POST',\r\n            data: {\r\n                ...user\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getUserList()\r\n                } else {\r\n                    toast.error(`更新用户权限错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const userStore = new UserStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\nimport { webSocketClientHandler } from '../node/client/websocket/webSocketClientHandler';\r\n\r\nclass AuthenticationStore {\r\n    isAuthenticated = false;\r\n    userPo: any;\r\n    saveLoginInfoState: boolean = false;\r\n    username: string = \"\";\r\n    password: string = \"\";\r\n    operatorId: string = \"\";\r\n    authToken: string = \"\";\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            isAuthenticated: observable,\r\n            userPo: observable,\r\n            saveLoginInfoState: observable,\r\n            username: observable,\r\n            password: observable,\r\n            operatorId: observable,\r\n            authToken: observable,\r\n            initStore: action,\r\n            setUsername: action,\r\n            setPassword: action,\r\n            setSaveLoginInfoState: action,\r\n            logout: action,\r\n            getAuthToken: action,\r\n            checkLoginStatus: action,\r\n            login: action,\r\n            setLoginSuccess: action,\r\n            deleteLoginInfo: action,\r\n            changePassword: action\r\n        });\r\n\r\n        this.initStore()\r\n\r\n        window.setInterval(() => {\r\n            if (this.isAuthenticated) {\r\n                this.checkLoginStatus()\r\n            }\r\n        }, 15000);\r\n    }\r\n\r\n    initStore() {\r\n        const userPoJsonStr = sessionStorage.getItem('LOGINED_USER');\r\n        if (userPoJsonStr) {\r\n            this.userPo = JSON.parse(userPoJsonStr);\r\n            this.authToken = this.userPo.randomAuthToken;\r\n            this.isAuthenticated = true;\r\n            this.operatorId = this.userPo.operatorId;\r\n            this.username = this.userPo.username;\r\n            webSocketClientHandler.setAuthToken(this.authToken)\r\n            webSocketClientHandler.connect()\r\n        } else {\r\n            const username = localStorage.getItem(\"username\")\r\n            if (username) {\r\n                this.username = username;\r\n                this.saveLoginInfoState = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setUsername(username: string) {\r\n        this.username = username;\r\n    }\r\n\r\n    setPassword(password: string) {\r\n        this.password = password;\r\n    }\r\n\r\n    setSaveLoginInfoState(saveLoginInfoState: boolean) {\r\n        this.saveLoginInfoState = saveLoginInfoState;\r\n    }\r\n\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(\"LOGINED_USER\");\r\n        this.userPo = null;\r\n        this.isAuthenticated = false;\r\n        this.authToken = \"\";\r\n        webSocketClientHandler.disconnect()\r\n        request('/api/logout')\r\n    }\r\n\r\n    getAuthToken() {\r\n        return this.authToken\r\n    }\r\n\r\n    checkLoginStatus() {\r\n        request('/api/checkLoginStatus')\r\n    }\r\n\r\n    login() {\r\n        request('/api/login', {\r\n            method: 'POST',\r\n            data: {\r\n                'username': this.username,\r\n                'password': this.password\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.userPo = res.voData;\r\n                    this.setLoginSuccess(this.userPo)\r\n                } else {\r\n                    toast.error(`登录错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    setLoginSuccess(userPo:any){\r\n        if (this.saveLoginInfoState) {\r\n            localStorage.setItem(\"username\", this.username);\r\n        } else {\r\n            localStorage.removeItem(\"username\")\r\n            this.username = \"\"\r\n            this.saveLoginInfoState = false;\r\n        }\r\n        sessionStorage.setItem('LOGINED_USER', JSON.stringify(this.userPo));\r\n        this.operatorId = this.userPo.operatorId;\r\n        this.authToken = this.userPo.randomAuthToken;\r\n        this.isAuthenticated = true;\r\n        webSocketClientHandler.setAuthToken(this.authToken)\r\n        webSocketClientHandler.connect()\r\n    }\r\n\r\n    deleteLoginInfo() {\r\n\r\n        localStorage.removeItem(\"username\")\r\n\r\n        this.username = \"\";\r\n        this.saveLoginInfoState = false;\r\n    }\r\n\r\n    changePassword(password: string, newPassword: string) {\r\n        request('/api/changePassword', {\r\n            method: 'POST',\r\n            data: {\r\n                'password': password,\r\n                'newPassword': newPassword\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    toast.success(\"修改密码完成\")\r\n                } else {\r\n                    toast.error(`修改密码错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n}\r\nexport const authenticationStore = new AuthenticationStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { isDevEnv } from '../utils';\r\n\r\nclass TradeContractStore {\r\n    mixContractList: any[] = [];\r\n    mxiContractMap: Map<string, any> = new Map();\r\n\r\n    hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            mixContractList: observable,\r\n            getContractList: action,\r\n            storeContract: action,\r\n            clearAndStoreContractList: action,\r\n            storeContractList: action,\r\n            coverMapToList: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 20)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 500)\r\n    }\r\n\r\n    getContractList() {\r\n        rpcClientApi.asyncGetContractList()\r\n    }\r\n\r\n    storeContract(contract: any) {\r\n        if (isDevEnv) {\r\n            console.debug(contract)\r\n        }\r\n        this.mxiContractMap.set(contract.uniformSymbol, contract);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStoreContractList(mixContractList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(mixContractList)\r\n        }\r\n        const newMixContractMap: Map<string, any> = new Map();\r\n        for (let i = 0; i <  mixContractList.length; i++) {\r\n            const contract = mixContractList[i]\r\n            newMixContractMap.set(contract.uniformSymbol, contract)\r\n        }\r\n        this.mxiContractMap = newMixContractMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeContractList(mixContractList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(mixContractList)\r\n        }\r\n        for (let i = 0; i < mixContractList.length; i++) {\r\n            const contract = mixContractList[i]\r\n            this.mxiContractMap.set(contract.uniformSymbol, contract);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        this.mixContractList = [...this.mxiContractMap.values()]\r\n    }\r\n\r\n\r\n\r\n}\r\nexport const tradeContractStore = new TradeContractStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { leftZeroPad, isDevEnv } from '../utils'\r\nimport { tradeContractStore } from './tradeContractStore'\r\nclass TradeOrderStore {\r\n\r\n    orderList: any[] = [];\r\n    orderMap: Map<string, any> = new Map();\r\n\r\n    hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            orderList: observable,\r\n            getOrderList: action,\r\n            storeOrder: action,\r\n            clearAndStoreOrderList: action,\r\n            storeOrderList: action,\r\n            coverMapToList: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 30)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 300)\r\n    }\r\n\r\n    getOrderList() {\r\n        rpcClientApi.asyncGetOrderList()\r\n    }\r\n\r\n    storeOrder(order: any) {\r\n        if (isDevEnv) {\r\n            console.debug(order)\r\n        }\r\n        if (order.contract) {\r\n            tradeContractStore.storeContract(order.contract)\r\n        }\r\n        this.orderMap.set(order.orderId, order);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStoreOrderList(orderList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(orderList)\r\n        }\r\n        const newOrderMap: Map<string, any> = new Map();\r\n        for (let i = 0; i < orderList.length; i++) {\r\n            const order = orderList[i]\r\n            if (order.contract) {\r\n                tradeContractStore.storeContract(order.contract)\r\n            }\r\n            newOrderMap.set(order.orderId, order)\r\n        }\r\n        this.orderMap = newOrderMap;\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeOrderList(orderList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(orderList)\r\n        }\r\n        \r\n        for (let i = 0; i < orderList.length; i++) {\r\n            const order = orderList[i]\r\n            if (order.contract) {\r\n                tradeContractStore.storeContract(order.contract)\r\n            }\r\n            this.orderMap.set(order.orderId, order);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        const tempOrderList = [...this.orderMap.values()]\r\n        this.orderList = this.sortOrderListByDatetimeAndOrderId(tempOrderList);\r\n    }\r\n\r\n    private sortOrderListByDatetimeAndOrderId(orderList: any[]) {\r\n        try {\r\n            return orderList.sort((orderA: any, orderB: any) => {\r\n                let orderAKey = \"\";\r\n                if (!orderA.orderDate || orderA.orderDate === \"\") {\r\n                    orderAKey = \"00000000\";\r\n                } else {\r\n                    orderAKey = orderA.orderDate\r\n                }\r\n\r\n                if (!orderA.orderTime || orderA.orderTime === \"\") {\r\n                    orderAKey += \"00:00:00\";\r\n                } else {\r\n                    orderAKey += orderA.orderTime\r\n                }\r\n                orderAKey += leftZeroPad(orderA.adapterOrderId, 30)\r\n\r\n                let orderBKey = \"\";\r\n                if (!orderB.orderDate || orderB.orderDate === \"\") {\r\n                    orderBKey = \"00000000\";\r\n                } else {\r\n                    orderBKey = orderB.orderDate\r\n                }\r\n\r\n                if (!orderB.orderTime || orderB.orderTime === \"\") {\r\n                    orderBKey += \"00:00:00\";\r\n                } else {\r\n                    orderBKey += orderB.orderTime\r\n                }\r\n                orderBKey += leftZeroPad(orderB.adapterOrderId, 30)\r\n                return orderBKey.localeCompare(orderAKey)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return orderList;\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport const tradeOrderStore = new TradeOrderStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { leftZeroPad, isDevEnv } from '../utils';\r\nimport { tradeAccountStore } from './tradeAccountStore'\r\nimport { tradeContractStore } from './tradeContractStore';\r\nimport { xyz } from \"../node/pb/pb\";\r\n\r\nconst { CurrencyEnum } = xyz.redtorch.pb\r\n\r\nclass TradePositionStore {\r\n\r\n    positionList: any[] = [];\r\n    positionMap: Map<string, any> = new Map();\r\n    summaryMap: Map<string, any> = new Map();\r\n\r\n    private hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            positionList: observable,\r\n            summaryMap: observable,\r\n            getPositionList: action,\r\n            storePosition: action,\r\n            clearAndStorePositionList: action,\r\n            storePositionList: action,\r\n            coverMapToList: action,\r\n            calcSummary: action\r\n        });\r\n\r\n        const cnySummary = {\r\n            \"allContractValue\": 0,\r\n            \"allOpenPositionProfit\": 0,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n        setTimeout(this.startIntervalCheckChange, 40)\r\n    }\r\n\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 300)\r\n    }\r\n\r\n    getPositionList() {\r\n        rpcClientApi.asyncGetPositionList()\r\n    }\r\n\r\n    storePosition(position: any) {\r\n        if (isDevEnv) {\r\n            console.debug(position)\r\n        }\r\n        if (position.contract) {\r\n            tradeContractStore.storeContract(position.contract)\r\n        }\r\n        this.positionMap.set(position.positionId, position);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStorePositionList(positionList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(positionList)\r\n        }\r\n        const newPositionMap: Map<string, any> = new Map();\r\n        for (let i = 0; i <  positionList.length; i++) {\r\n            const position = positionList[i]\r\n            if (position.contract) {\r\n                tradeContractStore.storeContract(position.contract)\r\n            }\r\n            newPositionMap.set(position.positionId, position)\r\n        }\r\n        this.positionMap = newPositionMap;\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storePositionList(positionList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(positionList)\r\n        }\r\n        for (let i = 0; i < positionList.length; i++) {\r\n            const position = positionList[i]\r\n            if (position.contract) {\r\n                tradeContractStore.storeContract(position.contract)\r\n            }\r\n            this.positionMap.set(position.positionId, position);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n    \r\n    coverMapToList() {\r\n        const tempPositionList = [...this.positionMap.values()]\r\n        this.positionList = this.sortPositionListByAccountIdAndPositionId(tempPositionList);\r\n        this.calcSummary()\r\n    }\r\n\r\n    calcSummary() {\r\n\r\n        let allContractValue = 0;\r\n        let allOpenPositionProfit = 0;\r\n\r\n        const positionList = this.positionList\r\n        for (let i = 0; i < positionList.length; i++) {\r\n            const position = positionList[i]\r\n\r\n            if (tradeAccountStore.selectedAccountIdSet.has(position.accountId)) {\r\n                try {\r\n                    if (position.contract.currency === CurrencyEnum.CNY) {\r\n                        allOpenPositionProfit += (position.openPositionProfit)\r\n                        allContractValue += position.contractValue\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"计算持仓总资金情况错误\", error)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //  暂时只做人民币汇总\r\n        const cnySummary = {\r\n            \"allContractValue\": allContractValue,\r\n            \"allOpenPositionProfit\": allOpenPositionProfit,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n    }\r\n\r\n\r\n    private sortPositionListByAccountIdAndPositionId(positionList: any[]) {\r\n        try {\r\n            return positionList.sort((positionA: any, positionB: any) => {\r\n                let positionAKey = positionA.accountId;\r\n                positionAKey += leftZeroPad(positionA.contract.uniformSymbol, 50)\r\n\r\n                let positionBKey = positionB.accountId;\r\n                positionBKey += leftZeroPad(positionB.contract.uniformSymbol, 50)\r\n                return positionBKey.localeCompare(positionAKey)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return positionList;\r\n        }\r\n    }\r\n\r\n}\r\nexport const tradePositionStore = new TradePositionStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { isDevEnv } from '../utils';\r\nimport { tradePositionStore } from './tradePositionStore'\r\nimport { xyz } from \"../node/pb/pb\";\r\n\r\nconst { CurrencyEnum } = xyz.redtorch.pb\r\n\r\nclass TradeAccountStore {\r\n    accountList: any[] = [];\r\n    accountMap: Map<string, any> = new Map();\r\n    selectedAccountIdSet: Set<any> = new Set();\r\n\r\n    summaryMap: Map<string, any> = new Map();\r\n\r\n    private hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            accountList: observable,\r\n            selectedAccountIdSet: observable,\r\n            summaryMap: observable,\r\n            getAccountList: action,\r\n            setSelectedAccountIdSet: action,\r\n            storeAccount: action,\r\n            clearAndStoreAccountList: action,\r\n            storeAccountList: action,\r\n            coverMapToList: action,\r\n            calcSummary: action\r\n        });\r\n\r\n        const cnySummary = {\r\n            \"allBalance\": 0,\r\n            \"allPreBalance\": 0,\r\n            \"allCloseProfit\": 0,\r\n            \"allTodayProfit\": 0,\r\n            \"allPositionProfit\": 0,\r\n            \"allMargin\": 0,\r\n            \"allCommission\": 0,\r\n            \"allDepositAndWithdraw\": 0,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n        setTimeout(this.startIntervalCheckChange, 10)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 300)\r\n    }\r\n\r\n    getAccountList() {\r\n        rpcClientApi.asyncGetAccountList()\r\n    }\r\n\r\n    setSelectedAccountIdSet(selectedAccountIdSet: Set<any>) {\r\n        this.selectedAccountIdSet = selectedAccountIdSet;\r\n        this.calcSummary()\r\n        tradePositionStore.calcSummary()\r\n    }\r\n\r\n    storeAccount(account: any) {\r\n        if (isDevEnv) {\r\n            console.debug(account)\r\n        }\r\n        this.accountMap.set(account.accountId, account);\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    clearAndStoreAccountList(accountList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(accountList)\r\n        }\r\n        const newAccountMap: Map<string, any> = new Map();\r\n        for (let i = 0; i <  accountList.length; i++) {\r\n            const account = accountList[i]\r\n            newAccountMap.set(account.accountId, account)\r\n        }\r\n        this.accountMap = newAccountMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeAccountList(accountList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(accountList)\r\n        }\r\n        for (let i = 0; i < accountList.length; i++) {\r\n            const account = accountList[i]\r\n            this.accountMap.set(account.accountId, account);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        const tempAccountList = [...this.accountMap.values()]\r\n        this.accountList = this.sortAccountListByAccountId(tempAccountList);\r\n        this.calcSummary()\r\n    }\r\n\r\n    calcSummary() {\r\n\r\n        let allBalance = 0;\r\n        let allPreBalance = 0;\r\n        let allCloseProfit = 0;\r\n        let allTodayProfit = 0;\r\n        let allPositionProfit = 0;\r\n        let allMargin = 0;\r\n        let allCommission = 0;\r\n        let allDepositAndWithdraw = 0;\r\n\r\n\r\n        //  暂时只做人民币汇总\r\n        for (let i = 0; i < this.accountList.length; i++) {\r\n            const account = this.accountList[i]\r\n            if (tradeAccountStore.selectedAccountIdSet.has(account.accountId)) {\r\n                try {\r\n                    if (account.currency === CurrencyEnum.CNY) {\r\n                        allBalance += account.balance\r\n                        allTodayProfit += (account.balance - account.preBalance + account.withdraw - account.deposit)\r\n                        allPreBalance += account.preBalance\r\n                        allCloseProfit += account.closeProfit\r\n                        allPositionProfit += account.positionProfit\r\n                        allMargin += account.margin\r\n                        allCommission += account.commission\r\n                        allDepositAndWithdraw += (account.deposit - account.withdraw)\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"计算账户总资金情况错误\", error)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //  暂时只做人民币汇总\r\n        const cnySummary = {\r\n            \"allBalance\": allBalance,\r\n            \"allPreBalance\": allPreBalance,\r\n            \"allCloseProfit\": allCloseProfit,\r\n            \"allTodayProfit\": allTodayProfit,\r\n            \"allPositionProfit\": allPositionProfit,\r\n            \"allMargin\": allMargin,\r\n            \"allCommission\": allCommission,\r\n            \"allDepositAndWithdraw\": allDepositAndWithdraw,\r\n        }\r\n        this.summaryMap.set(\"CNY\", cnySummary);\r\n    }\r\n\r\n    private sortAccountListByAccountId(accountList: any[]) {\r\n        try {\r\n            return accountList.sort((accountA: any, accountB: any) => {\r\n                return accountA.accountId.localeCompare(accountB.accountId)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return accountList\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport const tradeAccountStore = new TradeAccountStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { leftZeroPad, isDevEnv } from '../utils';\r\nimport { tradeContractStore } from './tradeContractStore';\r\n\r\nclass TradeTradeStore {\r\n\r\n    tradeList: any[] = [];\r\n    tradeMap: Map<string, any> = new Map();\r\n    private hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tradeList: observable,\r\n            getTradeList: action,\r\n            storeTrade: action,\r\n            clearAndStoreTradeList: action,\r\n            storeTradeList: action,\r\n            coverMapToList: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 60)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 500)\r\n    }\r\n\r\n    getTradeList() {\r\n        rpcClientApi.asyncGetTradeList()\r\n    }\r\n\r\n    storeTrade(trade: any) {\r\n        if (isDevEnv) {\r\n            console.debug(trade)\r\n        }\r\n        if (trade.contract) {\r\n            tradeContractStore.storeContract(trade.contract)\r\n        }\r\n        this.tradeMap.set(trade.tradeId, trade);\r\n        this.hasBeenChanged = true\r\n    }\r\n    clearAndStoreTradeList(tradeList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tradeList)\r\n        }\r\n        const newTradeMap: Map<string, any> = new Map();\r\n        for (let i = 0; i < tradeList.length; i++) {\r\n            const trade = tradeList[i]\r\n            if (trade.contract) {\r\n                tradeContractStore.storeContract(trade.contract)\r\n            }\r\n            newTradeMap.set(trade.tradeId, trade)\r\n        }\r\n        this.tradeMap = newTradeMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeTradeList(tradeList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tradeList)\r\n        }\r\n        for (let i = 0; i < tradeList.length; i++) {\r\n            const trade = tradeList[i]\r\n            if (trade.contract) {\r\n                tradeContractStore.storeContract(trade.contract)\r\n            }\r\n            this.tradeMap.set(trade.tradeId, trade);\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        const tempTradeList = [...this.tradeMap.values()]\r\n        this.tradeList = this.sortTradeListByDatetimeAndTradeId(tempTradeList);\r\n    }\r\n\r\n    private sortTradeListByDatetimeAndTradeId(tradeList: any[]) {\r\n        try {\r\n            return tradeList.sort((tradeA: any, tradeB: any) => {\r\n                let tradeAKey = \"\";\r\n                if (!tradeA.tradeDate || tradeA.tradeDate === \"\") {\r\n                    tradeAKey = \"00000000\";\r\n                } else {\r\n                    tradeAKey = tradeA.tradeDate\r\n                }\r\n\r\n                if (!tradeA.tradeTime || tradeA.tradeTime === \"\") {\r\n                    tradeAKey += \"00:00:00\";\r\n                } else {\r\n                    tradeAKey += tradeA.tradeTime\r\n                }\r\n                tradeAKey += leftZeroPad(tradeA.adapterTradeId, 30)\r\n\r\n                let tradeBKey = \"\";\r\n                if (!tradeB.tradeDate || tradeB.tradeDate === \"\") {\r\n                    tradeBKey = \"00000000\";\r\n                } else {\r\n                    tradeBKey = tradeB.tradeDate\r\n                }\r\n\r\n                if (!tradeB.tradeTime || tradeB.tradeTime === \"\") {\r\n                    tradeBKey += \"00:00:00\";\r\n                } else {\r\n                    tradeBKey += tradeB.tradeTime\r\n                }\r\n                tradeBKey += leftZeroPad(tradeB.adapterTradeId, 30)\r\n                return tradeBKey.localeCompare(tradeAKey)\r\n            });\r\n        } catch (error) {\r\n            console.error(\"排序发生错误\", error)\r\n            return tradeList;\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\nexport const tradeTradeStore = new TradeTradeStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { tradeContractStore } from './tradeContractStore'\r\nimport { tradeAccountStore } from './tradeAccountStore'\r\nimport { tradeTickStore } from './tradeTickStore'\r\nimport { toast } from 'react-toastify';\r\nimport { isDevEnv } from '../utils';\r\nimport { rpcClientApi } from '../node/client/service/rpcClientApi';\r\nimport { xyz } from '../node/pb/pb';\r\n\r\nconst { SubmitOrderReqField,\r\n    ContractField,\r\n    OrderPriceTypeEnum,\r\n    DirectionEnum,\r\n    OffsetFlagEnum,\r\n    TimeConditionEnum,\r\n    VolumeConditionEnum,\r\n    HedgeFlagEnum,\r\n    AccountField,\r\n    ContingentConditionEnum,\r\n    ForceCloseReasonEnum,\r\n} = xyz.redtorch.pb\r\nclass TradeActionStore {\r\n    selectedContract: any;\r\n    orderPriceType: number = OrderPriceTypeEnum.OPT_LimitPrice;\r\n    autoFillOrderPriceType: string = \"LAST\";\r\n    price: number | string = \"\";\r\n    stopPrice: number | string = \"\";\r\n    volume: number = 0;\r\n    timeCondition: number = TimeConditionEnum.TC_GFD;\r\n    volumeCondition: number = VolumeConditionEnum.VC_AV;\r\n    minVolume: number = 1;\r\n    hedgeFlag: number = HedgeFlagEnum.HF_Speculation;\r\n    contingentCondition: number = ContingentConditionEnum.CC_Immediately;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            selectedContract: observable,\r\n            orderPriceType: observable,\r\n            autoFillOrderPriceType: observable,\r\n            price: observable,\r\n            stopPrice: observable,\r\n            volume: observable,\r\n            timeCondition: observable,\r\n            volumeCondition: observable,\r\n            minVolume: observable,\r\n            hedgeFlag: observable,\r\n            contingentCondition: observable,\r\n            setSelectedContract: action,\r\n            fillPrice: action,\r\n            setVolume: action,\r\n            setMinVolume: action,\r\n            setHedgeFlag: action,\r\n            setPrice: action,\r\n            setStopPrice: action,\r\n            setTimeCondition: action,\r\n            setContingentCondition: action,\r\n            setVolumeCondition: action,\r\n            setOrderPriceType: action,\r\n            setAutoFillOrderPriceType: action,\r\n            submitOrder: action,\r\n            cancelOrder: action,\r\n            reset: action\r\n        });\r\n    }\r\n\r\n    setSelectedContract(selectedContract: any) {\r\n\r\n        if (isDevEnv) {\r\n            console.debug(selectedContract)\r\n        }\r\n        if (selectedContract) {\r\n            if (tradeContractStore.mxiContractMap.has(selectedContract.uniformSymbol)) {\r\n                this.selectedContract = tradeContractStore.mxiContractMap.get(selectedContract.uniformSymbol)\r\n                rpcClientApi.asyncSubscribe(selectedContract)\r\n                this.fillPrice()\r\n            } else {\r\n                toast.warn(`本地缓存未找到所选合约,${selectedContract.uniformSymbol},${selectedContract.fullName}`);\r\n            }\r\n        } else {\r\n            console.warn(\"参数为空\")\r\n        }\r\n    }\r\n\r\n    fillPrice() {\r\n        if (this.selectedContract) {\r\n            if (this.autoFillOrderPriceType !== \"MANUAL\") {\r\n                if (tradeTickStore.mixTickMap.has(this.selectedContract.uniformSymbol)) {\r\n                    const tick = tradeTickStore.mixTickMap.get(this.selectedContract.uniformSymbol);\r\n                    try {\r\n                        let tmpPrice;\r\n                        if (this.autoFillOrderPriceType === \"LAST\") {\r\n                            tmpPrice = tick.lastPrice\r\n                        } else if (this.autoFillOrderPriceType === \"UPPER_LIMIT\") {\r\n                            tmpPrice = tick.upperLimit\r\n                        } else if (this.autoFillOrderPriceType === \"LOWER_LIMIT\") {\r\n                            tmpPrice = tick.lowerLimit\r\n                        } else if (this.autoFillOrderPriceType === \"BID1\") {\r\n                            if (tick.bidPrice && tick.bidPrice.length > 0) {\r\n                                tmpPrice = tick.bidPrice[0]\r\n                            }\r\n                        } else if (this.autoFillOrderPriceType === \"ASK1\") {\r\n                            if (tick.askPrice && tick.askPrice.length > 0) {\r\n                                tmpPrice = tick.askPrice[0]\r\n                            }\r\n                        }\r\n\r\n                        if (tmpPrice && tmpPrice !== Number.MAX_VALUE) {\r\n                            this.price = tmpPrice\r\n                        } else {\r\n                            this.price = \"\"\r\n                        }\r\n\r\n                    } catch (error) {\r\n                        console.error(error)\r\n                        this.price = \"\"\r\n                    }\r\n\r\n                } else {\r\n                    this.price = \"\"\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setVolume(volume: number) {\r\n        this.volume = volume\r\n    }\r\n\r\n    setMinVolume(minVolume: number | string) {\r\n        if (!minVolume || minVolume === \"\") {\r\n            this.minVolume = 1\r\n        } else {\r\n            this.minVolume = parseInt(minVolume + \"\", 10)\r\n        }\r\n    }\r\n\r\n    setHedgeFlag(hedgeFlag: number) {\r\n        this.hedgeFlag = hedgeFlag;\r\n    }\r\n\r\n    setPrice(price: number | string) {\r\n        this.autoFillOrderPriceType = \"MANUAL\"\r\n        this.price = price;\r\n    }\r\n\r\n    setStopPrice(stopPrice: number | string) {\r\n        this.stopPrice = stopPrice;\r\n    }\r\n\r\n    setTimeCondition(timeCondition: number) {\r\n        this.timeCondition = timeCondition\r\n    }\r\n\r\n    setContingentCondition(contingentCondition: number) {\r\n        this.contingentCondition = contingentCondition\r\n    }\r\n\r\n    setVolumeCondition(volumeCondition: number) {\r\n        this.volumeCondition = volumeCondition\r\n    }\r\n\r\n    setOrderPriceType(orderPriceType: number) {\r\n        this.orderPriceType = orderPriceType\r\n    }\r\n\r\n    setAutoFillOrderPriceType(autoFillOrderPriceType: string) {\r\n        this.autoFillOrderPriceType = autoFillOrderPriceType\r\n        this.fillPrice()\r\n    }\r\n\r\n    submitOrder(\r\n        selectedContract: object,\r\n        direction: number,\r\n        offsetFlag: number,\r\n        price: number,\r\n        orderPriceType: number,\r\n        volume: number,\r\n        timeCondition: number,\r\n        volumeCondition: number,\r\n        hedgeFlag: number,\r\n        minVolume: number,\r\n        accountId: string,\r\n        stopPrice: number,\r\n        contingentCondition: number,\r\n        originOrderId: string\r\n    ) {\r\n\r\n        try {\r\n            if (!accountId || accountId === \"\") {\r\n                console.error(\"本地信息:提交定单错误,账户ID为空\")\r\n                toast.error(\"本地信息:提交定单错误,账户ID为空\");\r\n                return;\r\n            }\r\n\r\n            if (!tradeAccountStore.accountMap.has(accountId)) {\r\n                console.error(`本地信息:提交定单错误,未在本地缓存找到账户信息,账户ID:${accountId}`)\r\n                toast.error(`本地信息:提交定单错误,未在本地缓存找到账户信息,账户ID:${accountId}`);\r\n                return;\r\n            }\r\n            const account = tradeAccountStore.accountMap.get(accountId)\r\n\r\n            if (!selectedContract) {\r\n                console.error(\"本地信息:提交定单错误,未选择合约\")\r\n                toast.error(\"本地信息:提交定单错误,未选择合约\");\r\n                return;\r\n            }\r\n            const contractField = ContractField.fromObject(selectedContract)\r\n\r\n            const submitOrderReqField = new SubmitOrderReqField();\r\n            submitOrderReqField.contract = contractField\r\n\r\n            if (orderPriceType !== OrderPriceTypeEnum.OPT_AnyPrice && !price) {\r\n                console.error(`本地信息:提交定单错误,错误的价格:${price}`)\r\n                toast.error(`本地信息:提交定单错误,错误的价格:${price}`);\r\n                return;\r\n            }\r\n            submitOrderReqField.price = price\r\n\r\n            if (orderPriceType === OrderPriceTypeEnum.OPT_LimitPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LimitPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_AnyPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_AnyPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_FiveLevelPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_FiveLevelPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_BestPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_BestPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_LastPrice) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LastPrice\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusOneTicks) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LastPricePlusOneTicks\r\n            } else if (orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks) {\r\n                submitOrderReqField.orderPriceType = OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的价格类型:${orderPriceType}`)\r\n                toast.error(`本地信息:提交定单错误,未知的价格类型:${orderPriceType}`);\r\n                return;\r\n            }\r\n\r\n            if (!volume || volume <= 0) {\r\n                console.error(`本地信息:提交定单错误,错误的数量:${volume}`)\r\n                toast.error(`本地信息:提交定单错误,错误的数量:${volume}`);\r\n                return;\r\n            }\r\n            submitOrderReqField.volume = volume;\r\n\r\n            if (direction === DirectionEnum.D_Buy) {\r\n                submitOrderReqField.direction = DirectionEnum.D_Buy\r\n            } else if (direction === DirectionEnum.D_Sell) {\r\n                submitOrderReqField.direction = DirectionEnum.D_Sell\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的方向类型:${direction}`)\r\n                toast.error(`本地信息:提交定单错误,未知的方向类型:${direction}`);\r\n                return;\r\n            }\r\n\r\n            if (offsetFlag === OffsetFlagEnum.OF_Open) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_Open\r\n            } else if (offsetFlag === OffsetFlagEnum.OF_Close) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_Close\r\n            } else if (offsetFlag === OffsetFlagEnum.OF_CloseToday) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_CloseToday\r\n            } else if (offsetFlag === OffsetFlagEnum.OF_CloseYesterday) {\r\n                submitOrderReqField.offsetFlag = OffsetFlagEnum.OF_CloseYesterday\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的开平类型:${offsetFlag}`)\r\n                toast.error(`本地信息:提交定单错误,未知的开平类型:${offsetFlag}`);\r\n                return;\r\n            }\r\n\r\n            if (timeCondition === TimeConditionEnum.TC_GFD) {\r\n                submitOrderReqField.timeCondition = TimeConditionEnum.TC_GFD\r\n            } else if (timeCondition === TimeConditionEnum.TC_GTC) {\r\n                submitOrderReqField.timeCondition = TimeConditionEnum.TC_GTC\r\n            } else if (timeCondition === TimeConditionEnum.TC_IOC) {\r\n                submitOrderReqField.timeCondition = TimeConditionEnum.TC_IOC\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的时效类型:${timeCondition}`)\r\n                toast.error(`本地信息:提交定单错误,未知的时效类型:${timeCondition}`);\r\n                return;\r\n            }\r\n\r\n            if (volumeCondition === VolumeConditionEnum.VC_AV) {\r\n                submitOrderReqField.volumeCondition = VolumeConditionEnum.VC_AV\r\n            } else if (volumeCondition === VolumeConditionEnum.VC_MV) {\r\n                submitOrderReqField.volumeCondition = VolumeConditionEnum.VC_MV\r\n            } else if (volumeCondition === VolumeConditionEnum.VC_CV) {\r\n                submitOrderReqField.volumeCondition = VolumeConditionEnum.VC_CV\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的成交量类型:${volumeCondition}`)\r\n                toast.error(`本地信息:提交定单错误,未知的成交量类型:${volumeCondition}`);\r\n                return;\r\n            }\r\n\r\n            if (!minVolume || minVolume <= 0) {\r\n                console.error(`本地信息:提交定单错误,错误的最小成交数量:${minVolume}`)\r\n                toast.error(`本地信息:提交定单错误,错误的最小成交数量:${minVolume}`);\r\n                return;\r\n            }\r\n            submitOrderReqField.minVolume = minVolume;\r\n\r\n\r\n            if (hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_Speculation\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_Hedge\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_MarketMaker\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_Arbitrage\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_SpecHedge\r\n            } else if (hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                submitOrderReqField.hedgeFlag = HedgeFlagEnum.HF_HedgeSpec\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的投机套保类型:${hedgeFlag}`)\r\n                toast.error(`本地信息:提交定单错误,未知的投机套保类型:${hedgeFlag}`);\r\n                return;\r\n            }\r\n\r\n\r\n            if (contingentCondition === ContingentConditionEnum.CC_Immediately) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_Immediately\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice\r\n            } else if (contingentCondition === ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice) {\r\n                submitOrderReqField.contingentCondition = ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice\r\n            } else {\r\n                console.error(`本地信息:提交定单错误,未知的触发类型:${contingentCondition}`)\r\n                toast.error(`本地信息:提交定单错误,未知的触发类型:${contingentCondition}`);\r\n                return;\r\n            }\r\n\r\n            if (contingentCondition !== ContingentConditionEnum.CC_Immediately) {\r\n                if (!stopPrice) {\r\n                    console.error(`本地信息:提交定单错误,错误的条件价格:${stopPrice}`)\r\n                    toast.error(`本地信息:提交定单错误,错误的条件价格:${stopPrice}`);\r\n                    return;\r\n                } else {\r\n                    submitOrderReqField.stopPrice = stopPrice\r\n                }\r\n            }\r\n            submitOrderReqField.stopPrice = stopPrice\r\n\r\n            submitOrderReqField.gatewayId = account.gatewayId\r\n            const accountField = AccountField.fromObject(account)\r\n            submitOrderReqField.accountCode = accountField.code\r\n            submitOrderReqField.currency = accountField.currency\r\n\r\n            submitOrderReqField.forceCloseReason = ForceCloseReasonEnum.FCR_NotForceClose\r\n            submitOrderReqField.originOrderId = originOrderId\r\n\r\n            console.error(submitOrderReqField)\r\n            rpcClientApi.asyncSubmitOrder(submitOrderReqField)\r\n        } catch (error) {\r\n            console.error(\"本地信息:提交定单发生未知错误\", error)\r\n            toast.error(\"本地信息:提交定单发生未知错误\");\r\n        }\r\n    }\r\n\r\n    cancelOrder(orderId: string) {\r\n        rpcClientApi.asyncCancelOrder(orderId)\r\n    }\r\n\r\n    reset() {\r\n        this.selectedContract = null;\r\n        this.volume = 0;\r\n        this.orderPriceType = OrderPriceTypeEnum.OPT_LimitPrice;\r\n        this.autoFillOrderPriceType = \"LAST\";\r\n        this.price = \"\";\r\n        this.timeCondition = TimeConditionEnum.TC_GFD;\r\n        this.volumeCondition = VolumeConditionEnum.VC_AV;\r\n        this.minVolume = 1;\r\n        this.hedgeFlag = HedgeFlagEnum.HF_Speculation;\r\n    }\r\n}\r\nexport const tradeActionStore = new TradeActionStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport { isDevEnv } from '../utils';\r\nimport { tradeActionStore } from './tradeActionStore'\r\n// import { rpcClientApi } from '../node/client/service/rpcClientApi';\r\n\r\nclass TradeTickStore {\r\n\r\n    tickList: any[] = [];\r\n    mixTickMap: Map<string, any> = new Map();\r\n\r\n    selectedTick: any;\r\n    hasBeenChanged = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tickList: observable,\r\n            selectedTick: observable,\r\n            storeTick: action,\r\n            clearAndStoreTickList: action,\r\n            storeTickList: action,\r\n            coverMapToList: action,\r\n            setSelectedTick: action\r\n        });\r\n\r\n        setTimeout(this.startIntervalCheckChange, 60)\r\n        setTimeout(this.startIntervalUpdateSelectedTick, 80)\r\n    }\r\n\r\n    startIntervalCheckChange = () => {\r\n        try {\r\n            if (this.hasBeenChanged) {\r\n                this.coverMapToList()\r\n                this.hasBeenChanged = false\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalCheckChange, 200)\r\n    }\r\n\r\n    startIntervalUpdateSelectedTick = () => {\r\n        try {\r\n            if (tradeActionStore.selectedContract) {\r\n                if (this.mixTickMap.has(tradeActionStore.selectedContract.uniformSymbol)) {\r\n                    this.setSelectedTick( this.mixTickMap.get(tradeActionStore.selectedContract.uniformSymbol))\r\n                } else {\r\n                    this.setSelectedTick(null)\r\n                }\r\n            } else {\r\n                this.setSelectedTick(null)\r\n            }\r\n\r\n            tradeActionStore.fillPrice()\r\n\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        setTimeout(this.startIntervalUpdateSelectedTick, 80)\r\n    }\r\n\r\n    setSelectedTick(selectedTick:any){\r\n        this.selectedTick = selectedTick\r\n    }\r\n\r\n    storeTick(tick: any) {\r\n        if (isDevEnv) {\r\n            console.debug(tick)\r\n        }\r\n\r\n        if (tick.uniformSymbol) {\r\n             this.mixTickMap.set(tick.uniformSymbol, tick);\r\n            this.hasBeenChanged = true\r\n        }\r\n    }\r\n\r\n    clearAndStoreTickList(tickList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tickList)\r\n        }\r\n        const newMixTickMap: Map<string, any> = new Map();\r\n        for (let i = 0; i < tickList.length; i++) {\r\n            const tick = tickList[i]\r\n            newMixTickMap.set(tick.uniformSymbol, tick)\r\n        }\r\n        this.mixTickMap = newMixTickMap\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    storeTickList(tickList: any[]) {\r\n        if (isDevEnv) {\r\n            console.debug(tickList)\r\n        }\r\n        for (let i = 0; i < tickList.length; i++) {\r\n            const tick = tickList[i]\r\n    \r\n            if (tick.uniformSymbol) {\r\n                this.mixTickMap.set(tick.uniformSymbol, tick);\r\n                this.hasBeenChanged = true\r\n            }\r\n        }\r\n        this.hasBeenChanged = true\r\n    }\r\n\r\n    coverMapToList() {\r\n        this.tickList = [...this.mixTickMap.values()];\r\n    }\r\n\r\n}\r\nexport const tradeTickStore = new TradeTickStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass CustomizeStore {\r\n    favoriteContractList: any[] = [];\r\n    favoriteContractUniformSymbolSet: Set<string> = new Set();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            favoriteContractList: observable,\r\n            favoriteContractUniformSymbolSet: observable,\r\n            getFavoriteContractList: action,\r\n            addFavoriteContractByUniformSymbol: action,\r\n            deleteFavoriteContractByUniformSymbol: action,\r\n            setFavoriteContractList: action\r\n        });\r\n    }\r\n\r\n    setFavoriteContractList(favoriteContractList:any[]) {\r\n        this.favoriteContractList = favoriteContractList\r\n\r\n        const favoriteContractUniformSymbolSet: Set<string> = new Set()\r\n        for (let i = 0; i < this.favoriteContractList.length; i++) {\r\n            favoriteContractUniformSymbolSet.add(this.favoriteContractList[i].uniformSymbol)\r\n        }\r\n        this.favoriteContractUniformSymbolSet = favoriteContractUniformSymbolSet\r\n    }\r\n\r\n    getFavoriteContractList() {\r\n        request('/api/customize/getFavoriteContractList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const favoriteContractList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setFavoriteContractList(favoriteContractList)\r\n                } else {\r\n                    toast(`查询常用合约列表错误：${res.message}`, { autoClose: false, type: \"error\" })\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    addFavoriteContractByUniformSymbol(uniformSymbol: any) {\r\n        request('/api/customize/addFavoriteContractByUniformSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': uniformSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getFavoriteContractList()\r\n                    toast(\"加入常用已执行\", { autoClose: 5000, type: \"info\" })\r\n                } else {\r\n                    toast(`加入常用错误：${res.message}`, { autoClose: false, type: \"error\" })\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteFavoriteContractByUniformSymbol(uniformSymbol: any) {\r\n        request('/api/customize/deleteFavoriteContractByUniformSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': uniformSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getFavoriteContractList()\r\n                    toast('从常用中移除已执行', { autoClose: 5000, type: \"info\" })\r\n                } else {\r\n                    toast(`从常用中移除错误：${res.message}`, { autoClose: false, type: \"error\" })\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const customizeStore = new CustomizeStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass MarketDataRecordingStore {\r\n    contractList: any[] = [];\r\n    contractUniformSymbolSet: Set<string> = new Set();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            contractList: observable,\r\n            contractUniformSymbolSet: observable,\r\n            getContractList: action,\r\n            addContractByUniformSymbol: action,\r\n            deleteContractByUniformSymbol: action,\r\n            setContractList: action\r\n        });\r\n    }\r\n\r\n    setContractList(contractList:any[]) {\r\n        this.contractList = contractList\r\n        const contractUniformSymbolSet: Set<string> = new Set()\r\n        for (let i = 0; i < this.contractList.length; i++) {\r\n            contractUniformSymbolSet.add(this.contractList[i].uniformSymbol)\r\n        }\r\n        this.contractUniformSymbolSet = contractUniformSymbolSet\r\n    }\r\n\r\n    getContractList() {\r\n        request('/api/management/marketDataRecording/getContractList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const contractList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setContractList(contractList)\r\n                } else {\r\n                    toast.error(`查询行情记录合约列表错误：${res.message}`)\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    addContractByUniformSymbol(uniformSymbol: any) {\r\n        request('/api/management/marketDataRecording/addContractByUniformSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': uniformSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getContractList()\r\n                    toast.info(\"加入行情记录已执行\")\r\n                } else {\r\n                    toast.error(`加入行情记录错误：${res.message}`)\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteContractByUniformSymbol(uniformSymbol: any) {\r\n        request('/api/management/marketDataRecording/deleteContractByUniformSymbol', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': uniformSymbol\r\n            },\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getContractList()\r\n                    toast.info(\"从行情记录中移除已执行\")\r\n                } else {\r\n                    toast.error(`从行情记录中移除错误：${res.message}`)\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const marketDataRecordingStore = new MarketDataRecordingStore()","import { observable, action, makeObservable } from 'mobx';\r\nimport request from '../request'\r\nimport { toast } from 'react-toastify';\r\n\r\nclass OperatorStore {\r\n    operatorList: any[] = [];\r\n    operatorMap: Map<string, any> = new Map();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            operatorList: observable,\r\n            operatorMap: observable,\r\n            getOperatorList: action,\r\n            saveOrUpdateOperator: action,\r\n            deleteOperatorByOperatorId: action,\r\n            createOperator: action,\r\n            setOperatorList: action\r\n        });\r\n    }\r\n\r\n    \r\n    setOperatorList(operatorList:any[]) {\r\n        const operatorMap: Map<string, any> = new Map()\r\n        operatorList.forEach((element: any) => {\r\n            operatorMap.set(element.operatorId, element)\r\n        });\r\n\r\n        this.operatorMap = operatorMap\r\n        this.operatorList = [...this.operatorMap.values()]\r\n    }\r\n\r\n    getOperatorList() {\r\n        request('/api/management/operator/getOperatorList').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    const operatorList = Array.isArray(res.voData) ? res.voData : [];\r\n                    this.setOperatorList(operatorList)\r\n                } else {\r\n                    toast.error(`查询操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveOrUpdateOperator(operator: any) {\r\n        request('/api/management/operator/saveOrUpdateOperator', {\r\n            method: 'POST',\r\n            data: {\r\n                ...operator\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getOperatorList()\r\n                } else {\r\n                    toast.error(`增加或修改操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteOperatorByOperatorId(operatorId: string) {\r\n        request('/api/management/operator/deleteOperatorByOperatorId', {\r\n            method: 'POST',\r\n            data: {\r\n                'voData': operatorId\r\n            }\r\n\r\n        }).then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getOperatorList()\r\n                } else {\r\n                    toast.error(`删除操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    createOperator() {\r\n        request('/api/management/operator/createOperator').then(res => {\r\n            if (res) {\r\n                if (res.status) {\r\n                    this.getOperatorList()\r\n                } else {\r\n                    toast.error(`新增操作员错误：${res.message}`);\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\nexport const operatorStore = new OperatorStore()","import { createBrowserHistory } from 'history';\r\nimport { nodeStore } from './nodeStore'\r\nimport { gatewayStore } from './gatewayStore'\r\nimport { userStore } from './userStore'\r\nimport { authenticationStore } from './authenticationStore'\r\nimport { tradeOrderStore } from './tradeOrderStore';\r\nimport { tradeAccountStore } from './tradeAccountStore';\r\nimport { tradePositionStore } from './tradePositionStore';\r\nimport { tradeContractStore } from './tradeContractStore';\r\nimport { tradeTradeStore } from './tradeTradeStore';\r\nimport { tradeTickStore } from './tradeTickStore';\r\nimport { tradeActionStore } from './tradeActionStore';\r\nimport { customizeStore } from './customizeStore';\r\nimport { marketDataRecordingStore } from './marketDataRecordingStore';\r\nimport { operatorStore } from './operatorStore';\r\nimport { observable, action, makeObservable, observe } from 'mobx';\r\n\r\nexport class RouterStore {\r\n  location = null;\r\n  history: any = null;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      location: observable,\r\n      _updateLocation: action\r\n    });\r\n\r\n    this.push = this.push.bind(this);\r\n    this.replace = this.replace.bind(this);\r\n    this.go = this.go.bind(this);\r\n    this.goBack = this.goBack.bind(this);\r\n    this.goForward = this.goForward.bind(this);\r\n  }\r\n\r\n  _updateLocation(newState: any) {\r\n    this.location = newState;\r\n  }\r\n\r\n  /*\r\n   * History methods\r\n   */\r\n  push = (location: any, state: any) => {\r\n    this.history.push(location, state);\r\n  }\r\n  replace = (location: any, state: any) => {\r\n    this.history.replace(location, state);\r\n  }\r\n  go = (n: any) => {\r\n    this.history.go(n);\r\n  }\r\n  goBack = () => {\r\n    this.history.goBack();\r\n  }\r\n  goForward = () => {\r\n    this.history.goForward();\r\n  }\r\n};\r\n\r\n\r\nexport const syncHistoryWithStore = (history: any, store: any) => {\r\n  // Initialise store\r\n  store.history = history;\r\n\r\n  // Handle update from history object\r\n  const handleLocationChange = (location: any) => {\r\n    store._updateLocation(location);\r\n  };\r\n\r\n  const unsubscribeFromHistory = history.listen(handleLocationChange);\r\n  handleLocationChange(history.location);\r\n\r\n  const subscribe = (listener: any) => {\r\n    const onStoreChange = () => {\r\n      const rawLocation = { ...store.location };\r\n      listener(rawLocation, history.action);\r\n    };\r\n\r\n    // Listen for changes to location state in store\r\n    const unsubscribeFromStore = observe(store, 'location', onStoreChange);\r\n\r\n    listener(store.location, history.action);\r\n\r\n    return unsubscribeFromStore;\r\n  };\r\n\r\n  history.subscribe = subscribe;\r\n  history.unsubscribe = unsubscribeFromHistory;\r\n\r\n  return history;\r\n};\r\n\r\n\r\nexport const browserHistory = createBrowserHistory();\r\nexport const routingStore = new RouterStore();\r\n\r\nexport const history = syncHistoryWithStore(browserHistory, routingStore);\r\n\r\nexport {\r\n  authenticationStore,\r\n  nodeStore,\r\n  gatewayStore,\r\n  userStore,\r\n  tradeOrderStore,\r\n  tradeAccountStore,\r\n  tradePositionStore,\r\n  tradeContractStore,\r\n  tradeTradeStore,\r\n  tradeTickStore,\r\n  tradeActionStore,\r\n  customizeStore,\r\n  marketDataRecordingStore,\r\n  operatorStore\r\n}","/**\r\n * request 网络请求工具,从Ant Design Pro中移植\r\n */\r\nimport { extend } from 'umi-request';\r\nimport { history, authenticationStore } from './stores/storesIndex'\r\nimport { toast } from 'react-toastify';\r\n\r\nconst codeMessage = {\r\n  200: '服务器成功返回请求的数据。',\r\n  201: '新增或修改数据成功。',\r\n  202: '一个请求已经进入后台排队（异步任务）。',\r\n  204: '删除数据成功。',\r\n  400: '发出的请求有错误，服务器没有进行新增或修改数据的操作。',\r\n  401: '用户没有权限（令牌、用户名、密码错误）。',\r\n  403: '用户得到授权，但是访问是被禁止的。',\r\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\r\n  406: '请求的格式不可得。',\r\n  410: '请求的资源被永久删除，且不会再得到的。',\r\n  422: '当创建一个对象时，发生一个验证错误。',\r\n  500: '服务器发生错误，请检查服务器。',\r\n  502: '网关错误。',\r\n  503: '服务不可用，服务器暂时过载或维护。',\r\n  504: '网关超时。',\r\n};\r\n\r\n/**\r\n * 异常处理程序\r\n */\r\nconst errorHandler = (error: any) => {\r\n  const { response = {} } = error;\r\n  const errortext = codeMessage[response.status] || response.statusText;\r\n  const { status, url } = response;\r\n\r\n  if (status === 401) {\r\n    toast.warn(\"未登录或登录已过期，请重新登录。\");\r\n    authenticationStore.logout();\r\n    authenticationStore.initStore();\r\n    history.push('/login');\r\n    return;\r\n  }\r\n\r\n  toast.error(`请求错误 ${status}: ${url} → ${errortext}`);\r\n};\r\n\r\n\r\n/**\r\n * 配置request请求时的默认参数\r\n */\r\nconst request = extend({\r\n  errorHandler, // 默认错误处理\r\n  credentials: 'include', // 默认请求是否带上cookie\r\n});\r\n\r\n// request拦截器, 改变url 或 options.\r\nrequest.interceptors.request.use((url, options) => {\r\n\r\n  const authToken = authenticationStore.getAuthToken()\r\n\r\n  if (authToken) {\r\n    const headers = {\r\n      'Auth-Token': authToken\r\n    };\r\n    return (\r\n      {\r\n        url,\r\n        options: { ...options, headers },\r\n      }\r\n    );\r\n  } else {\r\n    return (\r\n      {\r\n        url,\r\n        options: { ...options },\r\n      }\r\n    );\r\n  }\r\n\r\n})\r\n\r\n// // response拦截器, 处理response\r\n// request.interceptors.response.use((response, options) => {\r\n//   let token = response.headers.get(\"x-auth-token\");\r\n//   if (token) {\r\n//     localStorage.setItem(\"x-auth-token\", token);\r\n//   }\r\n//   return response;\r\n// });\r\n\r\nexport default request;\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.xyz = (function() {\n\n    /**\n     * Namespace xyz.\n     * @exports xyz\n     * @namespace\n     */\n    var xyz = {};\n\n    xyz.redtorch = (function() {\n\n        /**\n         * Namespace redtorch.\n         * @memberof xyz\n         * @namespace\n         */\n        var redtorch = {};\n\n        redtorch.pb = (function() {\n\n            /**\n             * Namespace pb.\n             * @memberof xyz.redtorch\n             * @namespace\n             */\n            var pb = {};\n\n            /**\n             * StrategyEngineTypeEnum enum.\n             * @name xyz.redtorch.pb.StrategyEngineTypeEnum\n             * @enum {string}\n             * @property {number} SET_Treading=0 SET_Treading value\n             * @property {number} SET_Backtesting=1 SET_Backtesting value\n             */\n            pb.StrategyEngineTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"SET_Treading\"] = 0;\n                values[valuesById[1] = \"SET_Backtesting\"] = 1;\n                return values;\n            })();\n\n            /**\n             * GatewayTypeEnum enum.\n             * @name xyz.redtorch.pb.GatewayTypeEnum\n             * @enum {string}\n             * @property {number} GTE_TradeAndMarketData=0 GTE_TradeAndMarketData value\n             * @property {number} GTE_MarketData=1 GTE_MarketData value\n             * @property {number} GTE_Trade=2 GTE_Trade value\n             */\n            pb.GatewayTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"GTE_TradeAndMarketData\"] = 0;\n                values[valuesById[1] = \"GTE_MarketData\"] = 1;\n                values[valuesById[2] = \"GTE_Trade\"] = 2;\n                return values;\n            })();\n\n            /**\n             * GatewayAdapterTypeEnum enum.\n             * @name xyz.redtorch.pb.GatewayAdapterTypeEnum\n             * @enum {string}\n             * @property {number} GAT_CTP=0 GAT_CTP value\n             * @property {number} GAT_IB=1 GAT_IB value\n             * @property {number} GAT_COMMON=2 GAT_COMMON value\n             */\n            pb.GatewayAdapterTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"GAT_CTP\"] = 0;\n                values[valuesById[1] = \"GAT_IB\"] = 1;\n                values[valuesById[2] = \"GAT_COMMON\"] = 2;\n                return values;\n            })();\n\n            /**\n             * CommonStatusEnum enum.\n             * @name xyz.redtorch.pb.CommonStatusEnum\n             * @enum {string}\n             * @property {number} COMS_SUCCESS=0 COMS_SUCCESS value\n             * @property {number} COMS_INFO=1 COMS_INFO value\n             * @property {number} COMS_WARN=2 COMS_WARN value\n             * @property {number} COMS_ERROR=3 COMS_ERROR value\n             */\n            pb.CommonStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"COMS_SUCCESS\"] = 0;\n                values[valuesById[1] = \"COMS_INFO\"] = 1;\n                values[valuesById[2] = \"COMS_WARN\"] = 2;\n                values[valuesById[3] = \"COMS_ERROR\"] = 3;\n                return values;\n            })();\n\n            /**\n             * LogLevelEnum enum.\n             * @name xyz.redtorch.pb.LogLevelEnum\n             * @enum {string}\n             * @property {number} LL_All=0 LL_All value\n             * @property {number} LL_Error=40000 LL_Error value\n             * @property {number} LL_Warn=30000 LL_Warn value\n             * @property {number} LL_Info=20000 LL_Info value\n             * @property {number} LL_Debug=10000 LL_Debug value\n             * @property {number} LL_Trace=5000 LL_Trace value\n             */\n            pb.LogLevelEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"LL_All\"] = 0;\n                values[valuesById[40000] = \"LL_Error\"] = 40000;\n                values[valuesById[30000] = \"LL_Warn\"] = 30000;\n                values[valuesById[20000] = \"LL_Info\"] = 20000;\n                values[valuesById[10000] = \"LL_Debug\"] = 10000;\n                values[valuesById[5000] = \"LL_Trace\"] = 5000;\n                return values;\n            })();\n\n            /**\n             * MarketDataDBTypeEnum enum.\n             * @name xyz.redtorch.pb.MarketDataDBTypeEnum\n             * @enum {string}\n             * @property {number} MDDT_MIX=0 MDDT_MIX value\n             * @property {number} MDDT_TD=1 MDDT_TD value\n             * @property {number} MDDT_HIST=2 MDDT_HIST value\n             */\n            pb.MarketDataDBTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"MDDT_MIX\"] = 0;\n                values[valuesById[1] = \"MDDT_TD\"] = 1;\n                values[valuesById[2] = \"MDDT_HIST\"] = 2;\n                return values;\n            })();\n\n            /**\n             * BarPeriodEnum enum.\n             * @name xyz.redtorch.pb.BarPeriodEnum\n             * @enum {string}\n             * @property {number} B_UNKNOWN=0 B_UNKNOWN value\n             * @property {number} B_5Sec=5 B_5Sec value\n             * @property {number} B_1Min=60 B_1Min value\n             * @property {number} B_3Min=180 B_3Min value\n             * @property {number} B_5Min=300 B_5Min value\n             * @property {number} B_15Min=900 B_15Min value\n             * @property {number} B_1Day=86400 B_1Day value\n             */\n            pb.BarPeriodEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"B_UNKNOWN\"] = 0;\n                values[valuesById[5] = \"B_5Sec\"] = 5;\n                values[valuesById[60] = \"B_1Min\"] = 60;\n                values[valuesById[180] = \"B_3Min\"] = 180;\n                values[valuesById[300] = \"B_5Min\"] = 300;\n                values[valuesById[900] = \"B_15Min\"] = 900;\n                values[valuesById[86400] = \"B_1Day\"] = 86400;\n                return values;\n            })();\n\n            /**\n             * ConnectStatusEnum enum.\n             * @name xyz.redtorch.pb.ConnectStatusEnum\n             * @enum {string}\n             * @property {number} CS_Unknown=0 CS_Unknown value\n             * @property {number} CS_Disconnected=1 CS_Disconnected value\n             * @property {number} CS_Connected=2 CS_Connected value\n             * @property {number} CS_Disconnecting=3 CS_Disconnecting value\n             * @property {number} CS_Connecting=4 CS_Connecting value\n             */\n            pb.ConnectStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"CS_Unknown\"] = 0;\n                values[valuesById[1] = \"CS_Disconnected\"] = 1;\n                values[valuesById[2] = \"CS_Connected\"] = 2;\n                values[valuesById[3] = \"CS_Disconnecting\"] = 3;\n                values[valuesById[4] = \"CS_Connecting\"] = 4;\n                return values;\n            })();\n\n            /**\n             * OrderActionStatusTyp enum.\n             * @name xyz.redtorch.pb.OrderActionStatusTyp\n             * @enum {string}\n             * @property {number} OAS_Unknown=0 OAS_Unknown value\n             * @property {number} OAS_Submitted=1 OAS_Submitted value\n             * @property {number} OAS_Accepted=2 OAS_Accepted value\n             * @property {number} OAS_Rejected=3 OAS_Rejected value\n             */\n            pb.OrderActionStatusTyp = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OAS_Unknown\"] = 0;\n                values[valuesById[1] = \"OAS_Submitted\"] = 1;\n                values[valuesById[2] = \"OAS_Accepted\"] = 2;\n                values[valuesById[3] = \"OAS_Rejected\"] = 3;\n                return values;\n            })();\n\n            /**\n             * OrderStatusEnum enum.\n             * @name xyz.redtorch.pb.OrderStatusEnum\n             * @enum {string}\n             * @property {number} OS_Unknown=0 OS_Unknown value\n             * @property {number} OS_AllTraded=1 OS_AllTraded value\n             * @property {number} OS_PartTradedQueueing=2 OS_PartTradedQueueing value\n             * @property {number} OS_PartTradedNotQueueing=3 OS_PartTradedNotQueueing value\n             * @property {number} OS_NoTradeQueueing=4 OS_NoTradeQueueing value\n             * @property {number} OS_NoTradeNotQueueing=5 OS_NoTradeNotQueueing value\n             * @property {number} OS_Canceled=6 OS_Canceled value\n             * @property {number} OS_NotTouched=7 OS_NotTouched value\n             * @property {number} OS_Touched=8 OS_Touched value\n             * @property {number} OS_Rejected=9 OS_Rejected value\n             */\n            pb.OrderStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OS_Unknown\"] = 0;\n                values[valuesById[1] = \"OS_AllTraded\"] = 1;\n                values[valuesById[2] = \"OS_PartTradedQueueing\"] = 2;\n                values[valuesById[3] = \"OS_PartTradedNotQueueing\"] = 3;\n                values[valuesById[4] = \"OS_NoTradeQueueing\"] = 4;\n                values[valuesById[5] = \"OS_NoTradeNotQueueing\"] = 5;\n                values[valuesById[6] = \"OS_Canceled\"] = 6;\n                values[valuesById[7] = \"OS_NotTouched\"] = 7;\n                values[valuesById[8] = \"OS_Touched\"] = 8;\n                values[valuesById[9] = \"OS_Rejected\"] = 9;\n                return values;\n            })();\n\n            /**\n             * OrderSubmitStatusEnum enum.\n             * @name xyz.redtorch.pb.OrderSubmitStatusEnum\n             * @enum {string}\n             * @property {number} OSS_Unknown=0 OSS_Unknown value\n             * @property {number} OSS_InsertSubmitted=1 OSS_InsertSubmitted value\n             * @property {number} OSS_CancelSubmitted=2 OSS_CancelSubmitted value\n             * @property {number} OSS_ModifySubmitted=3 OSS_ModifySubmitted value\n             * @property {number} OSS_Accepted=4 OSS_Accepted value\n             * @property {number} OSS_InsertRejected=5 OSS_InsertRejected value\n             * @property {number} OSS_CancelRejected=6 OSS_CancelRejected value\n             * @property {number} OSS_ModifyRejected=7 OSS_ModifyRejected value\n             */\n            pb.OrderSubmitStatusEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OSS_Unknown\"] = 0;\n                values[valuesById[1] = \"OSS_InsertSubmitted\"] = 1;\n                values[valuesById[2] = \"OSS_CancelSubmitted\"] = 2;\n                values[valuesById[3] = \"OSS_ModifySubmitted\"] = 3;\n                values[valuesById[4] = \"OSS_Accepted\"] = 4;\n                values[valuesById[5] = \"OSS_InsertRejected\"] = 5;\n                values[valuesById[6] = \"OSS_CancelRejected\"] = 6;\n                values[valuesById[7] = \"OSS_ModifyRejected\"] = 7;\n                return values;\n            })();\n\n            /**\n             * ProductClassEnum enum.\n             * @name xyz.redtorch.pb.ProductClassEnum\n             * @enum {string}\n             * @property {number} UnknownProductClass=0 UnknownProductClass value\n             * @property {number} EQUITY=1 EQUITY value\n             * @property {number} FUTURES=2 FUTURES value\n             * @property {number} OPTION=3 OPTION value\n             * @property {number} INDEX=4 INDEX value\n             * @property {number} COMBINATION=5 COMBINATION value\n             * @property {number} BOND=6 BOND value\n             * @property {number} FOREX=7 FOREX value\n             * @property {number} SPOT=8 SPOT value\n             * @property {number} DEFER=9 DEFER value\n             * @property {number} ETF=10 ETF value\n             * @property {number} WARRANTS=11 WARRANTS value\n             * @property {number} SPREAD=12 SPREAD value\n             * @property {number} FUND=13 FUND value\n             * @property {number} EFP=14 EFP value\n             * @property {number} SPOTOPTION=15 SPOTOPTION value\n             * @property {number} TAS=16 TAS value\n             * @property {number} MI=17 MI value\n             */\n            pb.ProductClassEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UnknownProductClass\"] = 0;\n                values[valuesById[1] = \"EQUITY\"] = 1;\n                values[valuesById[2] = \"FUTURES\"] = 2;\n                values[valuesById[3] = \"OPTION\"] = 3;\n                values[valuesById[4] = \"INDEX\"] = 4;\n                values[valuesById[5] = \"COMBINATION\"] = 5;\n                values[valuesById[6] = \"BOND\"] = 6;\n                values[valuesById[7] = \"FOREX\"] = 7;\n                values[valuesById[8] = \"SPOT\"] = 8;\n                values[valuesById[9] = \"DEFER\"] = 9;\n                values[valuesById[10] = \"ETF\"] = 10;\n                values[valuesById[11] = \"WARRANTS\"] = 11;\n                values[valuesById[12] = \"SPREAD\"] = 12;\n                values[valuesById[13] = \"FUND\"] = 13;\n                values[valuesById[14] = \"EFP\"] = 14;\n                values[valuesById[15] = \"SPOTOPTION\"] = 15;\n                values[valuesById[16] = \"TAS\"] = 16;\n                values[valuesById[17] = \"MI\"] = 17;\n                return values;\n            })();\n\n            /**\n             * DirectionEnum enum.\n             * @name xyz.redtorch.pb.DirectionEnum\n             * @enum {string}\n             * @property {number} D_Unknown=0 D_Unknown value\n             * @property {number} D_Buy=1 D_Buy value\n             * @property {number} D_Sell=2 D_Sell value\n             */\n            pb.DirectionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"D_Unknown\"] = 0;\n                values[valuesById[1] = \"D_Buy\"] = 1;\n                values[valuesById[2] = \"D_Sell\"] = 2;\n                return values;\n            })();\n\n            /**\n             * PositionTypeEnum enum.\n             * @name xyz.redtorch.pb.PositionTypeEnum\n             * @enum {string}\n             * @property {number} PT_Unknown=0 PT_Unknown value\n             * @property {number} PT_Net=1 PT_Net value\n             * @property {number} PT_Gross=2 PT_Gross value\n             */\n            pb.PositionTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"PT_Unknown\"] = 0;\n                values[valuesById[1] = \"PT_Net\"] = 1;\n                values[valuesById[2] = \"PT_Gross\"] = 2;\n                return values;\n            })();\n\n            /**\n             * PositionDirectionEnum enum.\n             * @name xyz.redtorch.pb.PositionDirectionEnum\n             * @enum {string}\n             * @property {number} PD_Unknown=0 PD_Unknown value\n             * @property {number} PD_Net=1 PD_Net value\n             * @property {number} PD_Long=2 PD_Long value\n             * @property {number} PD_Short=3 PD_Short value\n             */\n            pb.PositionDirectionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"PD_Unknown\"] = 0;\n                values[valuesById[1] = \"PD_Net\"] = 1;\n                values[valuesById[2] = \"PD_Long\"] = 2;\n                values[valuesById[3] = \"PD_Short\"] = 3;\n                return values;\n            })();\n\n            /**\n             * HedgeFlagEnum enum.\n             * @name xyz.redtorch.pb.HedgeFlagEnum\n             * @enum {string}\n             * @property {number} HF_Unknown=0 HF_Unknown value\n             * @property {number} HF_Speculation=1 HF_Speculation value\n             * @property {number} HF_Arbitrage=2 HF_Arbitrage value\n             * @property {number} HF_Hedge=3 HF_Hedge value\n             * @property {number} HF_MarketMaker=4 HF_MarketMaker value\n             * @property {number} HF_SpecHedge=5 HF_SpecHedge value\n             * @property {number} HF_HedgeSpec=6 HF_HedgeSpec value\n             */\n            pb.HedgeFlagEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"HF_Unknown\"] = 0;\n                values[valuesById[1] = \"HF_Speculation\"] = 1;\n                values[valuesById[2] = \"HF_Arbitrage\"] = 2;\n                values[valuesById[3] = \"HF_Hedge\"] = 3;\n                values[valuesById[4] = \"HF_MarketMaker\"] = 4;\n                values[valuesById[5] = \"HF_SpecHedge\"] = 5;\n                values[valuesById[6] = \"HF_HedgeSpec\"] = 6;\n                return values;\n            })();\n\n            /**\n             * OrderPriceTypeEnum enum.\n             * @name xyz.redtorch.pb.OrderPriceTypeEnum\n             * @enum {string}\n             * @property {number} OPT_Unknown=0 OPT_Unknown value\n             * @property {number} OPT_AnyPrice=1 OPT_AnyPrice value\n             * @property {number} OPT_LimitPrice=2 OPT_LimitPrice value\n             * @property {number} OPT_BestPrice=3 OPT_BestPrice value\n             * @property {number} OPT_LastPrice=4 OPT_LastPrice value\n             * @property {number} OPT_LastPricePlusOneTicks=5 OPT_LastPricePlusOneTicks value\n             * @property {number} OPT_LastPricePlusTwoTicks=6 OPT_LastPricePlusTwoTicks value\n             * @property {number} OPT_LastPricePlusThreeTicks=7 OPT_LastPricePlusThreeTicks value\n             * @property {number} OPT_AskPrice1=8 OPT_AskPrice1 value\n             * @property {number} OPT_AskPrice1PlusOneTicks=9 OPT_AskPrice1PlusOneTicks value\n             * @property {number} OPT_AskPrice1PlusTwoTicks=10 OPT_AskPrice1PlusTwoTicks value\n             * @property {number} OPT_AskPrice1PlusThreeTicks=11 OPT_AskPrice1PlusThreeTicks value\n             * @property {number} OPT_BidPrice1=12 OPT_BidPrice1 value\n             * @property {number} OPT_BidPrice1PlusOneTicks=13 OPT_BidPrice1PlusOneTicks value\n             * @property {number} OPT_BidPrice1PlusTwoTicks=14 OPT_BidPrice1PlusTwoTicks value\n             * @property {number} OPT_BidPrice1PlusThreeTicks=15 OPT_BidPrice1PlusThreeTicks value\n             * @property {number} OPT_FiveLevelPrice=16 OPT_FiveLevelPrice value\n             */\n            pb.OrderPriceTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OPT_Unknown\"] = 0;\n                values[valuesById[1] = \"OPT_AnyPrice\"] = 1;\n                values[valuesById[2] = \"OPT_LimitPrice\"] = 2;\n                values[valuesById[3] = \"OPT_BestPrice\"] = 3;\n                values[valuesById[4] = \"OPT_LastPrice\"] = 4;\n                values[valuesById[5] = \"OPT_LastPricePlusOneTicks\"] = 5;\n                values[valuesById[6] = \"OPT_LastPricePlusTwoTicks\"] = 6;\n                values[valuesById[7] = \"OPT_LastPricePlusThreeTicks\"] = 7;\n                values[valuesById[8] = \"OPT_AskPrice1\"] = 8;\n                values[valuesById[9] = \"OPT_AskPrice1PlusOneTicks\"] = 9;\n                values[valuesById[10] = \"OPT_AskPrice1PlusTwoTicks\"] = 10;\n                values[valuesById[11] = \"OPT_AskPrice1PlusThreeTicks\"] = 11;\n                values[valuesById[12] = \"OPT_BidPrice1\"] = 12;\n                values[valuesById[13] = \"OPT_BidPrice1PlusOneTicks\"] = 13;\n                values[valuesById[14] = \"OPT_BidPrice1PlusTwoTicks\"] = 14;\n                values[valuesById[15] = \"OPT_BidPrice1PlusThreeTicks\"] = 15;\n                values[valuesById[16] = \"OPT_FiveLevelPrice\"] = 16;\n                return values;\n            })();\n\n            /**\n             * OffsetFlagEnum enum.\n             * @name xyz.redtorch.pb.OffsetFlagEnum\n             * @enum {string}\n             * @property {number} OF_Unknown=0 OF_Unknown value\n             * @property {number} OF_Open=1 OF_Open value\n             * @property {number} OF_Close=2 OF_Close value\n             * @property {number} OF_ForceClose=3 OF_ForceClose value\n             * @property {number} OF_CloseToday=4 OF_CloseToday value\n             * @property {number} OF_CloseYesterday=5 OF_CloseYesterday value\n             * @property {number} OF_ForceOff=6 OF_ForceOff value\n             * @property {number} OF_LocalForceClose=7 OF_LocalForceClose value\n             */\n            pb.OffsetFlagEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OF_Unknown\"] = 0;\n                values[valuesById[1] = \"OF_Open\"] = 1;\n                values[valuesById[2] = \"OF_Close\"] = 2;\n                values[valuesById[3] = \"OF_ForceClose\"] = 3;\n                values[valuesById[4] = \"OF_CloseToday\"] = 4;\n                values[valuesById[5] = \"OF_CloseYesterday\"] = 5;\n                values[valuesById[6] = \"OF_ForceOff\"] = 6;\n                values[valuesById[7] = \"OF_LocalForceClose\"] = 7;\n                return values;\n            })();\n\n            /**\n             * ForceCloseReasonEnum enum.\n             * @name xyz.redtorch.pb.ForceCloseReasonEnum\n             * @enum {string}\n             * @property {number} FCR_Unknown=0 FCR_Unknown value\n             * @property {number} FCR_NotForceClose=1 FCR_NotForceClose value\n             * @property {number} FCR_LackDeposit=2 FCR_LackDeposit value\n             * @property {number} FCR_ClientOverPositionLimit=3 FCR_ClientOverPositionLimit value\n             * @property {number} FCR_MemberOverPositionLimit=4 FCR_MemberOverPositionLimit value\n             * @property {number} FCR_NotMultiple=5 FCR_NotMultiple value\n             * @property {number} FCR_Violation=6 FCR_Violation value\n             * @property {number} FCR_Other=7 FCR_Other value\n             * @property {number} FCR_PersonDeliver=8 FCR_PersonDeliver value\n             */\n            pb.ForceCloseReasonEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"FCR_Unknown\"] = 0;\n                values[valuesById[1] = \"FCR_NotForceClose\"] = 1;\n                values[valuesById[2] = \"FCR_LackDeposit\"] = 2;\n                values[valuesById[3] = \"FCR_ClientOverPositionLimit\"] = 3;\n                values[valuesById[4] = \"FCR_MemberOverPositionLimit\"] = 4;\n                values[valuesById[5] = \"FCR_NotMultiple\"] = 5;\n                values[valuesById[6] = \"FCR_Violation\"] = 6;\n                values[valuesById[7] = \"FCR_Other\"] = 7;\n                values[valuesById[8] = \"FCR_PersonDeliver\"] = 8;\n                return values;\n            })();\n\n            /**\n             * OrderTypeEnum enum.\n             * @name xyz.redtorch.pb.OrderTypeEnum\n             * @enum {string}\n             * @property {number} OT_Unknown=0 OT_Unknown value\n             * @property {number} OT_Normal=1 OT_Normal value\n             * @property {number} OT_DeriveFromQuote=2 OT_DeriveFromQuote value\n             * @property {number} OT_DeriveFromCombination=3 OT_DeriveFromCombination value\n             * @property {number} OT_Combination=4 OT_Combination value\n             * @property {number} OT_ConditionalOrder=5 OT_ConditionalOrder value\n             * @property {number} OT_Swap=6 OT_Swap value\n             */\n            pb.OrderTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"OT_Unknown\"] = 0;\n                values[valuesById[1] = \"OT_Normal\"] = 1;\n                values[valuesById[2] = \"OT_DeriveFromQuote\"] = 2;\n                values[valuesById[3] = \"OT_DeriveFromCombination\"] = 3;\n                values[valuesById[4] = \"OT_Combination\"] = 4;\n                values[valuesById[5] = \"OT_ConditionalOrder\"] = 5;\n                values[valuesById[6] = \"OT_Swap\"] = 6;\n                return values;\n            })();\n\n            /**\n             * TimeConditionEnum enum.\n             * @name xyz.redtorch.pb.TimeConditionEnum\n             * @enum {string}\n             * @property {number} TC_Unknown=0 TC_Unknown value\n             * @property {number} TC_IOC=1 TC_IOC value\n             * @property {number} TC_GFS=2 TC_GFS value\n             * @property {number} TC_GFD=3 TC_GFD value\n             * @property {number} TC_GTD=4 TC_GTD value\n             * @property {number} TC_GTC=5 TC_GTC value\n             * @property {number} TC_GFA=6 TC_GFA value\n             */\n            pb.TimeConditionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"TC_Unknown\"] = 0;\n                values[valuesById[1] = \"TC_IOC\"] = 1;\n                values[valuesById[2] = \"TC_GFS\"] = 2;\n                values[valuesById[3] = \"TC_GFD\"] = 3;\n                values[valuesById[4] = \"TC_GTD\"] = 4;\n                values[valuesById[5] = \"TC_GTC\"] = 5;\n                values[valuesById[6] = \"TC_GFA\"] = 6;\n                return values;\n            })();\n\n            /**\n             * VolumeConditionEnum enum.\n             * @name xyz.redtorch.pb.VolumeConditionEnum\n             * @enum {string}\n             * @property {number} VC_Unknown=0 VC_Unknown value\n             * @property {number} VC_AV=1 VC_AV value\n             * @property {number} VC_MV=2 VC_MV value\n             * @property {number} VC_CV=3 VC_CV value\n             */\n            pb.VolumeConditionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"VC_Unknown\"] = 0;\n                values[valuesById[1] = \"VC_AV\"] = 1;\n                values[valuesById[2] = \"VC_MV\"] = 2;\n                values[valuesById[3] = \"VC_CV\"] = 3;\n                return values;\n            })();\n\n            /**\n             * ContingentConditionEnum enum.\n             * @name xyz.redtorch.pb.ContingentConditionEnum\n             * @enum {string}\n             * @property {number} CC_Unknown=0 CC_Unknown value\n             * @property {number} CC_Immediately=1 CC_Immediately value\n             * @property {number} CC_Touch=2 CC_Touch value\n             * @property {number} CC_TouchProfit=3 CC_TouchProfit value\n             * @property {number} CC_ParkedOrder=4 CC_ParkedOrder value\n             * @property {number} CC_LastPriceGreaterThanStopPrice=5 CC_LastPriceGreaterThanStopPrice value\n             * @property {number} CC_LastPriceGreaterEqualStopPrice=6 CC_LastPriceGreaterEqualStopPrice value\n             * @property {number} CC_LastPriceLesserThanStopPrice=7 CC_LastPriceLesserThanStopPrice value\n             * @property {number} CC_LastPriceLesserEqualStopPrice=8 CC_LastPriceLesserEqualStopPrice value\n             * @property {number} CC_AskPriceGreaterThanStopPrice=9 CC_AskPriceGreaterThanStopPrice value\n             * @property {number} CC_AskPriceGreaterEqualStopPrice=10 CC_AskPriceGreaterEqualStopPrice value\n             * @property {number} CC_AskPriceLesserThanStopPrice=11 CC_AskPriceLesserThanStopPrice value\n             * @property {number} CC_AskPriceLesserEqualStopPrice=12 CC_AskPriceLesserEqualStopPrice value\n             * @property {number} CC_BidPriceGreaterThanStopPrice=13 CC_BidPriceGreaterThanStopPrice value\n             * @property {number} CC_BidPriceGreaterEqualStopPrice=14 CC_BidPriceGreaterEqualStopPrice value\n             * @property {number} CC_BidPriceLesserThanStopPrice=15 CC_BidPriceLesserThanStopPrice value\n             * @property {number} CC_BidPriceLesserEqualStopPrice=16 CC_BidPriceLesserEqualStopPrice value\n             * @property {number} CC_LocalLastPriceLesserEqualStopPrice=17 CC_LocalLastPriceLesserEqualStopPrice value\n             * @property {number} CC_LocalLastPriceGreaterEqualStopPrice=18 CC_LocalLastPriceGreaterEqualStopPrice value\n             */\n            pb.ContingentConditionEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"CC_Unknown\"] = 0;\n                values[valuesById[1] = \"CC_Immediately\"] = 1;\n                values[valuesById[2] = \"CC_Touch\"] = 2;\n                values[valuesById[3] = \"CC_TouchProfit\"] = 3;\n                values[valuesById[4] = \"CC_ParkedOrder\"] = 4;\n                values[valuesById[5] = \"CC_LastPriceGreaterThanStopPrice\"] = 5;\n                values[valuesById[6] = \"CC_LastPriceGreaterEqualStopPrice\"] = 6;\n                values[valuesById[7] = \"CC_LastPriceLesserThanStopPrice\"] = 7;\n                values[valuesById[8] = \"CC_LastPriceLesserEqualStopPrice\"] = 8;\n                values[valuesById[9] = \"CC_AskPriceGreaterThanStopPrice\"] = 9;\n                values[valuesById[10] = \"CC_AskPriceGreaterEqualStopPrice\"] = 10;\n                values[valuesById[11] = \"CC_AskPriceLesserThanStopPrice\"] = 11;\n                values[valuesById[12] = \"CC_AskPriceLesserEqualStopPrice\"] = 12;\n                values[valuesById[13] = \"CC_BidPriceGreaterThanStopPrice\"] = 13;\n                values[valuesById[14] = \"CC_BidPriceGreaterEqualStopPrice\"] = 14;\n                values[valuesById[15] = \"CC_BidPriceLesserThanStopPrice\"] = 15;\n                values[valuesById[16] = \"CC_BidPriceLesserEqualStopPrice\"] = 16;\n                values[valuesById[17] = \"CC_LocalLastPriceLesserEqualStopPrice\"] = 17;\n                values[valuesById[18] = \"CC_LocalLastPriceGreaterEqualStopPrice\"] = 18;\n                return values;\n            })();\n\n            /**\n             * ActionFlagEnum enum.\n             * @name xyz.redtorch.pb.ActionFlagEnum\n             * @enum {string}\n             * @property {number} AF_Unknown=0 AF_Unknown value\n             * @property {number} AF_Delete=1 AF_Delete value\n             * @property {number} AF_Modify=2 AF_Modify value\n             */\n            pb.ActionFlagEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"AF_Unknown\"] = 0;\n                values[valuesById[1] = \"AF_Delete\"] = 1;\n                values[valuesById[2] = \"AF_Modify\"] = 2;\n                return values;\n            })();\n\n            /**\n             * TradingRightEnum enum.\n             * @name xyz.redtorch.pb.TradingRightEnum\n             * @enum {string}\n             * @property {number} TR_Unknown=0 TR_Unknown value\n             * @property {number} TR_Allow=1 TR_Allow value\n             * @property {number} TR_CloseOnly=2 TR_CloseOnly value\n             * @property {number} TR_Forbidden=3 TR_Forbidden value\n             */\n            pb.TradingRightEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"TR_Unknown\"] = 0;\n                values[valuesById[1] = \"TR_Allow\"] = 1;\n                values[valuesById[2] = \"TR_CloseOnly\"] = 2;\n                values[valuesById[3] = \"TR_Forbidden\"] = 3;\n                return values;\n            })();\n\n            /**\n             * OrderSourceEnum enum.\n             * @name xyz.redtorch.pb.OrderSourceEnum\n             * @enum {string}\n             * @property {number} ODS_Unknown=0 ODS_Unknown value\n             * @property {number} ODS_Participant=1 ODS_Participant value\n             * @property {number} ODS_Administrator=2 ODS_Administrator value\n             */\n            pb.OrderSourceEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"ODS_Unknown\"] = 0;\n                values[valuesById[1] = \"ODS_Participant\"] = 1;\n                values[valuesById[2] = \"ODS_Administrator\"] = 2;\n                return values;\n            })();\n\n            /**\n             * TradeTypeEnum enum.\n             * @name xyz.redtorch.pb.TradeTypeEnum\n             * @enum {string}\n             * @property {number} TT_Unknown=0 TT_Unknown value\n             * @property {number} TT_SplitCombination=1 TT_SplitCombination value\n             * @property {number} TT_Common=2 TT_Common value\n             * @property {number} TT_OptionsExecution=3 TT_OptionsExecution value\n             * @property {number} TT_OTC=4 TT_OTC value\n             * @property {number} TT_EFPDerived=5 TT_EFPDerived value\n             * @property {number} TT_CombinationDerived=6 TT_CombinationDerived value\n             * @property {number} TT_BlockTrade=7 TT_BlockTrade value\n             */\n            pb.TradeTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"TT_Unknown\"] = 0;\n                values[valuesById[1] = \"TT_SplitCombination\"] = 1;\n                values[valuesById[2] = \"TT_Common\"] = 2;\n                values[valuesById[3] = \"TT_OptionsExecution\"] = 3;\n                values[valuesById[4] = \"TT_OTC\"] = 4;\n                values[valuesById[5] = \"TT_EFPDerived\"] = 5;\n                values[valuesById[6] = \"TT_CombinationDerived\"] = 6;\n                values[valuesById[7] = \"TT_BlockTrade\"] = 7;\n                return values;\n            })();\n\n            /**\n             * PriceSourceEnum enum.\n             * @name xyz.redtorch.pb.PriceSourceEnum\n             * @enum {string}\n             * @property {number} PSRC_Unknown=0 PSRC_Unknown value\n             * @property {number} PSRC_LastPrice=1 PSRC_LastPrice value\n             * @property {number} PSRC_Buy=2 PSRC_Buy value\n             * @property {number} PSRC_Sell=3 PSRC_Sell value\n             * @property {number} PSRC_OTC=4 PSRC_OTC value\n             */\n            pb.PriceSourceEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"PSRC_Unknown\"] = 0;\n                values[valuesById[1] = \"PSRC_LastPrice\"] = 1;\n                values[valuesById[2] = \"PSRC_Buy\"] = 2;\n                values[valuesById[3] = \"PSRC_Sell\"] = 3;\n                values[valuesById[4] = \"PSRC_OTC\"] = 4;\n                return values;\n            })();\n\n            /**\n             * CurrencyEnum enum.\n             * @name xyz.redtorch.pb.CurrencyEnum\n             * @enum {string}\n             * @property {number} UnknownCurrency=0 UnknownCurrency value\n             * @property {number} USD=1 USD value\n             * @property {number} CNY=2 CNY value\n             * @property {number} CNH=3 CNH value\n             * @property {number} HKD=4 HKD value\n             * @property {number} JPY=5 JPY value\n             * @property {number} EUR=6 EUR value\n             * @property {number} GBP=7 GBP value\n             * @property {number} DEM=8 DEM value\n             * @property {number} CHF=9 CHF value\n             * @property {number} FRF=10 FRF value\n             * @property {number} CAD=11 CAD value\n             * @property {number} AUD=12 AUD value\n             * @property {number} ATS=13 ATS value\n             * @property {number} FIM=14 FIM value\n             * @property {number} BEF=15 BEF value\n             * @property {number} THB=16 THB value\n             * @property {number} IEP=17 IEP value\n             * @property {number} ITL=18 ITL value\n             * @property {number} LUF=19 LUF value\n             * @property {number} NLG=20 NLG value\n             * @property {number} PTE=21 PTE value\n             * @property {number} ESP=22 ESP value\n             * @property {number} IDR=23 IDR value\n             * @property {number} MYR=24 MYR value\n             * @property {number} NZD=25 NZD value\n             * @property {number} PHP=26 PHP value\n             * @property {number} SUR=27 SUR value\n             * @property {number} SGD=28 SGD value\n             * @property {number} KRW=29 KRW value\n             */\n            pb.CurrencyEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UnknownCurrency\"] = 0;\n                values[valuesById[1] = \"USD\"] = 1;\n                values[valuesById[2] = \"CNY\"] = 2;\n                values[valuesById[3] = \"CNH\"] = 3;\n                values[valuesById[4] = \"HKD\"] = 4;\n                values[valuesById[5] = \"JPY\"] = 5;\n                values[valuesById[6] = \"EUR\"] = 6;\n                values[valuesById[7] = \"GBP\"] = 7;\n                values[valuesById[8] = \"DEM\"] = 8;\n                values[valuesById[9] = \"CHF\"] = 9;\n                values[valuesById[10] = \"FRF\"] = 10;\n                values[valuesById[11] = \"CAD\"] = 11;\n                values[valuesById[12] = \"AUD\"] = 12;\n                values[valuesById[13] = \"ATS\"] = 13;\n                values[valuesById[14] = \"FIM\"] = 14;\n                values[valuesById[15] = \"BEF\"] = 15;\n                values[valuesById[16] = \"THB\"] = 16;\n                values[valuesById[17] = \"IEP\"] = 17;\n                values[valuesById[18] = \"ITL\"] = 18;\n                values[valuesById[19] = \"LUF\"] = 19;\n                values[valuesById[20] = \"NLG\"] = 20;\n                values[valuesById[21] = \"PTE\"] = 21;\n                values[valuesById[22] = \"ESP\"] = 22;\n                values[valuesById[23] = \"IDR\"] = 23;\n                values[valuesById[24] = \"MYR\"] = 24;\n                values[valuesById[25] = \"NZD\"] = 25;\n                values[valuesById[26] = \"PHP\"] = 26;\n                values[valuesById[27] = \"SUR\"] = 27;\n                values[valuesById[28] = \"SGD\"] = 28;\n                values[valuesById[29] = \"KRW\"] = 29;\n                return values;\n            })();\n\n            /**\n             * ExchangeEnum enum.\n             * @name xyz.redtorch.pb.ExchangeEnum\n             * @enum {string}\n             * @property {number} UnknownExchange=0 UnknownExchange value\n             * @property {number} SSE=1 SSE value\n             * @property {number} SZSE=2 SZSE value\n             * @property {number} CFFEX=3 CFFEX value\n             * @property {number} SHFE=4 SHFE value\n             * @property {number} CZCE=5 CZCE value\n             * @property {number} DCE=6 DCE value\n             * @property {number} SGE=7 SGE value\n             * @property {number} INE=8 INE value\n             * @property {number} SEHK=9 SEHK value\n             * @property {number} HKFE=10 HKFE value\n             * @property {number} SGX=11 SGX value\n             * @property {number} NYBOT=12 NYBOT value\n             * @property {number} NYMEX=13 NYMEX value\n             * @property {number} CFE=14 CFE value\n             * @property {number} GLOBEX=15 GLOBEX value\n             * @property {number} CMECRYPTO=16 CMECRYPTO value\n             * @property {number} ICEEU=17 ICEEU value\n             * @property {number} ICEEUSOFT=18 ICEEUSOFT value\n             * @property {number} ICEUS=19 ICEUS value\n             * @property {number} IPE=20 IPE value\n             * @property {number} LMEOTC=21 LMEOTC value\n             * @property {number} ECBOT=22 ECBOT value\n             * @property {number} APEX=23 APEX value\n             * @property {number} BMD=24 BMD value\n             * @property {number} MONEP=25 MONEP value\n             * @property {number} DTB=26 DTB value\n             * @property {number} TOCOM=27 TOCOM value\n             * @property {number} TAIFEX=28 TAIFEX value\n             * @property {number} SEHKSZSE=29 SEHKSZSE value\n             * @property {number} SEHKNTL=30 SEHKNTL value\n             * @property {number} KSE=31 KSE value\n             * @property {number} OSE=32 OSE value\n             * @property {number} IB_IDEALPRO=33 IB_IDEALPRO value\n             * @property {number} IB_SMART=34 IB_SMART value\n             */\n            pb.ExchangeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UnknownExchange\"] = 0;\n                values[valuesById[1] = \"SSE\"] = 1;\n                values[valuesById[2] = \"SZSE\"] = 2;\n                values[valuesById[3] = \"CFFEX\"] = 3;\n                values[valuesById[4] = \"SHFE\"] = 4;\n                values[valuesById[5] = \"CZCE\"] = 5;\n                values[valuesById[6] = \"DCE\"] = 6;\n                values[valuesById[7] = \"SGE\"] = 7;\n                values[valuesById[8] = \"INE\"] = 8;\n                values[valuesById[9] = \"SEHK\"] = 9;\n                values[valuesById[10] = \"HKFE\"] = 10;\n                values[valuesById[11] = \"SGX\"] = 11;\n                values[valuesById[12] = \"NYBOT\"] = 12;\n                values[valuesById[13] = \"NYMEX\"] = 13;\n                values[valuesById[14] = \"CFE\"] = 14;\n                values[valuesById[15] = \"GLOBEX\"] = 15;\n                values[valuesById[16] = \"CMECRYPTO\"] = 16;\n                values[valuesById[17] = \"ICEEU\"] = 17;\n                values[valuesById[18] = \"ICEEUSOFT\"] = 18;\n                values[valuesById[19] = \"ICEUS\"] = 19;\n                values[valuesById[20] = \"IPE\"] = 20;\n                values[valuesById[21] = \"LMEOTC\"] = 21;\n                values[valuesById[22] = \"ECBOT\"] = 22;\n                values[valuesById[23] = \"APEX\"] = 23;\n                values[valuesById[24] = \"BMD\"] = 24;\n                values[valuesById[25] = \"MONEP\"] = 25;\n                values[valuesById[26] = \"DTB\"] = 26;\n                values[valuesById[27] = \"TOCOM\"] = 27;\n                values[valuesById[28] = \"TAIFEX\"] = 28;\n                values[valuesById[29] = \"SEHKSZSE\"] = 29;\n                values[valuesById[30] = \"SEHKNTL\"] = 30;\n                values[valuesById[31] = \"KSE\"] = 31;\n                values[valuesById[32] = \"OSE\"] = 32;\n                values[valuesById[33] = \"IB_IDEALPRO\"] = 33;\n                values[valuesById[34] = \"IB_SMART\"] = 34;\n                return values;\n            })();\n\n            /**\n             * OptionsTypeEnum enum.\n             * @name xyz.redtorch.pb.OptionsTypeEnum\n             * @enum {string}\n             * @property {number} O_Unknown=0 O_Unknown value\n             * @property {number} O_CallOptions=1 O_CallOptions value\n             * @property {number} O_PutOptions=2 O_PutOptions value\n             */\n            pb.OptionsTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"O_Unknown\"] = 0;\n                values[valuesById[1] = \"O_CallOptions\"] = 1;\n                values[valuesById[2] = \"O_PutOptions\"] = 2;\n                return values;\n            })();\n\n            /**\n             * StrikeModeEnum enum.\n             * @name xyz.redtorch.pb.StrikeModeEnum\n             * @enum {string}\n             * @property {number} STM_Unknown=0 STM_Unknown value\n             * @property {number} STM_Continental=1 STM_Continental value\n             * @property {number} STM_American=2 STM_American value\n             * @property {number} STM_Bermuda=3 STM_Bermuda value\n             */\n            pb.StrikeModeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"STM_Unknown\"] = 0;\n                values[valuesById[1] = \"STM_Continental\"] = 1;\n                values[valuesById[2] = \"STM_American\"] = 2;\n                values[valuesById[3] = \"STM_Bermuda\"] = 3;\n                return values;\n            })();\n\n            /**\n             * CombinationTypeEnum enum.\n             * @name xyz.redtorch.pb.CombinationTypeEnum\n             * @enum {string}\n             * @property {number} COMBT_Unknown=0 COMBT_Unknown value\n             * @property {number} COMBT_Future=1 COMBT_Future value\n             * @property {number} COMBT_BUL=2 COMBT_BUL value\n             * @property {number} COMBT_BER=3 COMBT_BER value\n             * @property {number} COMBT_STD=4 COMBT_STD value\n             * @property {number} COMBT_STG=5 COMBT_STG value\n             * @property {number} COMBT_PRT=6 COMBT_PRT value\n             * @property {number} COMBT_CLD=7 COMBT_CLD value\n             */\n            pb.CombinationTypeEnum = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"COMBT_Unknown\"] = 0;\n                values[valuesById[1] = \"COMBT_Future\"] = 1;\n                values[valuesById[2] = \"COMBT_BUL\"] = 2;\n                values[valuesById[3] = \"COMBT_BER\"] = 3;\n                values[valuesById[4] = \"COMBT_STD\"] = 4;\n                values[valuesById[5] = \"COMBT_STG\"] = 5;\n                values[valuesById[6] = \"COMBT_PRT\"] = 6;\n                values[valuesById[7] = \"COMBT_CLD\"] = 7;\n                return values;\n            })();\n\n            pb.GatewayField = (function() {\n\n                /**\n                 * Properties of a GatewayField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IGatewayField\n                 * @property {string|null} [gatewayId] GatewayField gatewayId\n                 * @property {string|null} [name] GatewayField name\n                 * @property {string|null} [description] GatewayField description\n                 * @property {xyz.redtorch.pb.GatewayTypeEnum|null} [gatewayType] GatewayField gatewayType\n                 * @property {xyz.redtorch.pb.GatewayAdapterTypeEnum|null} [gatewayAdapterType] GatewayField gatewayAdapterType\n                 * @property {xyz.redtorch.pb.ConnectStatusEnum|null} [status] GatewayField status\n                 * @property {boolean|null} [authErrorFlag] GatewayField authErrorFlag\n                 * @property {number|null} [targetNodeId] GatewayField targetNodeId\n                 * @property {number|Long|null} [version] GatewayField version\n                 */\n\n                /**\n                 * Constructs a new GatewayField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a GatewayField.\n                 * @implements IGatewayField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IGatewayField=} [properties] Properties to set\n                 */\n                function GatewayField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * GatewayField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.gatewayId = \"\";\n\n                /**\n                 * GatewayField name.\n                 * @member {string} name\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.name = \"\";\n\n                /**\n                 * GatewayField description.\n                 * @member {string} description\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.description = \"\";\n\n                /**\n                 * GatewayField gatewayType.\n                 * @member {xyz.redtorch.pb.GatewayTypeEnum} gatewayType\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.gatewayType = 0;\n\n                /**\n                 * GatewayField gatewayAdapterType.\n                 * @member {xyz.redtorch.pb.GatewayAdapterTypeEnum} gatewayAdapterType\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.gatewayAdapterType = 0;\n\n                /**\n                 * GatewayField status.\n                 * @member {xyz.redtorch.pb.ConnectStatusEnum} status\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.status = 0;\n\n                /**\n                 * GatewayField authErrorFlag.\n                 * @member {boolean} authErrorFlag\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.authErrorFlag = false;\n\n                /**\n                 * GatewayField targetNodeId.\n                 * @member {number} targetNodeId\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.targetNodeId = 0;\n\n                /**\n                 * GatewayField version.\n                 * @member {number|Long} version\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 */\n                GatewayField.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new GatewayField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewayField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField instance\n                 */\n                GatewayField.create = function create(properties) {\n                    return new GatewayField(properties);\n                };\n\n                /**\n                 * Encodes the specified GatewayField message. Does not implicitly {@link xyz.redtorch.pb.GatewayField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewayField} message GatewayField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewayField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.gatewayId);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gatewayType);\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gatewayAdapterType);\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.status);\n                    if (message.authErrorFlag != null && message.hasOwnProperty(\"authErrorFlag\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.authErrorFlag);\n                    if (message.targetNodeId != null && message.hasOwnProperty(\"targetNodeId\"))\n                        writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.targetNodeId);\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        writer.uint32(/* id 9, wireType 1 =*/73).fixed64(message.version);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified GatewayField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewayField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewayField} message GatewayField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewayField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a GatewayField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewayField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewayField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        case 3:\n                            message.description = reader.string();\n                            break;\n                        case 4:\n                            message.gatewayType = reader.int32();\n                            break;\n                        case 5:\n                            message.gatewayAdapterType = reader.int32();\n                            break;\n                        case 6:\n                            message.status = reader.int32();\n                            break;\n                        case 7:\n                            message.authErrorFlag = reader.bool();\n                            break;\n                        case 8:\n                            message.targetNodeId = reader.fixed32();\n                            break;\n                        case 9:\n                            message.version = reader.fixed64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a GatewayField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewayField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a GatewayField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                GatewayField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        if (!$util.isString(message.description))\n                            return \"description: string expected\";\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        switch (message.gatewayType) {\n                        default:\n                            return \"gatewayType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        switch (message.gatewayAdapterType) {\n                        default:\n                            return \"gatewayAdapterType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        switch (message.status) {\n                        default:\n                            return \"status: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.authErrorFlag != null && message.hasOwnProperty(\"authErrorFlag\"))\n                        if (typeof message.authErrorFlag !== \"boolean\")\n                            return \"authErrorFlag: boolean expected\";\n                    if (message.targetNodeId != null && message.hasOwnProperty(\"targetNodeId\"))\n                        if (!$util.isInteger(message.targetNodeId))\n                            return \"targetNodeId: integer expected\";\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                            return \"version: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a GatewayField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField\n                 */\n                GatewayField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.GatewayField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.GatewayField();\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.description != null)\n                        message.description = String(object.description);\n                    switch (object.gatewayType) {\n                    case \"GTE_TradeAndMarketData\":\n                    case 0:\n                        message.gatewayType = 0;\n                        break;\n                    case \"GTE_MarketData\":\n                    case 1:\n                        message.gatewayType = 1;\n                        break;\n                    case \"GTE_Trade\":\n                    case 2:\n                        message.gatewayType = 2;\n                        break;\n                    }\n                    switch (object.gatewayAdapterType) {\n                    case \"GAT_CTP\":\n                    case 0:\n                        message.gatewayAdapterType = 0;\n                        break;\n                    case \"GAT_IB\":\n                    case 1:\n                        message.gatewayAdapterType = 1;\n                        break;\n                    case \"GAT_COMMON\":\n                    case 2:\n                        message.gatewayAdapterType = 2;\n                        break;\n                    }\n                    switch (object.status) {\n                    case \"CS_Unknown\":\n                    case 0:\n                        message.status = 0;\n                        break;\n                    case \"CS_Disconnected\":\n                    case 1:\n                        message.status = 1;\n                        break;\n                    case \"CS_Connected\":\n                    case 2:\n                        message.status = 2;\n                        break;\n                    case \"CS_Disconnecting\":\n                    case 3:\n                        message.status = 3;\n                        break;\n                    case \"CS_Connecting\":\n                    case 4:\n                        message.status = 4;\n                        break;\n                    }\n                    if (object.authErrorFlag != null)\n                        message.authErrorFlag = Boolean(object.authErrorFlag);\n                    if (object.targetNodeId != null)\n                        message.targetNodeId = object.targetNodeId >>> 0;\n                    if (object.version != null)\n                        if ($util.Long)\n                            (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                        else if (typeof object.version === \"string\")\n                            message.version = parseInt(object.version, 10);\n                        else if (typeof object.version === \"number\")\n                            message.version = object.version;\n                        else if (typeof object.version === \"object\")\n                            message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a GatewayField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @static\n                 * @param {xyz.redtorch.pb.GatewayField} message GatewayField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                GatewayField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.gatewayId = \"\";\n                        object.name = \"\";\n                        object.description = \"\";\n                        object.gatewayType = options.enums === String ? \"GTE_TradeAndMarketData\" : 0;\n                        object.gatewayAdapterType = options.enums === String ? \"GAT_CTP\" : 0;\n                        object.status = options.enums === String ? \"CS_Unknown\" : 0;\n                        object.authErrorFlag = false;\n                        object.targetNodeId = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.version = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        object.description = message.description;\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        object.gatewayType = options.enums === String ? $root.xyz.redtorch.pb.GatewayTypeEnum[message.gatewayType] : message.gatewayType;\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        object.gatewayAdapterType = options.enums === String ? $root.xyz.redtorch.pb.GatewayAdapterTypeEnum[message.gatewayAdapterType] : message.gatewayAdapterType;\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = options.enums === String ? $root.xyz.redtorch.pb.ConnectStatusEnum[message.status] : message.status;\n                    if (message.authErrorFlag != null && message.hasOwnProperty(\"authErrorFlag\"))\n                        object.authErrorFlag = message.authErrorFlag;\n                    if (message.targetNodeId != null && message.hasOwnProperty(\"targetNodeId\"))\n                        object.targetNodeId = message.targetNodeId;\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        if (typeof message.version === \"number\")\n                            object.version = options.longs === String ? String(message.version) : message.version;\n                        else\n                            object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n                    return object;\n                };\n\n                /**\n                 * Converts this GatewayField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.GatewayField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                GatewayField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return GatewayField;\n            })();\n\n            pb.ContractField = (function() {\n\n                /**\n                 * Properties of a ContractField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IContractField\n                 * @property {string|null} [contractId] ContractField contractId\n                 * @property {string|null} [name] ContractField name\n                 * @property {string|null} [fullName] ContractField fullName\n                 * @property {string|null} [thirdPartyId] ContractField thirdPartyId\n                 * @property {string|null} [uniformSymbol] ContractField uniformSymbol\n                 * @property {string|null} [symbol] ContractField symbol\n                 * @property {xyz.redtorch.pb.ExchangeEnum|null} [exchange] ContractField exchange\n                 * @property {xyz.redtorch.pb.ProductClassEnum|null} [productClass] ContractField productClass\n                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] ContractField currency\n                 * @property {number|null} [multiplier] ContractField multiplier\n                 * @property {number|null} [priceTick] ContractField priceTick\n                 * @property {number|null} [longMarginRatio] ContractField longMarginRatio\n                 * @property {number|null} [shortMarginRatio] ContractField shortMarginRatio\n                 * @property {boolean|null} [maxMarginSideAlgorithm] ContractField maxMarginSideAlgorithm\n                 * @property {string|null} [underlyingSymbol] ContractField underlyingSymbol\n                 * @property {number|null} [strikePrice] ContractField strikePrice\n                 * @property {xyz.redtorch.pb.OptionsTypeEnum|null} [optionsType] ContractField optionsType\n                 * @property {number|null} [underlyingMultiplier] ContractField underlyingMultiplier\n                 * @property {string|null} [lastTradeDateOrContractMonth] ContractField lastTradeDateOrContractMonth\n                 * @property {number|null} [maxMarketOrderVolume] ContractField maxMarketOrderVolume\n                 * @property {number|null} [minMarketOrderVolume] ContractField minMarketOrderVolume\n                 * @property {number|null} [maxLimitOrderVolume] ContractField maxLimitOrderVolume\n                 * @property {number|null} [minLimitOrderVolume] ContractField minLimitOrderVolume\n                 * @property {xyz.redtorch.pb.CombinationTypeEnum|null} [combinationType] ContractField combinationType\n                 * @property {string|null} [gatewayId] ContractField gatewayId\n                 */\n\n                /**\n                 * Constructs a new ContractField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a ContractField.\n                 * @implements IContractField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IContractField=} [properties] Properties to set\n                 */\n                function ContractField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ContractField contractId.\n                 * @member {string} contractId\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.contractId = \"\";\n\n                /**\n                 * ContractField name.\n                 * @member {string} name\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.name = \"\";\n\n                /**\n                 * ContractField fullName.\n                 * @member {string} fullName\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.fullName = \"\";\n\n                /**\n                 * ContractField thirdPartyId.\n                 * @member {string} thirdPartyId\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.thirdPartyId = \"\";\n\n                /**\n                 * ContractField uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.uniformSymbol = \"\";\n\n                /**\n                 * ContractField symbol.\n                 * @member {string} symbol\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.symbol = \"\";\n\n                /**\n                 * ContractField exchange.\n                 * @member {xyz.redtorch.pb.ExchangeEnum} exchange\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.exchange = 0;\n\n                /**\n                 * ContractField productClass.\n                 * @member {xyz.redtorch.pb.ProductClassEnum} productClass\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.productClass = 0;\n\n                /**\n                 * ContractField currency.\n                 * @member {xyz.redtorch.pb.CurrencyEnum} currency\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.currency = 0;\n\n                /**\n                 * ContractField multiplier.\n                 * @member {number} multiplier\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.multiplier = 0;\n\n                /**\n                 * ContractField priceTick.\n                 * @member {number} priceTick\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.priceTick = 0;\n\n                /**\n                 * ContractField longMarginRatio.\n                 * @member {number} longMarginRatio\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.longMarginRatio = 0;\n\n                /**\n                 * ContractField shortMarginRatio.\n                 * @member {number} shortMarginRatio\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.shortMarginRatio = 0;\n\n                /**\n                 * ContractField maxMarginSideAlgorithm.\n                 * @member {boolean} maxMarginSideAlgorithm\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.maxMarginSideAlgorithm = false;\n\n                /**\n                 * ContractField underlyingSymbol.\n                 * @member {string} underlyingSymbol\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.underlyingSymbol = \"\";\n\n                /**\n                 * ContractField strikePrice.\n                 * @member {number} strikePrice\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.strikePrice = 0;\n\n                /**\n                 * ContractField optionsType.\n                 * @member {xyz.redtorch.pb.OptionsTypeEnum} optionsType\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.optionsType = 0;\n\n                /**\n                 * ContractField underlyingMultiplier.\n                 * @member {number} underlyingMultiplier\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.underlyingMultiplier = 0;\n\n                /**\n                 * ContractField lastTradeDateOrContractMonth.\n                 * @member {string} lastTradeDateOrContractMonth\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.lastTradeDateOrContractMonth = \"\";\n\n                /**\n                 * ContractField maxMarketOrderVolume.\n                 * @member {number} maxMarketOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.maxMarketOrderVolume = 0;\n\n                /**\n                 * ContractField minMarketOrderVolume.\n                 * @member {number} minMarketOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.minMarketOrderVolume = 0;\n\n                /**\n                 * ContractField maxLimitOrderVolume.\n                 * @member {number} maxLimitOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.maxLimitOrderVolume = 0;\n\n                /**\n                 * ContractField minLimitOrderVolume.\n                 * @member {number} minLimitOrderVolume\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.minLimitOrderVolume = 0;\n\n                /**\n                 * ContractField combinationType.\n                 * @member {xyz.redtorch.pb.CombinationTypeEnum} combinationType\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.combinationType = 0;\n\n                /**\n                 * ContractField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 */\n                ContractField.prototype.gatewayId = \"\";\n\n                /**\n                 * Creates a new ContractField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.IContractField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField instance\n                 */\n                ContractField.create = function create(properties) {\n                    return new ContractField(properties);\n                };\n\n                /**\n                 * Encodes the specified ContractField message. Does not implicitly {@link xyz.redtorch.pb.ContractField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.IContractField} message ContractField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContractField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractId);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    if (message.fullName != null && message.hasOwnProperty(\"fullName\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.fullName);\n                    if (message.thirdPartyId != null && message.hasOwnProperty(\"thirdPartyId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.thirdPartyId);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.uniformSymbol);\n                    if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.symbol);\n                    if (message.exchange != null && message.hasOwnProperty(\"exchange\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.exchange);\n                    if (message.productClass != null && message.hasOwnProperty(\"productClass\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.productClass);\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.currency);\n                    if (message.multiplier != null && message.hasOwnProperty(\"multiplier\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.multiplier);\n                    if (message.priceTick != null && message.hasOwnProperty(\"priceTick\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.priceTick);\n                    if (message.longMarginRatio != null && message.hasOwnProperty(\"longMarginRatio\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.longMarginRatio);\n                    if (message.shortMarginRatio != null && message.hasOwnProperty(\"shortMarginRatio\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.shortMarginRatio);\n                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty(\"maxMarginSideAlgorithm\"))\n                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.maxMarginSideAlgorithm);\n                    if (message.underlyingSymbol != null && message.hasOwnProperty(\"underlyingSymbol\"))\n                        writer.uint32(/* id 17, wireType 2 =*/138).string(message.underlyingSymbol);\n                    if (message.strikePrice != null && message.hasOwnProperty(\"strikePrice\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.strikePrice);\n                    if (message.optionsType != null && message.hasOwnProperty(\"optionsType\"))\n                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.optionsType);\n                    if (message.underlyingMultiplier != null && message.hasOwnProperty(\"underlyingMultiplier\"))\n                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.underlyingMultiplier);\n                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty(\"lastTradeDateOrContractMonth\"))\n                        writer.uint32(/* id 21, wireType 2 =*/170).string(message.lastTradeDateOrContractMonth);\n                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty(\"maxMarketOrderVolume\"))\n                        writer.uint32(/* id 22, wireType 5 =*/181).fixed32(message.maxMarketOrderVolume);\n                    if (message.minMarketOrderVolume != null && message.hasOwnProperty(\"minMarketOrderVolume\"))\n                        writer.uint32(/* id 23, wireType 5 =*/189).fixed32(message.minMarketOrderVolume);\n                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty(\"maxLimitOrderVolume\"))\n                        writer.uint32(/* id 24, wireType 5 =*/197).fixed32(message.maxLimitOrderVolume);\n                    if (message.minLimitOrderVolume != null && message.hasOwnProperty(\"minLimitOrderVolume\"))\n                        writer.uint32(/* id 25, wireType 5 =*/205).fixed32(message.minLimitOrderVolume);\n                    if (message.combinationType != null && message.hasOwnProperty(\"combinationType\"))\n                        writer.uint32(/* id 26, wireType 0 =*/208).int32(message.combinationType);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 27, wireType 2 =*/218).string(message.gatewayId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ContractField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.ContractField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.IContractField} message ContractField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContractField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ContractField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContractField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.ContractField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.contractId = reader.string();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        case 3:\n                            message.fullName = reader.string();\n                            break;\n                        case 4:\n                            message.thirdPartyId = reader.string();\n                            break;\n                        case 7:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        case 8:\n                            message.symbol = reader.string();\n                            break;\n                        case 9:\n                            message.exchange = reader.int32();\n                            break;\n                        case 10:\n                            message.productClass = reader.int32();\n                            break;\n                        case 11:\n                            message.currency = reader.int32();\n                            break;\n                        case 12:\n                            message.multiplier = reader.double();\n                            break;\n                        case 13:\n                            message.priceTick = reader.double();\n                            break;\n                        case 14:\n                            message.longMarginRatio = reader.double();\n                            break;\n                        case 15:\n                            message.shortMarginRatio = reader.double();\n                            break;\n                        case 16:\n                            message.maxMarginSideAlgorithm = reader.bool();\n                            break;\n                        case 17:\n                            message.underlyingSymbol = reader.string();\n                            break;\n                        case 18:\n                            message.strikePrice = reader.double();\n                            break;\n                        case 19:\n                            message.optionsType = reader.int32();\n                            break;\n                        case 20:\n                            message.underlyingMultiplier = reader.double();\n                            break;\n                        case 21:\n                            message.lastTradeDateOrContractMonth = reader.string();\n                            break;\n                        case 22:\n                            message.maxMarketOrderVolume = reader.fixed32();\n                            break;\n                        case 23:\n                            message.minMarketOrderVolume = reader.fixed32();\n                            break;\n                        case 24:\n                            message.maxLimitOrderVolume = reader.fixed32();\n                            break;\n                        case 25:\n                            message.minLimitOrderVolume = reader.fixed32();\n                            break;\n                        case 26:\n                            message.combinationType = reader.int32();\n                            break;\n                        case 27:\n                            message.gatewayId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ContractField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContractField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ContractField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ContractField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        if (!$util.isString(message.contractId))\n                            return \"contractId: string expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.fullName != null && message.hasOwnProperty(\"fullName\"))\n                        if (!$util.isString(message.fullName))\n                            return \"fullName: string expected\";\n                    if (message.thirdPartyId != null && message.hasOwnProperty(\"thirdPartyId\"))\n                        if (!$util.isString(message.thirdPartyId))\n                            return \"thirdPartyId: string expected\";\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                        if (!$util.isString(message.symbol))\n                            return \"symbol: string expected\";\n                    if (message.exchange != null && message.hasOwnProperty(\"exchange\"))\n                        switch (message.exchange) {\n                        default:\n                            return \"exchange: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                        case 30:\n                        case 31:\n                        case 32:\n                        case 33:\n                        case 34:\n                            break;\n                        }\n                    if (message.productClass != null && message.hasOwnProperty(\"productClass\"))\n                        switch (message.productClass) {\n                        default:\n                            return \"productClass: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                            break;\n                        }\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        switch (message.currency) {\n                        default:\n                            return \"currency: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                            break;\n                        }\n                    if (message.multiplier != null && message.hasOwnProperty(\"multiplier\"))\n                        if (typeof message.multiplier !== \"number\")\n                            return \"multiplier: number expected\";\n                    if (message.priceTick != null && message.hasOwnProperty(\"priceTick\"))\n                        if (typeof message.priceTick !== \"number\")\n                            return \"priceTick: number expected\";\n                    if (message.longMarginRatio != null && message.hasOwnProperty(\"longMarginRatio\"))\n                        if (typeof message.longMarginRatio !== \"number\")\n                            return \"longMarginRatio: number expected\";\n                    if (message.shortMarginRatio != null && message.hasOwnProperty(\"shortMarginRatio\"))\n                        if (typeof message.shortMarginRatio !== \"number\")\n                            return \"shortMarginRatio: number expected\";\n                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty(\"maxMarginSideAlgorithm\"))\n                        if (typeof message.maxMarginSideAlgorithm !== \"boolean\")\n                            return \"maxMarginSideAlgorithm: boolean expected\";\n                    if (message.underlyingSymbol != null && message.hasOwnProperty(\"underlyingSymbol\"))\n                        if (!$util.isString(message.underlyingSymbol))\n                            return \"underlyingSymbol: string expected\";\n                    if (message.strikePrice != null && message.hasOwnProperty(\"strikePrice\"))\n                        if (typeof message.strikePrice !== \"number\")\n                            return \"strikePrice: number expected\";\n                    if (message.optionsType != null && message.hasOwnProperty(\"optionsType\"))\n                        switch (message.optionsType) {\n                        default:\n                            return \"optionsType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.underlyingMultiplier != null && message.hasOwnProperty(\"underlyingMultiplier\"))\n                        if (typeof message.underlyingMultiplier !== \"number\")\n                            return \"underlyingMultiplier: number expected\";\n                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty(\"lastTradeDateOrContractMonth\"))\n                        if (!$util.isString(message.lastTradeDateOrContractMonth))\n                            return \"lastTradeDateOrContractMonth: string expected\";\n                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty(\"maxMarketOrderVolume\"))\n                        if (!$util.isInteger(message.maxMarketOrderVolume))\n                            return \"maxMarketOrderVolume: integer expected\";\n                    if (message.minMarketOrderVolume != null && message.hasOwnProperty(\"minMarketOrderVolume\"))\n                        if (!$util.isInteger(message.minMarketOrderVolume))\n                            return \"minMarketOrderVolume: integer expected\";\n                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty(\"maxLimitOrderVolume\"))\n                        if (!$util.isInteger(message.maxLimitOrderVolume))\n                            return \"maxLimitOrderVolume: integer expected\";\n                    if (message.minLimitOrderVolume != null && message.hasOwnProperty(\"minLimitOrderVolume\"))\n                        if (!$util.isInteger(message.minLimitOrderVolume))\n                            return \"minLimitOrderVolume: integer expected\";\n                    if (message.combinationType != null && message.hasOwnProperty(\"combinationType\"))\n                        switch (message.combinationType) {\n                        default:\n                            return \"combinationType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a ContractField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.ContractField} ContractField\n                 */\n                ContractField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.ContractField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.ContractField();\n                    if (object.contractId != null)\n                        message.contractId = String(object.contractId);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.fullName != null)\n                        message.fullName = String(object.fullName);\n                    if (object.thirdPartyId != null)\n                        message.thirdPartyId = String(object.thirdPartyId);\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    if (object.symbol != null)\n                        message.symbol = String(object.symbol);\n                    switch (object.exchange) {\n                    case \"UnknownExchange\":\n                    case 0:\n                        message.exchange = 0;\n                        break;\n                    case \"SSE\":\n                    case 1:\n                        message.exchange = 1;\n                        break;\n                    case \"SZSE\":\n                    case 2:\n                        message.exchange = 2;\n                        break;\n                    case \"CFFEX\":\n                    case 3:\n                        message.exchange = 3;\n                        break;\n                    case \"SHFE\":\n                    case 4:\n                        message.exchange = 4;\n                        break;\n                    case \"CZCE\":\n                    case 5:\n                        message.exchange = 5;\n                        break;\n                    case \"DCE\":\n                    case 6:\n                        message.exchange = 6;\n                        break;\n                    case \"SGE\":\n                    case 7:\n                        message.exchange = 7;\n                        break;\n                    case \"INE\":\n                    case 8:\n                        message.exchange = 8;\n                        break;\n                    case \"SEHK\":\n                    case 9:\n                        message.exchange = 9;\n                        break;\n                    case \"HKFE\":\n                    case 10:\n                        message.exchange = 10;\n                        break;\n                    case \"SGX\":\n                    case 11:\n                        message.exchange = 11;\n                        break;\n                    case \"NYBOT\":\n                    case 12:\n                        message.exchange = 12;\n                        break;\n                    case \"NYMEX\":\n                    case 13:\n                        message.exchange = 13;\n                        break;\n                    case \"CFE\":\n                    case 14:\n                        message.exchange = 14;\n                        break;\n                    case \"GLOBEX\":\n                    case 15:\n                        message.exchange = 15;\n                        break;\n                    case \"CMECRYPTO\":\n                    case 16:\n                        message.exchange = 16;\n                        break;\n                    case \"ICEEU\":\n                    case 17:\n                        message.exchange = 17;\n                        break;\n                    case \"ICEEUSOFT\":\n                    case 18:\n                        message.exchange = 18;\n                        break;\n                    case \"ICEUS\":\n                    case 19:\n                        message.exchange = 19;\n                        break;\n                    case \"IPE\":\n                    case 20:\n                        message.exchange = 20;\n                        break;\n                    case \"LMEOTC\":\n                    case 21:\n                        message.exchange = 21;\n                        break;\n                    case \"ECBOT\":\n                    case 22:\n                        message.exchange = 22;\n                        break;\n                    case \"APEX\":\n                    case 23:\n                        message.exchange = 23;\n                        break;\n                    case \"BMD\":\n                    case 24:\n                        message.exchange = 24;\n                        break;\n                    case \"MONEP\":\n                    case 25:\n                        message.exchange = 25;\n                        break;\n                    case \"DTB\":\n                    case 26:\n                        message.exchange = 26;\n                        break;\n                    case \"TOCOM\":\n                    case 27:\n                        message.exchange = 27;\n                        break;\n                    case \"TAIFEX\":\n                    case 28:\n                        message.exchange = 28;\n                        break;\n                    case \"SEHKSZSE\":\n                    case 29:\n                        message.exchange = 29;\n                        break;\n                    case \"SEHKNTL\":\n                    case 30:\n                        message.exchange = 30;\n                        break;\n                    case \"KSE\":\n                    case 31:\n                        message.exchange = 31;\n                        break;\n                    case \"OSE\":\n                    case 32:\n                        message.exchange = 32;\n                        break;\n                    case \"IB_IDEALPRO\":\n                    case 33:\n                        message.exchange = 33;\n                        break;\n                    case \"IB_SMART\":\n                    case 34:\n                        message.exchange = 34;\n                        break;\n                    }\n                    switch (object.productClass) {\n                    case \"UnknownProductClass\":\n                    case 0:\n                        message.productClass = 0;\n                        break;\n                    case \"EQUITY\":\n                    case 1:\n                        message.productClass = 1;\n                        break;\n                    case \"FUTURES\":\n                    case 2:\n                        message.productClass = 2;\n                        break;\n                    case \"OPTION\":\n                    case 3:\n                        message.productClass = 3;\n                        break;\n                    case \"INDEX\":\n                    case 4:\n                        message.productClass = 4;\n                        break;\n                    case \"COMBINATION\":\n                    case 5:\n                        message.productClass = 5;\n                        break;\n                    case \"BOND\":\n                    case 6:\n                        message.productClass = 6;\n                        break;\n                    case \"FOREX\":\n                    case 7:\n                        message.productClass = 7;\n                        break;\n                    case \"SPOT\":\n                    case 8:\n                        message.productClass = 8;\n                        break;\n                    case \"DEFER\":\n                    case 9:\n                        message.productClass = 9;\n                        break;\n                    case \"ETF\":\n                    case 10:\n                        message.productClass = 10;\n                        break;\n                    case \"WARRANTS\":\n                    case 11:\n                        message.productClass = 11;\n                        break;\n                    case \"SPREAD\":\n                    case 12:\n                        message.productClass = 12;\n                        break;\n                    case \"FUND\":\n                    case 13:\n                        message.productClass = 13;\n                        break;\n                    case \"EFP\":\n                    case 14:\n                        message.productClass = 14;\n                        break;\n                    case \"SPOTOPTION\":\n                    case 15:\n                        message.productClass = 15;\n                        break;\n                    case \"TAS\":\n                    case 16:\n                        message.productClass = 16;\n                        break;\n                    case \"MI\":\n                    case 17:\n                        message.productClass = 17;\n                        break;\n                    }\n                    switch (object.currency) {\n                    case \"UnknownCurrency\":\n                    case 0:\n                        message.currency = 0;\n                        break;\n                    case \"USD\":\n                    case 1:\n                        message.currency = 1;\n                        break;\n                    case \"CNY\":\n                    case 2:\n                        message.currency = 2;\n                        break;\n                    case \"CNH\":\n                    case 3:\n                        message.currency = 3;\n                        break;\n                    case \"HKD\":\n                    case 4:\n                        message.currency = 4;\n                        break;\n                    case \"JPY\":\n                    case 5:\n                        message.currency = 5;\n                        break;\n                    case \"EUR\":\n                    case 6:\n                        message.currency = 6;\n                        break;\n                    case \"GBP\":\n                    case 7:\n                        message.currency = 7;\n                        break;\n                    case \"DEM\":\n                    case 8:\n                        message.currency = 8;\n                        break;\n                    case \"CHF\":\n                    case 9:\n                        message.currency = 9;\n                        break;\n                    case \"FRF\":\n                    case 10:\n                        message.currency = 10;\n                        break;\n                    case \"CAD\":\n                    case 11:\n                        message.currency = 11;\n                        break;\n                    case \"AUD\":\n                    case 12:\n                        message.currency = 12;\n                        break;\n                    case \"ATS\":\n                    case 13:\n                        message.currency = 13;\n                        break;\n                    case \"FIM\":\n                    case 14:\n                        message.currency = 14;\n                        break;\n                    case \"BEF\":\n                    case 15:\n                        message.currency = 15;\n                        break;\n                    case \"THB\":\n                    case 16:\n                        message.currency = 16;\n                        break;\n                    case \"IEP\":\n                    case 17:\n                        message.currency = 17;\n                        break;\n                    case \"ITL\":\n                    case 18:\n                        message.currency = 18;\n                        break;\n                    case \"LUF\":\n                    case 19:\n                        message.currency = 19;\n                        break;\n                    case \"NLG\":\n                    case 20:\n                        message.currency = 20;\n                        break;\n                    case \"PTE\":\n                    case 21:\n                        message.currency = 21;\n                        break;\n                    case \"ESP\":\n                    case 22:\n                        message.currency = 22;\n                        break;\n                    case \"IDR\":\n                    case 23:\n                        message.currency = 23;\n                        break;\n                    case \"MYR\":\n                    case 24:\n                        message.currency = 24;\n                        break;\n                    case \"NZD\":\n                    case 25:\n                        message.currency = 25;\n                        break;\n                    case \"PHP\":\n                    case 26:\n                        message.currency = 26;\n                        break;\n                    case \"SUR\":\n                    case 27:\n                        message.currency = 27;\n                        break;\n                    case \"SGD\":\n                    case 28:\n                        message.currency = 28;\n                        break;\n                    case \"KRW\":\n                    case 29:\n                        message.currency = 29;\n                        break;\n                    }\n                    if (object.multiplier != null)\n                        message.multiplier = Number(object.multiplier);\n                    if (object.priceTick != null)\n                        message.priceTick = Number(object.priceTick);\n                    if (object.longMarginRatio != null)\n                        message.longMarginRatio = Number(object.longMarginRatio);\n                    if (object.shortMarginRatio != null)\n                        message.shortMarginRatio = Number(object.shortMarginRatio);\n                    if (object.maxMarginSideAlgorithm != null)\n                        message.maxMarginSideAlgorithm = Boolean(object.maxMarginSideAlgorithm);\n                    if (object.underlyingSymbol != null)\n                        message.underlyingSymbol = String(object.underlyingSymbol);\n                    if (object.strikePrice != null)\n                        message.strikePrice = Number(object.strikePrice);\n                    switch (object.optionsType) {\n                    case \"O_Unknown\":\n                    case 0:\n                        message.optionsType = 0;\n                        break;\n                    case \"O_CallOptions\":\n                    case 1:\n                        message.optionsType = 1;\n                        break;\n                    case \"O_PutOptions\":\n                    case 2:\n                        message.optionsType = 2;\n                        break;\n                    }\n                    if (object.underlyingMultiplier != null)\n                        message.underlyingMultiplier = Number(object.underlyingMultiplier);\n                    if (object.lastTradeDateOrContractMonth != null)\n                        message.lastTradeDateOrContractMonth = String(object.lastTradeDateOrContractMonth);\n                    if (object.maxMarketOrderVolume != null)\n                        message.maxMarketOrderVolume = object.maxMarketOrderVolume >>> 0;\n                    if (object.minMarketOrderVolume != null)\n                        message.minMarketOrderVolume = object.minMarketOrderVolume >>> 0;\n                    if (object.maxLimitOrderVolume != null)\n                        message.maxLimitOrderVolume = object.maxLimitOrderVolume >>> 0;\n                    if (object.minLimitOrderVolume != null)\n                        message.minLimitOrderVolume = object.minLimitOrderVolume >>> 0;\n                    switch (object.combinationType) {\n                    case \"COMBT_Unknown\":\n                    case 0:\n                        message.combinationType = 0;\n                        break;\n                    case \"COMBT_Future\":\n                    case 1:\n                        message.combinationType = 1;\n                        break;\n                    case \"COMBT_BUL\":\n                    case 2:\n                        message.combinationType = 2;\n                        break;\n                    case \"COMBT_BER\":\n                    case 3:\n                        message.combinationType = 3;\n                        break;\n                    case \"COMBT_STD\":\n                    case 4:\n                        message.combinationType = 4;\n                        break;\n                    case \"COMBT_STG\":\n                    case 5:\n                        message.combinationType = 5;\n                        break;\n                    case \"COMBT_PRT\":\n                    case 6:\n                        message.combinationType = 6;\n                        break;\n                    case \"COMBT_CLD\":\n                    case 7:\n                        message.combinationType = 7;\n                        break;\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ContractField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @static\n                 * @param {xyz.redtorch.pb.ContractField} message ContractField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ContractField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.contractId = \"\";\n                        object.name = \"\";\n                        object.fullName = \"\";\n                        object.thirdPartyId = \"\";\n                        object.uniformSymbol = \"\";\n                        object.symbol = \"\";\n                        object.exchange = options.enums === String ? \"UnknownExchange\" : 0;\n                        object.productClass = options.enums === String ? \"UnknownProductClass\" : 0;\n                        object.currency = options.enums === String ? \"UnknownCurrency\" : 0;\n                        object.multiplier = 0;\n                        object.priceTick = 0;\n                        object.longMarginRatio = 0;\n                        object.shortMarginRatio = 0;\n                        object.maxMarginSideAlgorithm = false;\n                        object.underlyingSymbol = \"\";\n                        object.strikePrice = 0;\n                        object.optionsType = options.enums === String ? \"O_Unknown\" : 0;\n                        object.underlyingMultiplier = 0;\n                        object.lastTradeDateOrContractMonth = \"\";\n                        object.maxMarketOrderVolume = 0;\n                        object.minMarketOrderVolume = 0;\n                        object.maxLimitOrderVolume = 0;\n                        object.minLimitOrderVolume = 0;\n                        object.combinationType = options.enums === String ? \"COMBT_Unknown\" : 0;\n                        object.gatewayId = \"\";\n                    }\n                    if (message.contractId != null && message.hasOwnProperty(\"contractId\"))\n                        object.contractId = message.contractId;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.fullName != null && message.hasOwnProperty(\"fullName\"))\n                        object.fullName = message.fullName;\n                    if (message.thirdPartyId != null && message.hasOwnProperty(\"thirdPartyId\"))\n                        object.thirdPartyId = message.thirdPartyId;\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n                        object.symbol = message.symbol;\n                    if (message.exchange != null && message.hasOwnProperty(\"exchange\"))\n                        object.exchange = options.enums === String ? $root.xyz.redtorch.pb.ExchangeEnum[message.exchange] : message.exchange;\n                    if (message.productClass != null && message.hasOwnProperty(\"productClass\"))\n                        object.productClass = options.enums === String ? $root.xyz.redtorch.pb.ProductClassEnum[message.productClass] : message.productClass;\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;\n                    if (message.multiplier != null && message.hasOwnProperty(\"multiplier\"))\n                        object.multiplier = options.json && !isFinite(message.multiplier) ? String(message.multiplier) : message.multiplier;\n                    if (message.priceTick != null && message.hasOwnProperty(\"priceTick\"))\n                        object.priceTick = options.json && !isFinite(message.priceTick) ? String(message.priceTick) : message.priceTick;\n                    if (message.longMarginRatio != null && message.hasOwnProperty(\"longMarginRatio\"))\n                        object.longMarginRatio = options.json && !isFinite(message.longMarginRatio) ? String(message.longMarginRatio) : message.longMarginRatio;\n                    if (message.shortMarginRatio != null && message.hasOwnProperty(\"shortMarginRatio\"))\n                        object.shortMarginRatio = options.json && !isFinite(message.shortMarginRatio) ? String(message.shortMarginRatio) : message.shortMarginRatio;\n                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty(\"maxMarginSideAlgorithm\"))\n                        object.maxMarginSideAlgorithm = message.maxMarginSideAlgorithm;\n                    if (message.underlyingSymbol != null && message.hasOwnProperty(\"underlyingSymbol\"))\n                        object.underlyingSymbol = message.underlyingSymbol;\n                    if (message.strikePrice != null && message.hasOwnProperty(\"strikePrice\"))\n                        object.strikePrice = options.json && !isFinite(message.strikePrice) ? String(message.strikePrice) : message.strikePrice;\n                    if (message.optionsType != null && message.hasOwnProperty(\"optionsType\"))\n                        object.optionsType = options.enums === String ? $root.xyz.redtorch.pb.OptionsTypeEnum[message.optionsType] : message.optionsType;\n                    if (message.underlyingMultiplier != null && message.hasOwnProperty(\"underlyingMultiplier\"))\n                        object.underlyingMultiplier = options.json && !isFinite(message.underlyingMultiplier) ? String(message.underlyingMultiplier) : message.underlyingMultiplier;\n                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty(\"lastTradeDateOrContractMonth\"))\n                        object.lastTradeDateOrContractMonth = message.lastTradeDateOrContractMonth;\n                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty(\"maxMarketOrderVolume\"))\n                        object.maxMarketOrderVolume = message.maxMarketOrderVolume;\n                    if (message.minMarketOrderVolume != null && message.hasOwnProperty(\"minMarketOrderVolume\"))\n                        object.minMarketOrderVolume = message.minMarketOrderVolume;\n                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty(\"maxLimitOrderVolume\"))\n                        object.maxLimitOrderVolume = message.maxLimitOrderVolume;\n                    if (message.minLimitOrderVolume != null && message.hasOwnProperty(\"minLimitOrderVolume\"))\n                        object.minLimitOrderVolume = message.minLimitOrderVolume;\n                    if (message.combinationType != null && message.hasOwnProperty(\"combinationType\"))\n                        object.combinationType = options.enums === String ? $root.xyz.redtorch.pb.CombinationTypeEnum[message.combinationType] : message.combinationType;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    return object;\n                };\n\n                /**\n                 * Converts this ContractField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.ContractField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ContractField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ContractField;\n            })();\n\n            pb.AccountField = (function() {\n\n                /**\n                 * Properties of an AccountField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IAccountField\n                 * @property {string|null} [accountId] AccountField accountId\n                 * @property {string|null} [code] AccountField code\n                 * @property {string|null} [name] AccountField name\n                 * @property {string|null} [holder] AccountField holder\n                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] AccountField currency\n                 * @property {number|null} [preBalance] AccountField preBalance\n                 * @property {number|null} [balance] AccountField balance\n                 * @property {number|null} [available] AccountField available\n                 * @property {number|null} [commission] AccountField commission\n                 * @property {number|null} [margin] AccountField margin\n                 * @property {number|null} [closeProfit] AccountField closeProfit\n                 * @property {number|null} [positionProfit] AccountField positionProfit\n                 * @property {number|null} [deposit] AccountField deposit\n                 * @property {number|null} [withdraw] AccountField withdraw\n                 * @property {string|null} [gatewayId] AccountField gatewayId\n                 * @property {number|Long|null} [localCreatedTimestamp] AccountField localCreatedTimestamp\n                 */\n\n                /**\n                 * Constructs a new AccountField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents an AccountField.\n                 * @implements IAccountField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IAccountField=} [properties] Properties to set\n                 */\n                function AccountField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * AccountField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.accountId = \"\";\n\n                /**\n                 * AccountField code.\n                 * @member {string} code\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.code = \"\";\n\n                /**\n                 * AccountField name.\n                 * @member {string} name\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.name = \"\";\n\n                /**\n                 * AccountField holder.\n                 * @member {string} holder\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.holder = \"\";\n\n                /**\n                 * AccountField currency.\n                 * @member {xyz.redtorch.pb.CurrencyEnum} currency\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.currency = 0;\n\n                /**\n                 * AccountField preBalance.\n                 * @member {number} preBalance\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.preBalance = 0;\n\n                /**\n                 * AccountField balance.\n                 * @member {number} balance\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.balance = 0;\n\n                /**\n                 * AccountField available.\n                 * @member {number} available\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.available = 0;\n\n                /**\n                 * AccountField commission.\n                 * @member {number} commission\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.commission = 0;\n\n                /**\n                 * AccountField margin.\n                 * @member {number} margin\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.margin = 0;\n\n                /**\n                 * AccountField closeProfit.\n                 * @member {number} closeProfit\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.closeProfit = 0;\n\n                /**\n                 * AccountField positionProfit.\n                 * @member {number} positionProfit\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.positionProfit = 0;\n\n                /**\n                 * AccountField deposit.\n                 * @member {number} deposit\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.deposit = 0;\n\n                /**\n                 * AccountField withdraw.\n                 * @member {number} withdraw\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.withdraw = 0;\n\n                /**\n                 * AccountField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.gatewayId = \"\";\n\n                /**\n                 * AccountField localCreatedTimestamp.\n                 * @member {number|Long} localCreatedTimestamp\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 */\n                AccountField.prototype.localCreatedTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new AccountField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.IAccountField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField instance\n                 */\n                AccountField.create = function create(properties) {\n                    return new AccountField(properties);\n                };\n\n                /**\n                 * Encodes the specified AccountField message. Does not implicitly {@link xyz.redtorch.pb.AccountField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.IAccountField} message AccountField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                AccountField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.accountId);\n                    if (message.code != null && message.hasOwnProperty(\"code\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n                    if (message.holder != null && message.hasOwnProperty(\"holder\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.holder);\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.currency);\n                    if (message.preBalance != null && message.hasOwnProperty(\"preBalance\"))\n                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.preBalance);\n                    if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.balance);\n                    if (message.available != null && message.hasOwnProperty(\"available\"))\n                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.available);\n                    if (message.commission != null && message.hasOwnProperty(\"commission\"))\n                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.commission);\n                    if (message.margin != null && message.hasOwnProperty(\"margin\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.margin);\n                    if (message.closeProfit != null && message.hasOwnProperty(\"closeProfit\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.closeProfit);\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.positionProfit);\n                    if (message.deposit != null && message.hasOwnProperty(\"deposit\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.deposit);\n                    if (message.withdraw != null && message.hasOwnProperty(\"withdraw\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.withdraw);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 15, wireType 2 =*/122).string(message.gatewayId);\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).fixed64(message.localCreatedTimestamp);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified AccountField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.AccountField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.IAccountField} message AccountField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                AccountField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an AccountField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                AccountField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.AccountField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.accountId = reader.string();\n                            break;\n                        case 2:\n                            message.code = reader.string();\n                            break;\n                        case 3:\n                            message.name = reader.string();\n                            break;\n                        case 4:\n                            message.holder = reader.string();\n                            break;\n                        case 5:\n                            message.currency = reader.int32();\n                            break;\n                        case 6:\n                            message.preBalance = reader.double();\n                            break;\n                        case 7:\n                            message.balance = reader.double();\n                            break;\n                        case 8:\n                            message.available = reader.double();\n                            break;\n                        case 9:\n                            message.commission = reader.double();\n                            break;\n                        case 10:\n                            message.margin = reader.double();\n                            break;\n                        case 11:\n                            message.closeProfit = reader.double();\n                            break;\n                        case 12:\n                            message.positionProfit = reader.double();\n                            break;\n                        case 13:\n                            message.deposit = reader.double();\n                            break;\n                        case 14:\n                            message.withdraw = reader.double();\n                            break;\n                        case 15:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 16:\n                            message.localCreatedTimestamp = reader.fixed64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an AccountField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                AccountField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an AccountField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                AccountField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.code != null && message.hasOwnProperty(\"code\"))\n                        if (!$util.isString(message.code))\n                            return \"code: string expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.holder != null && message.hasOwnProperty(\"holder\"))\n                        if (!$util.isString(message.holder))\n                            return \"holder: string expected\";\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        switch (message.currency) {\n                        default:\n                            return \"currency: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                            break;\n                        }\n                    if (message.preBalance != null && message.hasOwnProperty(\"preBalance\"))\n                        if (typeof message.preBalance !== \"number\")\n                            return \"preBalance: number expected\";\n                    if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                        if (typeof message.balance !== \"number\")\n                            return \"balance: number expected\";\n                    if (message.available != null && message.hasOwnProperty(\"available\"))\n                        if (typeof message.available !== \"number\")\n                            return \"available: number expected\";\n                    if (message.commission != null && message.hasOwnProperty(\"commission\"))\n                        if (typeof message.commission !== \"number\")\n                            return \"commission: number expected\";\n                    if (message.margin != null && message.hasOwnProperty(\"margin\"))\n                        if (typeof message.margin !== \"number\")\n                            return \"margin: number expected\";\n                    if (message.closeProfit != null && message.hasOwnProperty(\"closeProfit\"))\n                        if (typeof message.closeProfit !== \"number\")\n                            return \"closeProfit: number expected\";\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        if (typeof message.positionProfit !== \"number\")\n                            return \"positionProfit: number expected\";\n                    if (message.deposit != null && message.hasOwnProperty(\"deposit\"))\n                        if (typeof message.deposit !== \"number\")\n                            return \"deposit: number expected\";\n                    if (message.withdraw != null && message.hasOwnProperty(\"withdraw\"))\n                        if (typeof message.withdraw !== \"number\")\n                            return \"withdraw: number expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (!$util.isInteger(message.localCreatedTimestamp) && !(message.localCreatedTimestamp && $util.isInteger(message.localCreatedTimestamp.low) && $util.isInteger(message.localCreatedTimestamp.high)))\n                            return \"localCreatedTimestamp: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates an AccountField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.AccountField} AccountField\n                 */\n                AccountField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.AccountField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.AccountField();\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    if (object.code != null)\n                        message.code = String(object.code);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.holder != null)\n                        message.holder = String(object.holder);\n                    switch (object.currency) {\n                    case \"UnknownCurrency\":\n                    case 0:\n                        message.currency = 0;\n                        break;\n                    case \"USD\":\n                    case 1:\n                        message.currency = 1;\n                        break;\n                    case \"CNY\":\n                    case 2:\n                        message.currency = 2;\n                        break;\n                    case \"CNH\":\n                    case 3:\n                        message.currency = 3;\n                        break;\n                    case \"HKD\":\n                    case 4:\n                        message.currency = 4;\n                        break;\n                    case \"JPY\":\n                    case 5:\n                        message.currency = 5;\n                        break;\n                    case \"EUR\":\n                    case 6:\n                        message.currency = 6;\n                        break;\n                    case \"GBP\":\n                    case 7:\n                        message.currency = 7;\n                        break;\n                    case \"DEM\":\n                    case 8:\n                        message.currency = 8;\n                        break;\n                    case \"CHF\":\n                    case 9:\n                        message.currency = 9;\n                        break;\n                    case \"FRF\":\n                    case 10:\n                        message.currency = 10;\n                        break;\n                    case \"CAD\":\n                    case 11:\n                        message.currency = 11;\n                        break;\n                    case \"AUD\":\n                    case 12:\n                        message.currency = 12;\n                        break;\n                    case \"ATS\":\n                    case 13:\n                        message.currency = 13;\n                        break;\n                    case \"FIM\":\n                    case 14:\n                        message.currency = 14;\n                        break;\n                    case \"BEF\":\n                    case 15:\n                        message.currency = 15;\n                        break;\n                    case \"THB\":\n                    case 16:\n                        message.currency = 16;\n                        break;\n                    case \"IEP\":\n                    case 17:\n                        message.currency = 17;\n                        break;\n                    case \"ITL\":\n                    case 18:\n                        message.currency = 18;\n                        break;\n                    case \"LUF\":\n                    case 19:\n                        message.currency = 19;\n                        break;\n                    case \"NLG\":\n                    case 20:\n                        message.currency = 20;\n                        break;\n                    case \"PTE\":\n                    case 21:\n                        message.currency = 21;\n                        break;\n                    case \"ESP\":\n                    case 22:\n                        message.currency = 22;\n                        break;\n                    case \"IDR\":\n                    case 23:\n                        message.currency = 23;\n                        break;\n                    case \"MYR\":\n                    case 24:\n                        message.currency = 24;\n                        break;\n                    case \"NZD\":\n                    case 25:\n                        message.currency = 25;\n                        break;\n                    case \"PHP\":\n                    case 26:\n                        message.currency = 26;\n                        break;\n                    case \"SUR\":\n                    case 27:\n                        message.currency = 27;\n                        break;\n                    case \"SGD\":\n                    case 28:\n                        message.currency = 28;\n                        break;\n                    case \"KRW\":\n                    case 29:\n                        message.currency = 29;\n                        break;\n                    }\n                    if (object.preBalance != null)\n                        message.preBalance = Number(object.preBalance);\n                    if (object.balance != null)\n                        message.balance = Number(object.balance);\n                    if (object.available != null)\n                        message.available = Number(object.available);\n                    if (object.commission != null)\n                        message.commission = Number(object.commission);\n                    if (object.margin != null)\n                        message.margin = Number(object.margin);\n                    if (object.closeProfit != null)\n                        message.closeProfit = Number(object.closeProfit);\n                    if (object.positionProfit != null)\n                        message.positionProfit = Number(object.positionProfit);\n                    if (object.deposit != null)\n                        message.deposit = Number(object.deposit);\n                    if (object.withdraw != null)\n                        message.withdraw = Number(object.withdraw);\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.localCreatedTimestamp != null)\n                        if ($util.Long)\n                            (message.localCreatedTimestamp = $util.Long.fromValue(object.localCreatedTimestamp)).unsigned = false;\n                        else if (typeof object.localCreatedTimestamp === \"string\")\n                            message.localCreatedTimestamp = parseInt(object.localCreatedTimestamp, 10);\n                        else if (typeof object.localCreatedTimestamp === \"number\")\n                            message.localCreatedTimestamp = object.localCreatedTimestamp;\n                        else if (typeof object.localCreatedTimestamp === \"object\")\n                            message.localCreatedTimestamp = new $util.LongBits(object.localCreatedTimestamp.low >>> 0, object.localCreatedTimestamp.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an AccountField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @static\n                 * @param {xyz.redtorch.pb.AccountField} message AccountField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                AccountField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.accountId = \"\";\n                        object.code = \"\";\n                        object.name = \"\";\n                        object.holder = \"\";\n                        object.currency = options.enums === String ? \"UnknownCurrency\" : 0;\n                        object.preBalance = 0;\n                        object.balance = 0;\n                        object.available = 0;\n                        object.commission = 0;\n                        object.margin = 0;\n                        object.closeProfit = 0;\n                        object.positionProfit = 0;\n                        object.deposit = 0;\n                        object.withdraw = 0;\n                        object.gatewayId = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.localCreatedTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.localCreatedTimestamp = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.code != null && message.hasOwnProperty(\"code\"))\n                        object.code = message.code;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.holder != null && message.hasOwnProperty(\"holder\"))\n                        object.holder = message.holder;\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;\n                    if (message.preBalance != null && message.hasOwnProperty(\"preBalance\"))\n                        object.preBalance = options.json && !isFinite(message.preBalance) ? String(message.preBalance) : message.preBalance;\n                    if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                        object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;\n                    if (message.available != null && message.hasOwnProperty(\"available\"))\n                        object.available = options.json && !isFinite(message.available) ? String(message.available) : message.available;\n                    if (message.commission != null && message.hasOwnProperty(\"commission\"))\n                        object.commission = options.json && !isFinite(message.commission) ? String(message.commission) : message.commission;\n                    if (message.margin != null && message.hasOwnProperty(\"margin\"))\n                        object.margin = options.json && !isFinite(message.margin) ? String(message.margin) : message.margin;\n                    if (message.closeProfit != null && message.hasOwnProperty(\"closeProfit\"))\n                        object.closeProfit = options.json && !isFinite(message.closeProfit) ? String(message.closeProfit) : message.closeProfit;\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        object.positionProfit = options.json && !isFinite(message.positionProfit) ? String(message.positionProfit) : message.positionProfit;\n                    if (message.deposit != null && message.hasOwnProperty(\"deposit\"))\n                        object.deposit = options.json && !isFinite(message.deposit) ? String(message.deposit) : message.deposit;\n                    if (message.withdraw != null && message.hasOwnProperty(\"withdraw\"))\n                        object.withdraw = options.json && !isFinite(message.withdraw) ? String(message.withdraw) : message.withdraw;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (typeof message.localCreatedTimestamp === \"number\")\n                            object.localCreatedTimestamp = options.longs === String ? String(message.localCreatedTimestamp) : message.localCreatedTimestamp;\n                        else\n                            object.localCreatedTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.localCreatedTimestamp) : options.longs === Number ? new $util.LongBits(message.localCreatedTimestamp.low >>> 0, message.localCreatedTimestamp.high >>> 0).toNumber() : message.localCreatedTimestamp;\n                    return object;\n                };\n\n                /**\n                 * Converts this AccountField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.AccountField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                AccountField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return AccountField;\n            })();\n\n            pb.OrderField = (function() {\n\n                /**\n                 * Properties of an OrderField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IOrderField\n                 * @property {string|null} [originOrderId] OrderField originOrderId\n                 * @property {string|null} [orderId] OrderField orderId\n                 * @property {string|null} [adapterOrderId] OrderField adapterOrderId\n                 * @property {string|null} [accountId] OrderField accountId\n                 * @property {string|null} [orderLocalId] OrderField orderLocalId\n                 * @property {string|null} [brokerOrderSeq] OrderField brokerOrderSeq\n                 * @property {string|null} [orderSysId] OrderField orderSysId\n                 * @property {string|null} [sequenceNo] OrderField sequenceNo\n                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] OrderField direction\n                 * @property {xyz.redtorch.pb.OffsetFlagEnum|null} [offsetFlag] OrderField offsetFlag\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] OrderField hedgeFlag\n                 * @property {xyz.redtorch.pb.OrderPriceTypeEnum|null} [orderPriceType] OrderField orderPriceType\n                 * @property {xyz.redtorch.pb.OrderStatusEnum|null} [orderStatus] OrderField orderStatus\n                 * @property {number|null} [price] OrderField price\n                 * @property {number|null} [totalVolume] OrderField totalVolume\n                 * @property {number|null} [tradedVolume] OrderField tradedVolume\n                 * @property {xyz.redtorch.pb.TimeConditionEnum|null} [timeCondition] OrderField timeCondition\n                 * @property {string|null} [gtdDate] OrderField gtdDate\n                 * @property {xyz.redtorch.pb.VolumeConditionEnum|null} [volumeCondition] OrderField volumeCondition\n                 * @property {number|null} [minVolume] OrderField minVolume\n                 * @property {xyz.redtorch.pb.ContingentConditionEnum|null} [contingentCondition] OrderField contingentCondition\n                 * @property {number|null} [stopPrice] OrderField stopPrice\n                 * @property {xyz.redtorch.pb.ForceCloseReasonEnum|null} [forceCloseReason] OrderField forceCloseReason\n                 * @property {number|null} [autoSuspend] OrderField autoSuspend\n                 * @property {number|null} [userForceClose] OrderField userForceClose\n                 * @property {number|null} [swapOrder] OrderField swapOrder\n                 * @property {string|null} [tradingDay] OrderField tradingDay\n                 * @property {string|null} [orderDate] OrderField orderDate\n                 * @property {string|null} [orderTime] OrderField orderTime\n                 * @property {string|null} [activeTime] OrderField activeTime\n                 * @property {string|null} [suspendTime] OrderField suspendTime\n                 * @property {string|null} [cancelTime] OrderField cancelTime\n                 * @property {string|null} [updateTime] OrderField updateTime\n                 * @property {string|null} [statusMsg] OrderField statusMsg\n                 * @property {number|null} [frontId] OrderField frontId\n                 * @property {number|null} [sessionId] OrderField sessionId\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] OrderField contract\n                 * @property {string|null} [gatewayId] OrderField gatewayId\n                 * @property {xyz.redtorch.pb.OrderSubmitStatusEnum|null} [orderSubmitStatus] OrderField orderSubmitStatus\n                 */\n\n                /**\n                 * Constructs a new OrderField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents an OrderField.\n                 * @implements IOrderField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IOrderField=} [properties] Properties to set\n                 */\n                function OrderField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * OrderField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.originOrderId = \"\";\n\n                /**\n                 * OrderField orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderId = \"\";\n\n                /**\n                 * OrderField adapterOrderId.\n                 * @member {string} adapterOrderId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.adapterOrderId = \"\";\n\n                /**\n                 * OrderField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.accountId = \"\";\n\n                /**\n                 * OrderField orderLocalId.\n                 * @member {string} orderLocalId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderLocalId = \"\";\n\n                /**\n                 * OrderField brokerOrderSeq.\n                 * @member {string} brokerOrderSeq\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.brokerOrderSeq = \"\";\n\n                /**\n                 * OrderField orderSysId.\n                 * @member {string} orderSysId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderSysId = \"\";\n\n                /**\n                 * OrderField sequenceNo.\n                 * @member {string} sequenceNo\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.sequenceNo = \"\";\n\n                /**\n                 * OrderField direction.\n                 * @member {xyz.redtorch.pb.DirectionEnum} direction\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.direction = 0;\n\n                /**\n                 * OrderField offsetFlag.\n                 * @member {xyz.redtorch.pb.OffsetFlagEnum} offsetFlag\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.offsetFlag = 0;\n\n                /**\n                 * OrderField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.hedgeFlag = 0;\n\n                /**\n                 * OrderField orderPriceType.\n                 * @member {xyz.redtorch.pb.OrderPriceTypeEnum} orderPriceType\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderPriceType = 0;\n\n                /**\n                 * OrderField orderStatus.\n                 * @member {xyz.redtorch.pb.OrderStatusEnum} orderStatus\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderStatus = 0;\n\n                /**\n                 * OrderField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.price = 0;\n\n                /**\n                 * OrderField totalVolume.\n                 * @member {number} totalVolume\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.totalVolume = 0;\n\n                /**\n                 * OrderField tradedVolume.\n                 * @member {number} tradedVolume\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.tradedVolume = 0;\n\n                /**\n                 * OrderField timeCondition.\n                 * @member {xyz.redtorch.pb.TimeConditionEnum} timeCondition\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.timeCondition = 0;\n\n                /**\n                 * OrderField gtdDate.\n                 * @member {string} gtdDate\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.gtdDate = \"\";\n\n                /**\n                 * OrderField volumeCondition.\n                 * @member {xyz.redtorch.pb.VolumeConditionEnum} volumeCondition\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.volumeCondition = 0;\n\n                /**\n                 * OrderField minVolume.\n                 * @member {number} minVolume\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.minVolume = 0;\n\n                /**\n                 * OrderField contingentCondition.\n                 * @member {xyz.redtorch.pb.ContingentConditionEnum} contingentCondition\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.contingentCondition = 0;\n\n                /**\n                 * OrderField stopPrice.\n                 * @member {number} stopPrice\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.stopPrice = 0;\n\n                /**\n                 * OrderField forceCloseReason.\n                 * @member {xyz.redtorch.pb.ForceCloseReasonEnum} forceCloseReason\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.forceCloseReason = 0;\n\n                /**\n                 * OrderField autoSuspend.\n                 * @member {number} autoSuspend\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.autoSuspend = 0;\n\n                /**\n                 * OrderField userForceClose.\n                 * @member {number} userForceClose\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.userForceClose = 0;\n\n                /**\n                 * OrderField swapOrder.\n                 * @member {number} swapOrder\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.swapOrder = 0;\n\n                /**\n                 * OrderField tradingDay.\n                 * @member {string} tradingDay\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.tradingDay = \"\";\n\n                /**\n                 * OrderField orderDate.\n                 * @member {string} orderDate\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderDate = \"\";\n\n                /**\n                 * OrderField orderTime.\n                 * @member {string} orderTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderTime = \"\";\n\n                /**\n                 * OrderField activeTime.\n                 * @member {string} activeTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.activeTime = \"\";\n\n                /**\n                 * OrderField suspendTime.\n                 * @member {string} suspendTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.suspendTime = \"\";\n\n                /**\n                 * OrderField cancelTime.\n                 * @member {string} cancelTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.cancelTime = \"\";\n\n                /**\n                 * OrderField updateTime.\n                 * @member {string} updateTime\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.updateTime = \"\";\n\n                /**\n                 * OrderField statusMsg.\n                 * @member {string} statusMsg\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.statusMsg = \"\";\n\n                /**\n                 * OrderField frontId.\n                 * @member {number} frontId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.frontId = 0;\n\n                /**\n                 * OrderField sessionId.\n                 * @member {number} sessionId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.sessionId = 0;\n\n                /**\n                 * OrderField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.contract = null;\n\n                /**\n                 * OrderField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.gatewayId = \"\";\n\n                /**\n                 * OrderField orderSubmitStatus.\n                 * @member {xyz.redtorch.pb.OrderSubmitStatusEnum} orderSubmitStatus\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 */\n                OrderField.prototype.orderSubmitStatus = 0;\n\n                /**\n                 * Creates a new OrderField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.IOrderField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField instance\n                 */\n                OrderField.create = function create(properties) {\n                    return new OrderField(properties);\n                };\n\n                /**\n                 * Encodes the specified OrderField message. Does not implicitly {@link xyz.redtorch.pb.OrderField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.IOrderField} message OrderField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                OrderField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.originOrderId);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.adapterOrderId);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.accountId);\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.orderLocalId);\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.brokerOrderSeq);\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.orderSysId);\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.sequenceNo);\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.direction);\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.offsetFlag);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.hedgeFlag);\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.orderPriceType);\n                    if (message.orderStatus != null && message.hasOwnProperty(\"orderStatus\"))\n                        writer.uint32(/* id 13, wireType 0 =*/104).int32(message.orderStatus);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.price);\n                    if (message.totalVolume != null && message.hasOwnProperty(\"totalVolume\"))\n                        writer.uint32(/* id 15, wireType 5 =*/125).fixed32(message.totalVolume);\n                    if (message.tradedVolume != null && message.hasOwnProperty(\"tradedVolume\"))\n                        writer.uint32(/* id 16, wireType 5 =*/133).fixed32(message.tradedVolume);\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.timeCondition);\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        writer.uint32(/* id 18, wireType 2 =*/146).string(message.gtdDate);\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.volumeCondition);\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        writer.uint32(/* id 20, wireType 5 =*/165).fixed32(message.minVolume);\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        writer.uint32(/* id 21, wireType 0 =*/168).int32(message.contingentCondition);\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        writer.uint32(/* id 22, wireType 1 =*/177).double(message.stopPrice);\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        writer.uint32(/* id 23, wireType 0 =*/184).int32(message.forceCloseReason);\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        writer.uint32(/* id 24, wireType 5 =*/197).fixed32(message.autoSuspend);\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        writer.uint32(/* id 25, wireType 5 =*/205).fixed32(message.userForceClose);\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        writer.uint32(/* id 26, wireType 5 =*/213).fixed32(message.swapOrder);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 27, wireType 2 =*/218).string(message.tradingDay);\n                    if (message.orderDate != null && message.hasOwnProperty(\"orderDate\"))\n                        writer.uint32(/* id 28, wireType 2 =*/226).string(message.orderDate);\n                    if (message.orderTime != null && message.hasOwnProperty(\"orderTime\"))\n                        writer.uint32(/* id 29, wireType 2 =*/234).string(message.orderTime);\n                    if (message.activeTime != null && message.hasOwnProperty(\"activeTime\"))\n                        writer.uint32(/* id 30, wireType 2 =*/242).string(message.activeTime);\n                    if (message.suspendTime != null && message.hasOwnProperty(\"suspendTime\"))\n                        writer.uint32(/* id 31, wireType 2 =*/250).string(message.suspendTime);\n                    if (message.cancelTime != null && message.hasOwnProperty(\"cancelTime\"))\n                        writer.uint32(/* id 32, wireType 2 =*/258).string(message.cancelTime);\n                    if (message.updateTime != null && message.hasOwnProperty(\"updateTime\"))\n                        writer.uint32(/* id 33, wireType 2 =*/266).string(message.updateTime);\n                    if (message.statusMsg != null && message.hasOwnProperty(\"statusMsg\"))\n                        writer.uint32(/* id 34, wireType 2 =*/274).string(message.statusMsg);\n                    if (message.frontId != null && message.hasOwnProperty(\"frontId\"))\n                        writer.uint32(/* id 35, wireType 5 =*/285).fixed32(message.frontId);\n                    if (message.sessionId != null && message.hasOwnProperty(\"sessionId\"))\n                        writer.uint32(/* id 36, wireType 5 =*/293).fixed32(message.sessionId);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 38, wireType 2 =*/306).string(message.gatewayId);\n                    if (message.orderSubmitStatus != null && message.hasOwnProperty(\"orderSubmitStatus\"))\n                        writer.uint32(/* id 39, wireType 0 =*/312).int32(message.orderSubmitStatus);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified OrderField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.OrderField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.IOrderField} message OrderField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                OrderField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an OrderField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                OrderField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.OrderField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        case 3:\n                            message.adapterOrderId = reader.string();\n                            break;\n                        case 4:\n                            message.accountId = reader.string();\n                            break;\n                        case 5:\n                            message.orderLocalId = reader.string();\n                            break;\n                        case 6:\n                            message.brokerOrderSeq = reader.string();\n                            break;\n                        case 7:\n                            message.orderSysId = reader.string();\n                            break;\n                        case 8:\n                            message.sequenceNo = reader.string();\n                            break;\n                        case 9:\n                            message.direction = reader.int32();\n                            break;\n                        case 10:\n                            message.offsetFlag = reader.int32();\n                            break;\n                        case 11:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 12:\n                            message.orderPriceType = reader.int32();\n                            break;\n                        case 13:\n                            message.orderStatus = reader.int32();\n                            break;\n                        case 14:\n                            message.price = reader.double();\n                            break;\n                        case 15:\n                            message.totalVolume = reader.fixed32();\n                            break;\n                        case 16:\n                            message.tradedVolume = reader.fixed32();\n                            break;\n                        case 17:\n                            message.timeCondition = reader.int32();\n                            break;\n                        case 18:\n                            message.gtdDate = reader.string();\n                            break;\n                        case 19:\n                            message.volumeCondition = reader.int32();\n                            break;\n                        case 20:\n                            message.minVolume = reader.fixed32();\n                            break;\n                        case 21:\n                            message.contingentCondition = reader.int32();\n                            break;\n                        case 22:\n                            message.stopPrice = reader.double();\n                            break;\n                        case 23:\n                            message.forceCloseReason = reader.int32();\n                            break;\n                        case 24:\n                            message.autoSuspend = reader.fixed32();\n                            break;\n                        case 25:\n                            message.userForceClose = reader.fixed32();\n                            break;\n                        case 26:\n                            message.swapOrder = reader.fixed32();\n                            break;\n                        case 27:\n                            message.tradingDay = reader.string();\n                            break;\n                        case 28:\n                            message.orderDate = reader.string();\n                            break;\n                        case 29:\n                            message.orderTime = reader.string();\n                            break;\n                        case 30:\n                            message.activeTime = reader.string();\n                            break;\n                        case 31:\n                            message.suspendTime = reader.string();\n                            break;\n                        case 32:\n                            message.cancelTime = reader.string();\n                            break;\n                        case 33:\n                            message.updateTime = reader.string();\n                            break;\n                        case 34:\n                            message.statusMsg = reader.string();\n                            break;\n                        case 35:\n                            message.frontId = reader.fixed32();\n                            break;\n                        case 36:\n                            message.sessionId = reader.fixed32();\n                            break;\n                        case 37:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 38:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 39:\n                            message.orderSubmitStatus = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an OrderField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                OrderField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an OrderField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                OrderField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        if (!$util.isString(message.adapterOrderId))\n                            return \"adapterOrderId: string expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        if (!$util.isString(message.orderLocalId))\n                            return \"orderLocalId: string expected\";\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        if (!$util.isString(message.brokerOrderSeq))\n                            return \"brokerOrderSeq: string expected\";\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        if (!$util.isString(message.orderSysId))\n                            return \"orderSysId: string expected\";\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        if (!$util.isString(message.sequenceNo))\n                            return \"sequenceNo: string expected\";\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        switch (message.direction) {\n                        default:\n                            return \"direction: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        switch (message.offsetFlag) {\n                        default:\n                            return \"offsetFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        switch (message.orderPriceType) {\n                        default:\n                            return \"orderPriceType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                            break;\n                        }\n                    if (message.orderStatus != null && message.hasOwnProperty(\"orderStatus\"))\n                        switch (message.orderStatus) {\n                        default:\n                            return \"orderStatus: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                            break;\n                        }\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.totalVolume != null && message.hasOwnProperty(\"totalVolume\"))\n                        if (!$util.isInteger(message.totalVolume))\n                            return \"totalVolume: integer expected\";\n                    if (message.tradedVolume != null && message.hasOwnProperty(\"tradedVolume\"))\n                        if (!$util.isInteger(message.tradedVolume))\n                            return \"tradedVolume: integer expected\";\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        switch (message.timeCondition) {\n                        default:\n                            return \"timeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        if (!$util.isString(message.gtdDate))\n                            return \"gtdDate: string expected\";\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        switch (message.volumeCondition) {\n                        default:\n                            return \"volumeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        if (!$util.isInteger(message.minVolume))\n                            return \"minVolume: integer expected\";\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        switch (message.contingentCondition) {\n                        default:\n                            return \"contingentCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                            break;\n                        }\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        if (typeof message.stopPrice !== \"number\")\n                            return \"stopPrice: number expected\";\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        switch (message.forceCloseReason) {\n                        default:\n                            return \"forceCloseReason: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                            break;\n                        }\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        if (!$util.isInteger(message.autoSuspend))\n                            return \"autoSuspend: integer expected\";\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        if (!$util.isInteger(message.userForceClose))\n                            return \"userForceClose: integer expected\";\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        if (!$util.isInteger(message.swapOrder))\n                            return \"swapOrder: integer expected\";\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isString(message.tradingDay))\n                            return \"tradingDay: string expected\";\n                    if (message.orderDate != null && message.hasOwnProperty(\"orderDate\"))\n                        if (!$util.isString(message.orderDate))\n                            return \"orderDate: string expected\";\n                    if (message.orderTime != null && message.hasOwnProperty(\"orderTime\"))\n                        if (!$util.isString(message.orderTime))\n                            return \"orderTime: string expected\";\n                    if (message.activeTime != null && message.hasOwnProperty(\"activeTime\"))\n                        if (!$util.isString(message.activeTime))\n                            return \"activeTime: string expected\";\n                    if (message.suspendTime != null && message.hasOwnProperty(\"suspendTime\"))\n                        if (!$util.isString(message.suspendTime))\n                            return \"suspendTime: string expected\";\n                    if (message.cancelTime != null && message.hasOwnProperty(\"cancelTime\"))\n                        if (!$util.isString(message.cancelTime))\n                            return \"cancelTime: string expected\";\n                    if (message.updateTime != null && message.hasOwnProperty(\"updateTime\"))\n                        if (!$util.isString(message.updateTime))\n                            return \"updateTime: string expected\";\n                    if (message.statusMsg != null && message.hasOwnProperty(\"statusMsg\"))\n                        if (!$util.isString(message.statusMsg))\n                            return \"statusMsg: string expected\";\n                    if (message.frontId != null && message.hasOwnProperty(\"frontId\"))\n                        if (!$util.isInteger(message.frontId))\n                            return \"frontId: integer expected\";\n                    if (message.sessionId != null && message.hasOwnProperty(\"sessionId\"))\n                        if (!$util.isInteger(message.sessionId))\n                            return \"sessionId: integer expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.orderSubmitStatus != null && message.hasOwnProperty(\"orderSubmitStatus\"))\n                        switch (message.orderSubmitStatus) {\n                        default:\n                            return \"orderSubmitStatus: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates an OrderField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.OrderField} OrderField\n                 */\n                OrderField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.OrderField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.OrderField();\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    if (object.adapterOrderId != null)\n                        message.adapterOrderId = String(object.adapterOrderId);\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    if (object.orderLocalId != null)\n                        message.orderLocalId = String(object.orderLocalId);\n                    if (object.brokerOrderSeq != null)\n                        message.brokerOrderSeq = String(object.brokerOrderSeq);\n                    if (object.orderSysId != null)\n                        message.orderSysId = String(object.orderSysId);\n                    if (object.sequenceNo != null)\n                        message.sequenceNo = String(object.sequenceNo);\n                    switch (object.direction) {\n                    case \"D_Unknown\":\n                    case 0:\n                        message.direction = 0;\n                        break;\n                    case \"D_Buy\":\n                    case 1:\n                        message.direction = 1;\n                        break;\n                    case \"D_Sell\":\n                    case 2:\n                        message.direction = 2;\n                        break;\n                    }\n                    switch (object.offsetFlag) {\n                    case \"OF_Unknown\":\n                    case 0:\n                        message.offsetFlag = 0;\n                        break;\n                    case \"OF_Open\":\n                    case 1:\n                        message.offsetFlag = 1;\n                        break;\n                    case \"OF_Close\":\n                    case 2:\n                        message.offsetFlag = 2;\n                        break;\n                    case \"OF_ForceClose\":\n                    case 3:\n                        message.offsetFlag = 3;\n                        break;\n                    case \"OF_CloseToday\":\n                    case 4:\n                        message.offsetFlag = 4;\n                        break;\n                    case \"OF_CloseYesterday\":\n                    case 5:\n                        message.offsetFlag = 5;\n                        break;\n                    case \"OF_ForceOff\":\n                    case 6:\n                        message.offsetFlag = 6;\n                        break;\n                    case \"OF_LocalForceClose\":\n                    case 7:\n                        message.offsetFlag = 7;\n                        break;\n                    }\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    switch (object.orderPriceType) {\n                    case \"OPT_Unknown\":\n                    case 0:\n                        message.orderPriceType = 0;\n                        break;\n                    case \"OPT_AnyPrice\":\n                    case 1:\n                        message.orderPriceType = 1;\n                        break;\n                    case \"OPT_LimitPrice\":\n                    case 2:\n                        message.orderPriceType = 2;\n                        break;\n                    case \"OPT_BestPrice\":\n                    case 3:\n                        message.orderPriceType = 3;\n                        break;\n                    case \"OPT_LastPrice\":\n                    case 4:\n                        message.orderPriceType = 4;\n                        break;\n                    case \"OPT_LastPricePlusOneTicks\":\n                    case 5:\n                        message.orderPriceType = 5;\n                        break;\n                    case \"OPT_LastPricePlusTwoTicks\":\n                    case 6:\n                        message.orderPriceType = 6;\n                        break;\n                    case \"OPT_LastPricePlusThreeTicks\":\n                    case 7:\n                        message.orderPriceType = 7;\n                        break;\n                    case \"OPT_AskPrice1\":\n                    case 8:\n                        message.orderPriceType = 8;\n                        break;\n                    case \"OPT_AskPrice1PlusOneTicks\":\n                    case 9:\n                        message.orderPriceType = 9;\n                        break;\n                    case \"OPT_AskPrice1PlusTwoTicks\":\n                    case 10:\n                        message.orderPriceType = 10;\n                        break;\n                    case \"OPT_AskPrice1PlusThreeTicks\":\n                    case 11:\n                        message.orderPriceType = 11;\n                        break;\n                    case \"OPT_BidPrice1\":\n                    case 12:\n                        message.orderPriceType = 12;\n                        break;\n                    case \"OPT_BidPrice1PlusOneTicks\":\n                    case 13:\n                        message.orderPriceType = 13;\n                        break;\n                    case \"OPT_BidPrice1PlusTwoTicks\":\n                    case 14:\n                        message.orderPriceType = 14;\n                        break;\n                    case \"OPT_BidPrice1PlusThreeTicks\":\n                    case 15:\n                        message.orderPriceType = 15;\n                        break;\n                    case \"OPT_FiveLevelPrice\":\n                    case 16:\n                        message.orderPriceType = 16;\n                        break;\n                    }\n                    switch (object.orderStatus) {\n                    case \"OS_Unknown\":\n                    case 0:\n                        message.orderStatus = 0;\n                        break;\n                    case \"OS_AllTraded\":\n                    case 1:\n                        message.orderStatus = 1;\n                        break;\n                    case \"OS_PartTradedQueueing\":\n                    case 2:\n                        message.orderStatus = 2;\n                        break;\n                    case \"OS_PartTradedNotQueueing\":\n                    case 3:\n                        message.orderStatus = 3;\n                        break;\n                    case \"OS_NoTradeQueueing\":\n                    case 4:\n                        message.orderStatus = 4;\n                        break;\n                    case \"OS_NoTradeNotQueueing\":\n                    case 5:\n                        message.orderStatus = 5;\n                        break;\n                    case \"OS_Canceled\":\n                    case 6:\n                        message.orderStatus = 6;\n                        break;\n                    case \"OS_NotTouched\":\n                    case 7:\n                        message.orderStatus = 7;\n                        break;\n                    case \"OS_Touched\":\n                    case 8:\n                        message.orderStatus = 8;\n                        break;\n                    case \"OS_Rejected\":\n                    case 9:\n                        message.orderStatus = 9;\n                        break;\n                    }\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    if (object.totalVolume != null)\n                        message.totalVolume = object.totalVolume >>> 0;\n                    if (object.tradedVolume != null)\n                        message.tradedVolume = object.tradedVolume >>> 0;\n                    switch (object.timeCondition) {\n                    case \"TC_Unknown\":\n                    case 0:\n                        message.timeCondition = 0;\n                        break;\n                    case \"TC_IOC\":\n                    case 1:\n                        message.timeCondition = 1;\n                        break;\n                    case \"TC_GFS\":\n                    case 2:\n                        message.timeCondition = 2;\n                        break;\n                    case \"TC_GFD\":\n                    case 3:\n                        message.timeCondition = 3;\n                        break;\n                    case \"TC_GTD\":\n                    case 4:\n                        message.timeCondition = 4;\n                        break;\n                    case \"TC_GTC\":\n                    case 5:\n                        message.timeCondition = 5;\n                        break;\n                    case \"TC_GFA\":\n                    case 6:\n                        message.timeCondition = 6;\n                        break;\n                    }\n                    if (object.gtdDate != null)\n                        message.gtdDate = String(object.gtdDate);\n                    switch (object.volumeCondition) {\n                    case \"VC_Unknown\":\n                    case 0:\n                        message.volumeCondition = 0;\n                        break;\n                    case \"VC_AV\":\n                    case 1:\n                        message.volumeCondition = 1;\n                        break;\n                    case \"VC_MV\":\n                    case 2:\n                        message.volumeCondition = 2;\n                        break;\n                    case \"VC_CV\":\n                    case 3:\n                        message.volumeCondition = 3;\n                        break;\n                    }\n                    if (object.minVolume != null)\n                        message.minVolume = object.minVolume >>> 0;\n                    switch (object.contingentCondition) {\n                    case \"CC_Unknown\":\n                    case 0:\n                        message.contingentCondition = 0;\n                        break;\n                    case \"CC_Immediately\":\n                    case 1:\n                        message.contingentCondition = 1;\n                        break;\n                    case \"CC_Touch\":\n                    case 2:\n                        message.contingentCondition = 2;\n                        break;\n                    case \"CC_TouchProfit\":\n                    case 3:\n                        message.contingentCondition = 3;\n                        break;\n                    case \"CC_ParkedOrder\":\n                    case 4:\n                        message.contingentCondition = 4;\n                        break;\n                    case \"CC_LastPriceGreaterThanStopPrice\":\n                    case 5:\n                        message.contingentCondition = 5;\n                        break;\n                    case \"CC_LastPriceGreaterEqualStopPrice\":\n                    case 6:\n                        message.contingentCondition = 6;\n                        break;\n                    case \"CC_LastPriceLesserThanStopPrice\":\n                    case 7:\n                        message.contingentCondition = 7;\n                        break;\n                    case \"CC_LastPriceLesserEqualStopPrice\":\n                    case 8:\n                        message.contingentCondition = 8;\n                        break;\n                    case \"CC_AskPriceGreaterThanStopPrice\":\n                    case 9:\n                        message.contingentCondition = 9;\n                        break;\n                    case \"CC_AskPriceGreaterEqualStopPrice\":\n                    case 10:\n                        message.contingentCondition = 10;\n                        break;\n                    case \"CC_AskPriceLesserThanStopPrice\":\n                    case 11:\n                        message.contingentCondition = 11;\n                        break;\n                    case \"CC_AskPriceLesserEqualStopPrice\":\n                    case 12:\n                        message.contingentCondition = 12;\n                        break;\n                    case \"CC_BidPriceGreaterThanStopPrice\":\n                    case 13:\n                        message.contingentCondition = 13;\n                        break;\n                    case \"CC_BidPriceGreaterEqualStopPrice\":\n                    case 14:\n                        message.contingentCondition = 14;\n                        break;\n                    case \"CC_BidPriceLesserThanStopPrice\":\n                    case 15:\n                        message.contingentCondition = 15;\n                        break;\n                    case \"CC_BidPriceLesserEqualStopPrice\":\n                    case 16:\n                        message.contingentCondition = 16;\n                        break;\n                    case \"CC_LocalLastPriceLesserEqualStopPrice\":\n                    case 17:\n                        message.contingentCondition = 17;\n                        break;\n                    case \"CC_LocalLastPriceGreaterEqualStopPrice\":\n                    case 18:\n                        message.contingentCondition = 18;\n                        break;\n                    }\n                    if (object.stopPrice != null)\n                        message.stopPrice = Number(object.stopPrice);\n                    switch (object.forceCloseReason) {\n                    case \"FCR_Unknown\":\n                    case 0:\n                        message.forceCloseReason = 0;\n                        break;\n                    case \"FCR_NotForceClose\":\n                    case 1:\n                        message.forceCloseReason = 1;\n                        break;\n                    case \"FCR_LackDeposit\":\n                    case 2:\n                        message.forceCloseReason = 2;\n                        break;\n                    case \"FCR_ClientOverPositionLimit\":\n                    case 3:\n                        message.forceCloseReason = 3;\n                        break;\n                    case \"FCR_MemberOverPositionLimit\":\n                    case 4:\n                        message.forceCloseReason = 4;\n                        break;\n                    case \"FCR_NotMultiple\":\n                    case 5:\n                        message.forceCloseReason = 5;\n                        break;\n                    case \"FCR_Violation\":\n                    case 6:\n                        message.forceCloseReason = 6;\n                        break;\n                    case \"FCR_Other\":\n                    case 7:\n                        message.forceCloseReason = 7;\n                        break;\n                    case \"FCR_PersonDeliver\":\n                    case 8:\n                        message.forceCloseReason = 8;\n                        break;\n                    }\n                    if (object.autoSuspend != null)\n                        message.autoSuspend = object.autoSuspend >>> 0;\n                    if (object.userForceClose != null)\n                        message.userForceClose = object.userForceClose >>> 0;\n                    if (object.swapOrder != null)\n                        message.swapOrder = object.swapOrder >>> 0;\n                    if (object.tradingDay != null)\n                        message.tradingDay = String(object.tradingDay);\n                    if (object.orderDate != null)\n                        message.orderDate = String(object.orderDate);\n                    if (object.orderTime != null)\n                        message.orderTime = String(object.orderTime);\n                    if (object.activeTime != null)\n                        message.activeTime = String(object.activeTime);\n                    if (object.suspendTime != null)\n                        message.suspendTime = String(object.suspendTime);\n                    if (object.cancelTime != null)\n                        message.cancelTime = String(object.cancelTime);\n                    if (object.updateTime != null)\n                        message.updateTime = String(object.updateTime);\n                    if (object.statusMsg != null)\n                        message.statusMsg = String(object.statusMsg);\n                    if (object.frontId != null)\n                        message.frontId = object.frontId >>> 0;\n                    if (object.sessionId != null)\n                        message.sessionId = object.sessionId >>> 0;\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.OrderField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    switch (object.orderSubmitStatus) {\n                    case \"OSS_Unknown\":\n                    case 0:\n                        message.orderSubmitStatus = 0;\n                        break;\n                    case \"OSS_InsertSubmitted\":\n                    case 1:\n                        message.orderSubmitStatus = 1;\n                        break;\n                    case \"OSS_CancelSubmitted\":\n                    case 2:\n                        message.orderSubmitStatus = 2;\n                        break;\n                    case \"OSS_ModifySubmitted\":\n                    case 3:\n                        message.orderSubmitStatus = 3;\n                        break;\n                    case \"OSS_Accepted\":\n                    case 4:\n                        message.orderSubmitStatus = 4;\n                        break;\n                    case \"OSS_InsertRejected\":\n                    case 5:\n                        message.orderSubmitStatus = 5;\n                        break;\n                    case \"OSS_CancelRejected\":\n                    case 6:\n                        message.orderSubmitStatus = 6;\n                        break;\n                    case \"OSS_ModifyRejected\":\n                    case 7:\n                        message.orderSubmitStatus = 7;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an OrderField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @static\n                 * @param {xyz.redtorch.pb.OrderField} message OrderField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                OrderField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originOrderId = \"\";\n                        object.orderId = \"\";\n                        object.adapterOrderId = \"\";\n                        object.accountId = \"\";\n                        object.orderLocalId = \"\";\n                        object.brokerOrderSeq = \"\";\n                        object.orderSysId = \"\";\n                        object.sequenceNo = \"\";\n                        object.direction = options.enums === String ? \"D_Unknown\" : 0;\n                        object.offsetFlag = options.enums === String ? \"OF_Unknown\" : 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.orderPriceType = options.enums === String ? \"OPT_Unknown\" : 0;\n                        object.orderStatus = options.enums === String ? \"OS_Unknown\" : 0;\n                        object.price = 0;\n                        object.totalVolume = 0;\n                        object.tradedVolume = 0;\n                        object.timeCondition = options.enums === String ? \"TC_Unknown\" : 0;\n                        object.gtdDate = \"\";\n                        object.volumeCondition = options.enums === String ? \"VC_Unknown\" : 0;\n                        object.minVolume = 0;\n                        object.contingentCondition = options.enums === String ? \"CC_Unknown\" : 0;\n                        object.stopPrice = 0;\n                        object.forceCloseReason = options.enums === String ? \"FCR_Unknown\" : 0;\n                        object.autoSuspend = 0;\n                        object.userForceClose = 0;\n                        object.swapOrder = 0;\n                        object.tradingDay = \"\";\n                        object.orderDate = \"\";\n                        object.orderTime = \"\";\n                        object.activeTime = \"\";\n                        object.suspendTime = \"\";\n                        object.cancelTime = \"\";\n                        object.updateTime = \"\";\n                        object.statusMsg = \"\";\n                        object.frontId = 0;\n                        object.sessionId = 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                        object.orderSubmitStatus = options.enums === String ? \"OSS_Unknown\" : 0;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        object.adapterOrderId = message.adapterOrderId;\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        object.orderLocalId = message.orderLocalId;\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        object.brokerOrderSeq = message.brokerOrderSeq;\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        object.orderSysId = message.orderSysId;\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        object.sequenceNo = message.sequenceNo;\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        object.offsetFlag = options.enums === String ? $root.xyz.redtorch.pb.OffsetFlagEnum[message.offsetFlag] : message.offsetFlag;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        object.orderPriceType = options.enums === String ? $root.xyz.redtorch.pb.OrderPriceTypeEnum[message.orderPriceType] : message.orderPriceType;\n                    if (message.orderStatus != null && message.hasOwnProperty(\"orderStatus\"))\n                        object.orderStatus = options.enums === String ? $root.xyz.redtorch.pb.OrderStatusEnum[message.orderStatus] : message.orderStatus;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.totalVolume != null && message.hasOwnProperty(\"totalVolume\"))\n                        object.totalVolume = message.totalVolume;\n                    if (message.tradedVolume != null && message.hasOwnProperty(\"tradedVolume\"))\n                        object.tradedVolume = message.tradedVolume;\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        object.timeCondition = options.enums === String ? $root.xyz.redtorch.pb.TimeConditionEnum[message.timeCondition] : message.timeCondition;\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        object.gtdDate = message.gtdDate;\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        object.volumeCondition = options.enums === String ? $root.xyz.redtorch.pb.VolumeConditionEnum[message.volumeCondition] : message.volumeCondition;\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        object.minVolume = message.minVolume;\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        object.contingentCondition = options.enums === String ? $root.xyz.redtorch.pb.ContingentConditionEnum[message.contingentCondition] : message.contingentCondition;\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        object.stopPrice = options.json && !isFinite(message.stopPrice) ? String(message.stopPrice) : message.stopPrice;\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        object.forceCloseReason = options.enums === String ? $root.xyz.redtorch.pb.ForceCloseReasonEnum[message.forceCloseReason] : message.forceCloseReason;\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        object.autoSuspend = message.autoSuspend;\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        object.userForceClose = message.userForceClose;\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        object.swapOrder = message.swapOrder;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.orderDate != null && message.hasOwnProperty(\"orderDate\"))\n                        object.orderDate = message.orderDate;\n                    if (message.orderTime != null && message.hasOwnProperty(\"orderTime\"))\n                        object.orderTime = message.orderTime;\n                    if (message.activeTime != null && message.hasOwnProperty(\"activeTime\"))\n                        object.activeTime = message.activeTime;\n                    if (message.suspendTime != null && message.hasOwnProperty(\"suspendTime\"))\n                        object.suspendTime = message.suspendTime;\n                    if (message.cancelTime != null && message.hasOwnProperty(\"cancelTime\"))\n                        object.cancelTime = message.cancelTime;\n                    if (message.updateTime != null && message.hasOwnProperty(\"updateTime\"))\n                        object.updateTime = message.updateTime;\n                    if (message.statusMsg != null && message.hasOwnProperty(\"statusMsg\"))\n                        object.statusMsg = message.statusMsg;\n                    if (message.frontId != null && message.hasOwnProperty(\"frontId\"))\n                        object.frontId = message.frontId;\n                    if (message.sessionId != null && message.hasOwnProperty(\"sessionId\"))\n                        object.sessionId = message.sessionId;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.orderSubmitStatus != null && message.hasOwnProperty(\"orderSubmitStatus\"))\n                        object.orderSubmitStatus = options.enums === String ? $root.xyz.redtorch.pb.OrderSubmitStatusEnum[message.orderSubmitStatus] : message.orderSubmitStatus;\n                    return object;\n                };\n\n                /**\n                 * Converts this OrderField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.OrderField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                OrderField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return OrderField;\n            })();\n\n            pb.TradeField = (function() {\n\n                /**\n                 * Properties of a TradeField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ITradeField\n                 * @property {string|null} [tradeId] TradeField tradeId\n                 * @property {string|null} [adapterTradeId] TradeField adapterTradeId\n                 * @property {string|null} [originOrderId] TradeField originOrderId\n                 * @property {string|null} [orderId] TradeField orderId\n                 * @property {string|null} [adapterOrderId] TradeField adapterOrderId\n                 * @property {string|null} [orderLocalId] TradeField orderLocalId\n                 * @property {string|null} [brokerOrderSeq] TradeField brokerOrderSeq\n                 * @property {string|null} [orderSysId] TradeField orderSysId\n                 * @property {string|null} [settlementId] TradeField settlementId\n                 * @property {string|null} [sequenceNo] TradeField sequenceNo\n                 * @property {string|null} [accountId] TradeField accountId\n                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] TradeField direction\n                 * @property {xyz.redtorch.pb.OffsetFlagEnum|null} [offsetFlag] TradeField offsetFlag\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] TradeField hedgeFlag\n                 * @property {number|null} [price] TradeField price\n                 * @property {number|null} [volume] TradeField volume\n                 * @property {xyz.redtorch.pb.TradeTypeEnum|null} [tradeType] TradeField tradeType\n                 * @property {xyz.redtorch.pb.PriceSourceEnum|null} [priceSource] TradeField priceSource\n                 * @property {string|null} [tradingDay] TradeField tradingDay\n                 * @property {string|null} [tradeDate] TradeField tradeDate\n                 * @property {string|null} [tradeTime] TradeField tradeTime\n                 * @property {number|Long|null} [tradeTimestamp] TradeField tradeTimestamp\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] TradeField contract\n                 * @property {string|null} [gatewayId] TradeField gatewayId\n                 */\n\n                /**\n                 * Constructs a new TradeField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a TradeField.\n                 * @implements ITradeField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ITradeField=} [properties] Properties to set\n                 */\n                function TradeField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TradeField tradeId.\n                 * @member {string} tradeId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeId = \"\";\n\n                /**\n                 * TradeField adapterTradeId.\n                 * @member {string} adapterTradeId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.adapterTradeId = \"\";\n\n                /**\n                 * TradeField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.originOrderId = \"\";\n\n                /**\n                 * TradeField orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.orderId = \"\";\n\n                /**\n                 * TradeField adapterOrderId.\n                 * @member {string} adapterOrderId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.adapterOrderId = \"\";\n\n                /**\n                 * TradeField orderLocalId.\n                 * @member {string} orderLocalId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.orderLocalId = \"\";\n\n                /**\n                 * TradeField brokerOrderSeq.\n                 * @member {string} brokerOrderSeq\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.brokerOrderSeq = \"\";\n\n                /**\n                 * TradeField orderSysId.\n                 * @member {string} orderSysId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.orderSysId = \"\";\n\n                /**\n                 * TradeField settlementId.\n                 * @member {string} settlementId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.settlementId = \"\";\n\n                /**\n                 * TradeField sequenceNo.\n                 * @member {string} sequenceNo\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.sequenceNo = \"\";\n\n                /**\n                 * TradeField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.accountId = \"\";\n\n                /**\n                 * TradeField direction.\n                 * @member {xyz.redtorch.pb.DirectionEnum} direction\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.direction = 0;\n\n                /**\n                 * TradeField offsetFlag.\n                 * @member {xyz.redtorch.pb.OffsetFlagEnum} offsetFlag\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.offsetFlag = 0;\n\n                /**\n                 * TradeField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.hedgeFlag = 0;\n\n                /**\n                 * TradeField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.price = 0;\n\n                /**\n                 * TradeField volume.\n                 * @member {number} volume\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.volume = 0;\n\n                /**\n                 * TradeField tradeType.\n                 * @member {xyz.redtorch.pb.TradeTypeEnum} tradeType\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeType = 0;\n\n                /**\n                 * TradeField priceSource.\n                 * @member {xyz.redtorch.pb.PriceSourceEnum} priceSource\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.priceSource = 0;\n\n                /**\n                 * TradeField tradingDay.\n                 * @member {string} tradingDay\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradingDay = \"\";\n\n                /**\n                 * TradeField tradeDate.\n                 * @member {string} tradeDate\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeDate = \"\";\n\n                /**\n                 * TradeField tradeTime.\n                 * @member {string} tradeTime\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeTime = \"\";\n\n                /**\n                 * TradeField tradeTimestamp.\n                 * @member {number|Long} tradeTimestamp\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.tradeTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TradeField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.contract = null;\n\n                /**\n                 * TradeField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 */\n                TradeField.prototype.gatewayId = \"\";\n\n                /**\n                 * Creates a new TradeField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITradeField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField instance\n                 */\n                TradeField.create = function create(properties) {\n                    return new TradeField(properties);\n                };\n\n                /**\n                 * Encodes the specified TradeField message. Does not implicitly {@link xyz.redtorch.pb.TradeField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITradeField} message TradeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TradeField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.tradeId);\n                    if (message.adapterTradeId != null && message.hasOwnProperty(\"adapterTradeId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.adapterTradeId);\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originOrderId);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderId);\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.adapterOrderId);\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.orderLocalId);\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.brokerOrderSeq);\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.orderSysId);\n                    if (message.settlementId != null && message.hasOwnProperty(\"settlementId\"))\n                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.settlementId);\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.sequenceNo);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.accountId);\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.direction);\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        writer.uint32(/* id 13, wireType 0 =*/104).int32(message.offsetFlag);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.hedgeFlag);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.price);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 16, wireType 5 =*/133).fixed32(message.volume);\n                    if (message.tradeType != null && message.hasOwnProperty(\"tradeType\"))\n                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.tradeType);\n                    if (message.priceSource != null && message.hasOwnProperty(\"priceSource\"))\n                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.priceSource);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 19, wireType 2 =*/154).string(message.tradingDay);\n                    if (message.tradeDate != null && message.hasOwnProperty(\"tradeDate\"))\n                        writer.uint32(/* id 20, wireType 2 =*/162).string(message.tradeDate);\n                    if (message.tradeTime != null && message.hasOwnProperty(\"tradeTime\"))\n                        writer.uint32(/* id 21, wireType 2 =*/170).string(message.tradeTime);\n                    if (message.tradeTimestamp != null && message.hasOwnProperty(\"tradeTimestamp\"))\n                        writer.uint32(/* id 22, wireType 1 =*/177).fixed64(message.tradeTimestamp);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 24, wireType 2 =*/194).string(message.gatewayId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TradeField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.TradeField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITradeField} message TradeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TradeField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TradeField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TradeField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.TradeField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.tradeId = reader.string();\n                            break;\n                        case 2:\n                            message.adapterTradeId = reader.string();\n                            break;\n                        case 3:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 4:\n                            message.orderId = reader.string();\n                            break;\n                        case 5:\n                            message.adapterOrderId = reader.string();\n                            break;\n                        case 6:\n                            message.orderLocalId = reader.string();\n                            break;\n                        case 7:\n                            message.brokerOrderSeq = reader.string();\n                            break;\n                        case 8:\n                            message.orderSysId = reader.string();\n                            break;\n                        case 9:\n                            message.settlementId = reader.string();\n                            break;\n                        case 10:\n                            message.sequenceNo = reader.string();\n                            break;\n                        case 11:\n                            message.accountId = reader.string();\n                            break;\n                        case 12:\n                            message.direction = reader.int32();\n                            break;\n                        case 13:\n                            message.offsetFlag = reader.int32();\n                            break;\n                        case 14:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 15:\n                            message.price = reader.double();\n                            break;\n                        case 16:\n                            message.volume = reader.fixed32();\n                            break;\n                        case 17:\n                            message.tradeType = reader.int32();\n                            break;\n                        case 18:\n                            message.priceSource = reader.int32();\n                            break;\n                        case 19:\n                            message.tradingDay = reader.string();\n                            break;\n                        case 20:\n                            message.tradeDate = reader.string();\n                            break;\n                        case 21:\n                            message.tradeTime = reader.string();\n                            break;\n                        case 22:\n                            message.tradeTimestamp = reader.fixed64();\n                            break;\n                        case 23:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 24:\n                            message.gatewayId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TradeField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TradeField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TradeField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TradeField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        if (!$util.isString(message.tradeId))\n                            return \"tradeId: string expected\";\n                    if (message.adapterTradeId != null && message.hasOwnProperty(\"adapterTradeId\"))\n                        if (!$util.isString(message.adapterTradeId))\n                            return \"adapterTradeId: string expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        if (!$util.isString(message.adapterOrderId))\n                            return \"adapterOrderId: string expected\";\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        if (!$util.isString(message.orderLocalId))\n                            return \"orderLocalId: string expected\";\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        if (!$util.isString(message.brokerOrderSeq))\n                            return \"brokerOrderSeq: string expected\";\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        if (!$util.isString(message.orderSysId))\n                            return \"orderSysId: string expected\";\n                    if (message.settlementId != null && message.hasOwnProperty(\"settlementId\"))\n                        if (!$util.isString(message.settlementId))\n                            return \"settlementId: string expected\";\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        if (!$util.isString(message.sequenceNo))\n                            return \"sequenceNo: string expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        switch (message.direction) {\n                        default:\n                            return \"direction: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        switch (message.offsetFlag) {\n                        default:\n                            return \"offsetFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume))\n                            return \"volume: integer expected\";\n                    if (message.tradeType != null && message.hasOwnProperty(\"tradeType\"))\n                        switch (message.tradeType) {\n                        default:\n                            return \"tradeType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.priceSource != null && message.hasOwnProperty(\"priceSource\"))\n                        switch (message.priceSource) {\n                        default:\n                            return \"priceSource: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isString(message.tradingDay))\n                            return \"tradingDay: string expected\";\n                    if (message.tradeDate != null && message.hasOwnProperty(\"tradeDate\"))\n                        if (!$util.isString(message.tradeDate))\n                            return \"tradeDate: string expected\";\n                    if (message.tradeTime != null && message.hasOwnProperty(\"tradeTime\"))\n                        if (!$util.isString(message.tradeTime))\n                            return \"tradeTime: string expected\";\n                    if (message.tradeTimestamp != null && message.hasOwnProperty(\"tradeTimestamp\"))\n                        if (!$util.isInteger(message.tradeTimestamp) && !(message.tradeTimestamp && $util.isInteger(message.tradeTimestamp.low) && $util.isInteger(message.tradeTimestamp.high)))\n                            return \"tradeTimestamp: integer|Long expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TradeField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.TradeField} TradeField\n                 */\n                TradeField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.TradeField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.TradeField();\n                    if (object.tradeId != null)\n                        message.tradeId = String(object.tradeId);\n                    if (object.adapterTradeId != null)\n                        message.adapterTradeId = String(object.adapterTradeId);\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    if (object.adapterOrderId != null)\n                        message.adapterOrderId = String(object.adapterOrderId);\n                    if (object.orderLocalId != null)\n                        message.orderLocalId = String(object.orderLocalId);\n                    if (object.brokerOrderSeq != null)\n                        message.brokerOrderSeq = String(object.brokerOrderSeq);\n                    if (object.orderSysId != null)\n                        message.orderSysId = String(object.orderSysId);\n                    if (object.settlementId != null)\n                        message.settlementId = String(object.settlementId);\n                    if (object.sequenceNo != null)\n                        message.sequenceNo = String(object.sequenceNo);\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    switch (object.direction) {\n                    case \"D_Unknown\":\n                    case 0:\n                        message.direction = 0;\n                        break;\n                    case \"D_Buy\":\n                    case 1:\n                        message.direction = 1;\n                        break;\n                    case \"D_Sell\":\n                    case 2:\n                        message.direction = 2;\n                        break;\n                    }\n                    switch (object.offsetFlag) {\n                    case \"OF_Unknown\":\n                    case 0:\n                        message.offsetFlag = 0;\n                        break;\n                    case \"OF_Open\":\n                    case 1:\n                        message.offsetFlag = 1;\n                        break;\n                    case \"OF_Close\":\n                    case 2:\n                        message.offsetFlag = 2;\n                        break;\n                    case \"OF_ForceClose\":\n                    case 3:\n                        message.offsetFlag = 3;\n                        break;\n                    case \"OF_CloseToday\":\n                    case 4:\n                        message.offsetFlag = 4;\n                        break;\n                    case \"OF_CloseYesterday\":\n                    case 5:\n                        message.offsetFlag = 5;\n                        break;\n                    case \"OF_ForceOff\":\n                    case 6:\n                        message.offsetFlag = 6;\n                        break;\n                    case \"OF_LocalForceClose\":\n                    case 7:\n                        message.offsetFlag = 7;\n                        break;\n                    }\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    if (object.volume != null)\n                        message.volume = object.volume >>> 0;\n                    switch (object.tradeType) {\n                    case \"TT_Unknown\":\n                    case 0:\n                        message.tradeType = 0;\n                        break;\n                    case \"TT_SplitCombination\":\n                    case 1:\n                        message.tradeType = 1;\n                        break;\n                    case \"TT_Common\":\n                    case 2:\n                        message.tradeType = 2;\n                        break;\n                    case \"TT_OptionsExecution\":\n                    case 3:\n                        message.tradeType = 3;\n                        break;\n                    case \"TT_OTC\":\n                    case 4:\n                        message.tradeType = 4;\n                        break;\n                    case \"TT_EFPDerived\":\n                    case 5:\n                        message.tradeType = 5;\n                        break;\n                    case \"TT_CombinationDerived\":\n                    case 6:\n                        message.tradeType = 6;\n                        break;\n                    case \"TT_BlockTrade\":\n                    case 7:\n                        message.tradeType = 7;\n                        break;\n                    }\n                    switch (object.priceSource) {\n                    case \"PSRC_Unknown\":\n                    case 0:\n                        message.priceSource = 0;\n                        break;\n                    case \"PSRC_LastPrice\":\n                    case 1:\n                        message.priceSource = 1;\n                        break;\n                    case \"PSRC_Buy\":\n                    case 2:\n                        message.priceSource = 2;\n                        break;\n                    case \"PSRC_Sell\":\n                    case 3:\n                        message.priceSource = 3;\n                        break;\n                    case \"PSRC_OTC\":\n                    case 4:\n                        message.priceSource = 4;\n                        break;\n                    }\n                    if (object.tradingDay != null)\n                        message.tradingDay = String(object.tradingDay);\n                    if (object.tradeDate != null)\n                        message.tradeDate = String(object.tradeDate);\n                    if (object.tradeTime != null)\n                        message.tradeTime = String(object.tradeTime);\n                    if (object.tradeTimestamp != null)\n                        if ($util.Long)\n                            (message.tradeTimestamp = $util.Long.fromValue(object.tradeTimestamp)).unsigned = false;\n                        else if (typeof object.tradeTimestamp === \"string\")\n                            message.tradeTimestamp = parseInt(object.tradeTimestamp, 10);\n                        else if (typeof object.tradeTimestamp === \"number\")\n                            message.tradeTimestamp = object.tradeTimestamp;\n                        else if (typeof object.tradeTimestamp === \"object\")\n                            message.tradeTimestamp = new $util.LongBits(object.tradeTimestamp.low >>> 0, object.tradeTimestamp.high >>> 0).toNumber();\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.TradeField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TradeField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @static\n                 * @param {xyz.redtorch.pb.TradeField} message TradeField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TradeField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.tradeId = \"\";\n                        object.adapterTradeId = \"\";\n                        object.originOrderId = \"\";\n                        object.orderId = \"\";\n                        object.adapterOrderId = \"\";\n                        object.orderLocalId = \"\";\n                        object.brokerOrderSeq = \"\";\n                        object.orderSysId = \"\";\n                        object.settlementId = \"\";\n                        object.sequenceNo = \"\";\n                        object.accountId = \"\";\n                        object.direction = options.enums === String ? \"D_Unknown\" : 0;\n                        object.offsetFlag = options.enums === String ? \"OF_Unknown\" : 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.price = 0;\n                        object.volume = 0;\n                        object.tradeType = options.enums === String ? \"TT_Unknown\" : 0;\n                        object.priceSource = options.enums === String ? \"PSRC_Unknown\" : 0;\n                        object.tradingDay = \"\";\n                        object.tradeDate = \"\";\n                        object.tradeTime = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.tradeTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.tradeTimestamp = options.longs === String ? \"0\" : 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                    }\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        object.tradeId = message.tradeId;\n                    if (message.adapterTradeId != null && message.hasOwnProperty(\"adapterTradeId\"))\n                        object.adapterTradeId = message.adapterTradeId;\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    if (message.adapterOrderId != null && message.hasOwnProperty(\"adapterOrderId\"))\n                        object.adapterOrderId = message.adapterOrderId;\n                    if (message.orderLocalId != null && message.hasOwnProperty(\"orderLocalId\"))\n                        object.orderLocalId = message.orderLocalId;\n                    if (message.brokerOrderSeq != null && message.hasOwnProperty(\"brokerOrderSeq\"))\n                        object.brokerOrderSeq = message.brokerOrderSeq;\n                    if (message.orderSysId != null && message.hasOwnProperty(\"orderSysId\"))\n                        object.orderSysId = message.orderSysId;\n                    if (message.settlementId != null && message.hasOwnProperty(\"settlementId\"))\n                        object.settlementId = message.settlementId;\n                    if (message.sequenceNo != null && message.hasOwnProperty(\"sequenceNo\"))\n                        object.sequenceNo = message.sequenceNo;\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        object.offsetFlag = options.enums === String ? $root.xyz.redtorch.pb.OffsetFlagEnum[message.offsetFlag] : message.offsetFlag;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        object.volume = message.volume;\n                    if (message.tradeType != null && message.hasOwnProperty(\"tradeType\"))\n                        object.tradeType = options.enums === String ? $root.xyz.redtorch.pb.TradeTypeEnum[message.tradeType] : message.tradeType;\n                    if (message.priceSource != null && message.hasOwnProperty(\"priceSource\"))\n                        object.priceSource = options.enums === String ? $root.xyz.redtorch.pb.PriceSourceEnum[message.priceSource] : message.priceSource;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.tradeDate != null && message.hasOwnProperty(\"tradeDate\"))\n                        object.tradeDate = message.tradeDate;\n                    if (message.tradeTime != null && message.hasOwnProperty(\"tradeTime\"))\n                        object.tradeTime = message.tradeTime;\n                    if (message.tradeTimestamp != null && message.hasOwnProperty(\"tradeTimestamp\"))\n                        if (typeof message.tradeTimestamp === \"number\")\n                            object.tradeTimestamp = options.longs === String ? String(message.tradeTimestamp) : message.tradeTimestamp;\n                        else\n                            object.tradeTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.tradeTimestamp) : options.longs === Number ? new $util.LongBits(message.tradeTimestamp.low >>> 0, message.tradeTimestamp.high >>> 0).toNumber() : message.tradeTimestamp;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    return object;\n                };\n\n                /**\n                 * Converts this TradeField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.TradeField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TradeField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TradeField;\n            })();\n\n            pb.PositionField = (function() {\n\n                /**\n                 * Properties of a PositionField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IPositionField\n                 * @property {string|null} [positionId] PositionField positionId\n                 * @property {string|null} [accountId] PositionField accountId\n                 * @property {xyz.redtorch.pb.PositionDirectionEnum|null} [positionDirection] PositionField positionDirection\n                 * @property {number|null} [position] PositionField position\n                 * @property {number|null} [frozen] PositionField frozen\n                 * @property {number|null} [ydPosition] PositionField ydPosition\n                 * @property {number|null} [ydFrozen] PositionField ydFrozen\n                 * @property {number|null} [tdPosition] PositionField tdPosition\n                 * @property {number|null} [tdFrozen] PositionField tdFrozen\n                 * @property {number|null} [lastPrice] PositionField lastPrice\n                 * @property {number|null} [price] PositionField price\n                 * @property {number|null} [priceDiff] PositionField priceDiff\n                 * @property {number|null} [openPrice] PositionField openPrice\n                 * @property {number|null} [openPriceDiff] PositionField openPriceDiff\n                 * @property {number|null} [positionProfit] PositionField positionProfit\n                 * @property {number|null} [positionProfitRatio] PositionField positionProfitRatio\n                 * @property {number|null} [openPositionProfit] PositionField openPositionProfit\n                 * @property {number|null} [openPositionProfitRatio] PositionField openPositionProfitRatio\n                 * @property {number|null} [useMargin] PositionField useMargin\n                 * @property {number|null} [exchangeMargin] PositionField exchangeMargin\n                 * @property {number|null} [contractValue] PositionField contractValue\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] PositionField hedgeFlag\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] PositionField contract\n                 * @property {string|null} [gatewayId] PositionField gatewayId\n                 * @property {number|Long|null} [localCreatedTimestamp] PositionField localCreatedTimestamp\n                 */\n\n                /**\n                 * Constructs a new PositionField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a PositionField.\n                 * @implements IPositionField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IPositionField=} [properties] Properties to set\n                 */\n                function PositionField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PositionField positionId.\n                 * @member {string} positionId\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionId = \"\";\n\n                /**\n                 * PositionField accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.accountId = \"\";\n\n                /**\n                 * PositionField positionDirection.\n                 * @member {xyz.redtorch.pb.PositionDirectionEnum} positionDirection\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionDirection = 0;\n\n                /**\n                 * PositionField position.\n                 * @member {number} position\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.position = 0;\n\n                /**\n                 * PositionField frozen.\n                 * @member {number} frozen\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.frozen = 0;\n\n                /**\n                 * PositionField ydPosition.\n                 * @member {number} ydPosition\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.ydPosition = 0;\n\n                /**\n                 * PositionField ydFrozen.\n                 * @member {number} ydFrozen\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.ydFrozen = 0;\n\n                /**\n                 * PositionField tdPosition.\n                 * @member {number} tdPosition\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.tdPosition = 0;\n\n                /**\n                 * PositionField tdFrozen.\n                 * @member {number} tdFrozen\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.tdFrozen = 0;\n\n                /**\n                 * PositionField lastPrice.\n                 * @member {number} lastPrice\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.lastPrice = 0;\n\n                /**\n                 * PositionField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.price = 0;\n\n                /**\n                 * PositionField priceDiff.\n                 * @member {number} priceDiff\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.priceDiff = 0;\n\n                /**\n                 * PositionField openPrice.\n                 * @member {number} openPrice\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPrice = 0;\n\n                /**\n                 * PositionField openPriceDiff.\n                 * @member {number} openPriceDiff\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPriceDiff = 0;\n\n                /**\n                 * PositionField positionProfit.\n                 * @member {number} positionProfit\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionProfit = 0;\n\n                /**\n                 * PositionField positionProfitRatio.\n                 * @member {number} positionProfitRatio\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.positionProfitRatio = 0;\n\n                /**\n                 * PositionField openPositionProfit.\n                 * @member {number} openPositionProfit\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPositionProfit = 0;\n\n                /**\n                 * PositionField openPositionProfitRatio.\n                 * @member {number} openPositionProfitRatio\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.openPositionProfitRatio = 0;\n\n                /**\n                 * PositionField useMargin.\n                 * @member {number} useMargin\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.useMargin = 0;\n\n                /**\n                 * PositionField exchangeMargin.\n                 * @member {number} exchangeMargin\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.exchangeMargin = 0;\n\n                /**\n                 * PositionField contractValue.\n                 * @member {number} contractValue\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.contractValue = 0;\n\n                /**\n                 * PositionField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.hedgeFlag = 0;\n\n                /**\n                 * PositionField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.contract = null;\n\n                /**\n                 * PositionField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.gatewayId = \"\";\n\n                /**\n                 * PositionField localCreatedTimestamp.\n                 * @member {number|Long} localCreatedTimestamp\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 */\n                PositionField.prototype.localCreatedTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new PositionField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.IPositionField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField instance\n                 */\n                PositionField.create = function create(properties) {\n                    return new PositionField(properties);\n                };\n\n                /**\n                 * Encodes the specified PositionField message. Does not implicitly {@link xyz.redtorch.pb.PositionField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.IPositionField} message PositionField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PositionField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.positionId);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    if (message.positionDirection != null && message.hasOwnProperty(\"positionDirection\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.positionDirection);\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.position);\n                    if (message.frozen != null && message.hasOwnProperty(\"frozen\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.frozen);\n                    if (message.ydPosition != null && message.hasOwnProperty(\"ydPosition\"))\n                        writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.ydPosition);\n                    if (message.ydFrozen != null && message.hasOwnProperty(\"ydFrozen\"))\n                        writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.ydFrozen);\n                    if (message.tdPosition != null && message.hasOwnProperty(\"tdPosition\"))\n                        writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.tdPosition);\n                    if (message.tdFrozen != null && message.hasOwnProperty(\"tdFrozen\"))\n                        writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.tdFrozen);\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.lastPrice);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.price);\n                    if (message.priceDiff != null && message.hasOwnProperty(\"priceDiff\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.priceDiff);\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.openPrice);\n                    if (message.openPriceDiff != null && message.hasOwnProperty(\"openPriceDiff\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.openPriceDiff);\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.positionProfit);\n                    if (message.positionProfitRatio != null && message.hasOwnProperty(\"positionProfitRatio\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).double(message.positionProfitRatio);\n                    if (message.openPositionProfit != null && message.hasOwnProperty(\"openPositionProfit\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.openPositionProfit);\n                    if (message.openPositionProfitRatio != null && message.hasOwnProperty(\"openPositionProfitRatio\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.openPositionProfitRatio);\n                    if (message.useMargin != null && message.hasOwnProperty(\"useMargin\"))\n                        writer.uint32(/* id 19, wireType 1 =*/153).double(message.useMargin);\n                    if (message.exchangeMargin != null && message.hasOwnProperty(\"exchangeMargin\"))\n                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.exchangeMargin);\n                    if (message.contractValue != null && message.hasOwnProperty(\"contractValue\"))\n                        writer.uint32(/* id 21, wireType 1 =*/169).double(message.contractValue);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 22, wireType 0 =*/176).int32(message.hedgeFlag);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 24, wireType 2 =*/194).string(message.gatewayId);\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        writer.uint32(/* id 25, wireType 1 =*/201).fixed64(message.localCreatedTimestamp);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PositionField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.PositionField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.IPositionField} message PositionField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PositionField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PositionField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PositionField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.PositionField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.positionId = reader.string();\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        case 3:\n                            message.positionDirection = reader.int32();\n                            break;\n                        case 4:\n                            message.position = reader.fixed32();\n                            break;\n                        case 5:\n                            message.frozen = reader.fixed32();\n                            break;\n                        case 6:\n                            message.ydPosition = reader.fixed32();\n                            break;\n                        case 7:\n                            message.ydFrozen = reader.fixed32();\n                            break;\n                        case 8:\n                            message.tdPosition = reader.fixed32();\n                            break;\n                        case 9:\n                            message.tdFrozen = reader.fixed32();\n                            break;\n                        case 10:\n                            message.lastPrice = reader.double();\n                            break;\n                        case 11:\n                            message.price = reader.double();\n                            break;\n                        case 12:\n                            message.priceDiff = reader.double();\n                            break;\n                        case 13:\n                            message.openPrice = reader.double();\n                            break;\n                        case 14:\n                            message.openPriceDiff = reader.double();\n                            break;\n                        case 15:\n                            message.positionProfit = reader.double();\n                            break;\n                        case 16:\n                            message.positionProfitRatio = reader.double();\n                            break;\n                        case 17:\n                            message.openPositionProfit = reader.double();\n                            break;\n                        case 18:\n                            message.openPositionProfitRatio = reader.double();\n                            break;\n                        case 19:\n                            message.useMargin = reader.double();\n                            break;\n                        case 20:\n                            message.exchangeMargin = reader.double();\n                            break;\n                        case 21:\n                            message.contractValue = reader.double();\n                            break;\n                        case 22:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 23:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 24:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 25:\n                            message.localCreatedTimestamp = reader.fixed64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PositionField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PositionField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PositionField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PositionField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        if (!$util.isString(message.positionId))\n                            return \"positionId: string expected\";\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    if (message.positionDirection != null && message.hasOwnProperty(\"positionDirection\"))\n                        switch (message.positionDirection) {\n                        default:\n                            return \"positionDirection: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        if (!$util.isInteger(message.position))\n                            return \"position: integer expected\";\n                    if (message.frozen != null && message.hasOwnProperty(\"frozen\"))\n                        if (!$util.isInteger(message.frozen))\n                            return \"frozen: integer expected\";\n                    if (message.ydPosition != null && message.hasOwnProperty(\"ydPosition\"))\n                        if (!$util.isInteger(message.ydPosition))\n                            return \"ydPosition: integer expected\";\n                    if (message.ydFrozen != null && message.hasOwnProperty(\"ydFrozen\"))\n                        if (!$util.isInteger(message.ydFrozen))\n                            return \"ydFrozen: integer expected\";\n                    if (message.tdPosition != null && message.hasOwnProperty(\"tdPosition\"))\n                        if (!$util.isInteger(message.tdPosition))\n                            return \"tdPosition: integer expected\";\n                    if (message.tdFrozen != null && message.hasOwnProperty(\"tdFrozen\"))\n                        if (!$util.isInteger(message.tdFrozen))\n                            return \"tdFrozen: integer expected\";\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        if (typeof message.lastPrice !== \"number\")\n                            return \"lastPrice: number expected\";\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.priceDiff != null && message.hasOwnProperty(\"priceDiff\"))\n                        if (typeof message.priceDiff !== \"number\")\n                            return \"priceDiff: number expected\";\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        if (typeof message.openPrice !== \"number\")\n                            return \"openPrice: number expected\";\n                    if (message.openPriceDiff != null && message.hasOwnProperty(\"openPriceDiff\"))\n                        if (typeof message.openPriceDiff !== \"number\")\n                            return \"openPriceDiff: number expected\";\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        if (typeof message.positionProfit !== \"number\")\n                            return \"positionProfit: number expected\";\n                    if (message.positionProfitRatio != null && message.hasOwnProperty(\"positionProfitRatio\"))\n                        if (typeof message.positionProfitRatio !== \"number\")\n                            return \"positionProfitRatio: number expected\";\n                    if (message.openPositionProfit != null && message.hasOwnProperty(\"openPositionProfit\"))\n                        if (typeof message.openPositionProfit !== \"number\")\n                            return \"openPositionProfit: number expected\";\n                    if (message.openPositionProfitRatio != null && message.hasOwnProperty(\"openPositionProfitRatio\"))\n                        if (typeof message.openPositionProfitRatio !== \"number\")\n                            return \"openPositionProfitRatio: number expected\";\n                    if (message.useMargin != null && message.hasOwnProperty(\"useMargin\"))\n                        if (typeof message.useMargin !== \"number\")\n                            return \"useMargin: number expected\";\n                    if (message.exchangeMargin != null && message.hasOwnProperty(\"exchangeMargin\"))\n                        if (typeof message.exchangeMargin !== \"number\")\n                            return \"exchangeMargin: number expected\";\n                    if (message.contractValue != null && message.hasOwnProperty(\"contractValue\"))\n                        if (typeof message.contractValue !== \"number\")\n                            return \"contractValue: number expected\";\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (!$util.isInteger(message.localCreatedTimestamp) && !(message.localCreatedTimestamp && $util.isInteger(message.localCreatedTimestamp.low) && $util.isInteger(message.localCreatedTimestamp.high)))\n                            return \"localCreatedTimestamp: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PositionField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.PositionField} PositionField\n                 */\n                PositionField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.PositionField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.PositionField();\n                    if (object.positionId != null)\n                        message.positionId = String(object.positionId);\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    switch (object.positionDirection) {\n                    case \"PD_Unknown\":\n                    case 0:\n                        message.positionDirection = 0;\n                        break;\n                    case \"PD_Net\":\n                    case 1:\n                        message.positionDirection = 1;\n                        break;\n                    case \"PD_Long\":\n                    case 2:\n                        message.positionDirection = 2;\n                        break;\n                    case \"PD_Short\":\n                    case 3:\n                        message.positionDirection = 3;\n                        break;\n                    }\n                    if (object.position != null)\n                        message.position = object.position >>> 0;\n                    if (object.frozen != null)\n                        message.frozen = object.frozen >>> 0;\n                    if (object.ydPosition != null)\n                        message.ydPosition = object.ydPosition >>> 0;\n                    if (object.ydFrozen != null)\n                        message.ydFrozen = object.ydFrozen >>> 0;\n                    if (object.tdPosition != null)\n                        message.tdPosition = object.tdPosition >>> 0;\n                    if (object.tdFrozen != null)\n                        message.tdFrozen = object.tdFrozen >>> 0;\n                    if (object.lastPrice != null)\n                        message.lastPrice = Number(object.lastPrice);\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    if (object.priceDiff != null)\n                        message.priceDiff = Number(object.priceDiff);\n                    if (object.openPrice != null)\n                        message.openPrice = Number(object.openPrice);\n                    if (object.openPriceDiff != null)\n                        message.openPriceDiff = Number(object.openPriceDiff);\n                    if (object.positionProfit != null)\n                        message.positionProfit = Number(object.positionProfit);\n                    if (object.positionProfitRatio != null)\n                        message.positionProfitRatio = Number(object.positionProfitRatio);\n                    if (object.openPositionProfit != null)\n                        message.openPositionProfit = Number(object.openPositionProfit);\n                    if (object.openPositionProfitRatio != null)\n                        message.openPositionProfitRatio = Number(object.openPositionProfitRatio);\n                    if (object.useMargin != null)\n                        message.useMargin = Number(object.useMargin);\n                    if (object.exchangeMargin != null)\n                        message.exchangeMargin = Number(object.exchangeMargin);\n                    if (object.contractValue != null)\n                        message.contractValue = Number(object.contractValue);\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.PositionField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.localCreatedTimestamp != null)\n                        if ($util.Long)\n                            (message.localCreatedTimestamp = $util.Long.fromValue(object.localCreatedTimestamp)).unsigned = false;\n                        else if (typeof object.localCreatedTimestamp === \"string\")\n                            message.localCreatedTimestamp = parseInt(object.localCreatedTimestamp, 10);\n                        else if (typeof object.localCreatedTimestamp === \"number\")\n                            message.localCreatedTimestamp = object.localCreatedTimestamp;\n                        else if (typeof object.localCreatedTimestamp === \"object\")\n                            message.localCreatedTimestamp = new $util.LongBits(object.localCreatedTimestamp.low >>> 0, object.localCreatedTimestamp.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PositionField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @static\n                 * @param {xyz.redtorch.pb.PositionField} message PositionField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PositionField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.positionId = \"\";\n                        object.accountId = \"\";\n                        object.positionDirection = options.enums === String ? \"PD_Unknown\" : 0;\n                        object.position = 0;\n                        object.frozen = 0;\n                        object.ydPosition = 0;\n                        object.ydFrozen = 0;\n                        object.tdPosition = 0;\n                        object.tdFrozen = 0;\n                        object.lastPrice = 0;\n                        object.price = 0;\n                        object.priceDiff = 0;\n                        object.openPrice = 0;\n                        object.openPriceDiff = 0;\n                        object.positionProfit = 0;\n                        object.positionProfitRatio = 0;\n                        object.openPositionProfit = 0;\n                        object.openPositionProfitRatio = 0;\n                        object.useMargin = 0;\n                        object.exchangeMargin = 0;\n                        object.contractValue = 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.localCreatedTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.localCreatedTimestamp = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        object.positionId = message.positionId;\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    if (message.positionDirection != null && message.hasOwnProperty(\"positionDirection\"))\n                        object.positionDirection = options.enums === String ? $root.xyz.redtorch.pb.PositionDirectionEnum[message.positionDirection] : message.positionDirection;\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        object.position = message.position;\n                    if (message.frozen != null && message.hasOwnProperty(\"frozen\"))\n                        object.frozen = message.frozen;\n                    if (message.ydPosition != null && message.hasOwnProperty(\"ydPosition\"))\n                        object.ydPosition = message.ydPosition;\n                    if (message.ydFrozen != null && message.hasOwnProperty(\"ydFrozen\"))\n                        object.ydFrozen = message.ydFrozen;\n                    if (message.tdPosition != null && message.hasOwnProperty(\"tdPosition\"))\n                        object.tdPosition = message.tdPosition;\n                    if (message.tdFrozen != null && message.hasOwnProperty(\"tdFrozen\"))\n                        object.tdFrozen = message.tdFrozen;\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        object.lastPrice = options.json && !isFinite(message.lastPrice) ? String(message.lastPrice) : message.lastPrice;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.priceDiff != null && message.hasOwnProperty(\"priceDiff\"))\n                        object.priceDiff = options.json && !isFinite(message.priceDiff) ? String(message.priceDiff) : message.priceDiff;\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;\n                    if (message.openPriceDiff != null && message.hasOwnProperty(\"openPriceDiff\"))\n                        object.openPriceDiff = options.json && !isFinite(message.openPriceDiff) ? String(message.openPriceDiff) : message.openPriceDiff;\n                    if (message.positionProfit != null && message.hasOwnProperty(\"positionProfit\"))\n                        object.positionProfit = options.json && !isFinite(message.positionProfit) ? String(message.positionProfit) : message.positionProfit;\n                    if (message.positionProfitRatio != null && message.hasOwnProperty(\"positionProfitRatio\"))\n                        object.positionProfitRatio = options.json && !isFinite(message.positionProfitRatio) ? String(message.positionProfitRatio) : message.positionProfitRatio;\n                    if (message.openPositionProfit != null && message.hasOwnProperty(\"openPositionProfit\"))\n                        object.openPositionProfit = options.json && !isFinite(message.openPositionProfit) ? String(message.openPositionProfit) : message.openPositionProfit;\n                    if (message.openPositionProfitRatio != null && message.hasOwnProperty(\"openPositionProfitRatio\"))\n                        object.openPositionProfitRatio = options.json && !isFinite(message.openPositionProfitRatio) ? String(message.openPositionProfitRatio) : message.openPositionProfitRatio;\n                    if (message.useMargin != null && message.hasOwnProperty(\"useMargin\"))\n                        object.useMargin = options.json && !isFinite(message.useMargin) ? String(message.useMargin) : message.useMargin;\n                    if (message.exchangeMargin != null && message.hasOwnProperty(\"exchangeMargin\"))\n                        object.exchangeMargin = options.json && !isFinite(message.exchangeMargin) ? String(message.exchangeMargin) : message.exchangeMargin;\n                    if (message.contractValue != null && message.hasOwnProperty(\"contractValue\"))\n                        object.contractValue = options.json && !isFinite(message.contractValue) ? String(message.contractValue) : message.contractValue;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.localCreatedTimestamp != null && message.hasOwnProperty(\"localCreatedTimestamp\"))\n                        if (typeof message.localCreatedTimestamp === \"number\")\n                            object.localCreatedTimestamp = options.longs === String ? String(message.localCreatedTimestamp) : message.localCreatedTimestamp;\n                        else\n                            object.localCreatedTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.localCreatedTimestamp) : options.longs === Number ? new $util.LongBits(message.localCreatedTimestamp.low >>> 0, message.localCreatedTimestamp.high >>> 0).toNumber() : message.localCreatedTimestamp;\n                    return object;\n                };\n\n                /**\n                 * Converts this PositionField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.PositionField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PositionField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PositionField;\n            })();\n\n            pb.TickField = (function() {\n\n                /**\n                 * Properties of a TickField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ITickField\n                 * @property {string|null} [uniformSymbol] TickField uniformSymbol\n                 * @property {string|null} [gatewayId] TickField gatewayId\n                 * @property {number|null} [tradingDay] TickField tradingDay\n                 * @property {number|null} [actionDay] TickField actionDay\n                 * @property {number|null} [actionTime] TickField actionTime\n                 * @property {number|Long|null} [actionTimestamp] TickField actionTimestamp\n                 * @property {number|null} [lastPrice] TickField lastPrice\n                 * @property {number|null} [avgPrice] TickField avgPrice\n                 * @property {number|Long|null} [volumeDelta] TickField volumeDelta\n                 * @property {number|Long|null} [volume] TickField volume\n                 * @property {number|null} [turnover] TickField turnover\n                 * @property {number|null} [turnoverDelta] TickField turnoverDelta\n                 * @property {number|null} [openInterest] TickField openInterest\n                 * @property {number|null} [openInterestDelta] TickField openInterestDelta\n                 * @property {number|null} [preOpenInterest] TickField preOpenInterest\n                 * @property {number|null} [preClosePrice] TickField preClosePrice\n                 * @property {number|null} [settlePrice] TickField settlePrice\n                 * @property {number|null} [preSettlePrice] TickField preSettlePrice\n                 * @property {number|null} [openPrice] TickField openPrice\n                 * @property {number|null} [highPrice] TickField highPrice\n                 * @property {number|null} [lowPrice] TickField lowPrice\n                 * @property {number|null} [upperLimit] TickField upperLimit\n                 * @property {number|null} [lowerLimit] TickField lowerLimit\n                 * @property {Array.<number>|null} [bidPrice] TickField bidPrice\n                 * @property {Array.<number>|null} [askPrice] TickField askPrice\n                 * @property {Array.<number>|null} [bidVolume] TickField bidVolume\n                 * @property {Array.<number>|null} [askVolume] TickField askVolume\n                 */\n\n                /**\n                 * Constructs a new TickField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a TickField.\n                 * @implements ITickField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ITickField=} [properties] Properties to set\n                 */\n                function TickField(properties) {\n                    this.bidPrice = [];\n                    this.askPrice = [];\n                    this.bidVolume = [];\n                    this.askVolume = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TickField uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.uniformSymbol = \"\";\n\n                /**\n                 * TickField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.gatewayId = \"\";\n\n                /**\n                 * TickField tradingDay.\n                 * @member {number} tradingDay\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.tradingDay = 0;\n\n                /**\n                 * TickField actionDay.\n                 * @member {number} actionDay\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.actionDay = 0;\n\n                /**\n                 * TickField actionTime.\n                 * @member {number} actionTime\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.actionTime = 0;\n\n                /**\n                 * TickField actionTimestamp.\n                 * @member {number|Long} actionTimestamp\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.actionTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField lastPrice.\n                 * @member {number} lastPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.lastPrice = 0;\n\n                /**\n                 * TickField avgPrice.\n                 * @member {number} avgPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.avgPrice = 0;\n\n                /**\n                 * TickField volumeDelta.\n                 * @member {number|Long} volumeDelta\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.volumeDelta = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField volume.\n                 * @member {number|Long} volume\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.volume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TickField turnover.\n                 * @member {number} turnover\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.turnover = 0;\n\n                /**\n                 * TickField turnoverDelta.\n                 * @member {number} turnoverDelta\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.turnoverDelta = 0;\n\n                /**\n                 * TickField openInterest.\n                 * @member {number} openInterest\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.openInterest = 0;\n\n                /**\n                 * TickField openInterestDelta.\n                 * @member {number} openInterestDelta\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.openInterestDelta = 0;\n\n                /**\n                 * TickField preOpenInterest.\n                 * @member {number} preOpenInterest\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.preOpenInterest = 0;\n\n                /**\n                 * TickField preClosePrice.\n                 * @member {number} preClosePrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.preClosePrice = 0;\n\n                /**\n                 * TickField settlePrice.\n                 * @member {number} settlePrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.settlePrice = 0;\n\n                /**\n                 * TickField preSettlePrice.\n                 * @member {number} preSettlePrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.preSettlePrice = 0;\n\n                /**\n                 * TickField openPrice.\n                 * @member {number} openPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.openPrice = 0;\n\n                /**\n                 * TickField highPrice.\n                 * @member {number} highPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.highPrice = 0;\n\n                /**\n                 * TickField lowPrice.\n                 * @member {number} lowPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.lowPrice = 0;\n\n                /**\n                 * TickField upperLimit.\n                 * @member {number} upperLimit\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.upperLimit = 0;\n\n                /**\n                 * TickField lowerLimit.\n                 * @member {number} lowerLimit\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.lowerLimit = 0;\n\n                /**\n                 * TickField bidPrice.\n                 * @member {Array.<number>} bidPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.bidPrice = $util.emptyArray;\n\n                /**\n                 * TickField askPrice.\n                 * @member {Array.<number>} askPrice\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.askPrice = $util.emptyArray;\n\n                /**\n                 * TickField bidVolume.\n                 * @member {Array.<number>} bidVolume\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.bidVolume = $util.emptyArray;\n\n                /**\n                 * TickField askVolume.\n                 * @member {Array.<number>} askVolume\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 */\n                TickField.prototype.askVolume = $util.emptyArray;\n\n                /**\n                 * Creates a new TickField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITickField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.TickField} TickField instance\n                 */\n                TickField.create = function create(properties) {\n                    return new TickField(properties);\n                };\n\n                /**\n                 * Encodes the specified TickField message. Does not implicitly {@link xyz.redtorch.pb.TickField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITickField} message TickField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TickField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.uniformSymbol);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayId);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.tradingDay);\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.actionDay);\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.actionTime);\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        writer.uint32(/* id 6, wireType 1 =*/49).fixed64(message.actionTimestamp);\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.lastPrice);\n                    if (message.avgPrice != null && message.hasOwnProperty(\"avgPrice\"))\n                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.avgPrice);\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        writer.uint32(/* id 9, wireType 1 =*/73).fixed64(message.volumeDelta);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.volume);\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.turnover);\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.turnoverDelta);\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.openInterest);\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.openInterestDelta);\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.preOpenInterest);\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).double(message.preClosePrice);\n                    if (message.settlePrice != null && message.hasOwnProperty(\"settlePrice\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.settlePrice);\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.preSettlePrice);\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        writer.uint32(/* id 19, wireType 1 =*/153).double(message.openPrice);\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.highPrice);\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        writer.uint32(/* id 21, wireType 1 =*/169).double(message.lowPrice);\n                    if (message.upperLimit != null && message.hasOwnProperty(\"upperLimit\"))\n                        writer.uint32(/* id 22, wireType 1 =*/177).double(message.upperLimit);\n                    if (message.lowerLimit != null && message.hasOwnProperty(\"lowerLimit\"))\n                        writer.uint32(/* id 23, wireType 1 =*/185).double(message.lowerLimit);\n                    if (message.bidPrice != null && message.bidPrice.length) {\n                        writer.uint32(/* id 24, wireType 2 =*/194).fork();\n                        for (var i = 0; i < message.bidPrice.length; ++i)\n                            writer.double(message.bidPrice[i]);\n                        writer.ldelim();\n                    }\n                    if (message.askPrice != null && message.askPrice.length) {\n                        writer.uint32(/* id 25, wireType 2 =*/202).fork();\n                        for (var i = 0; i < message.askPrice.length; ++i)\n                            writer.double(message.askPrice[i]);\n                        writer.ldelim();\n                    }\n                    if (message.bidVolume != null && message.bidVolume.length) {\n                        writer.uint32(/* id 26, wireType 2 =*/210).fork();\n                        for (var i = 0; i < message.bidVolume.length; ++i)\n                            writer.fixed32(message.bidVolume[i]);\n                        writer.ldelim();\n                    }\n                    if (message.askVolume != null && message.askVolume.length) {\n                        writer.uint32(/* id 27, wireType 2 =*/218).fork();\n                        for (var i = 0; i < message.askVolume.length; ++i)\n                            writer.fixed32(message.askVolume[i]);\n                        writer.ldelim();\n                    }\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TickField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.TickField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.ITickField} message TickField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TickField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TickField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.TickField} TickField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TickField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.TickField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        case 2:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 3:\n                            message.tradingDay = reader.fixed32();\n                            break;\n                        case 4:\n                            message.actionDay = reader.fixed32();\n                            break;\n                        case 5:\n                            message.actionTime = reader.fixed32();\n                            break;\n                        case 6:\n                            message.actionTimestamp = reader.fixed64();\n                            break;\n                        case 7:\n                            message.lastPrice = reader.double();\n                            break;\n                        case 8:\n                            message.avgPrice = reader.double();\n                            break;\n                        case 9:\n                            message.volumeDelta = reader.fixed64();\n                            break;\n                        case 10:\n                            message.volume = reader.fixed64();\n                            break;\n                        case 11:\n                            message.turnover = reader.double();\n                            break;\n                        case 12:\n                            message.turnoverDelta = reader.double();\n                            break;\n                        case 13:\n                            message.openInterest = reader.double();\n                            break;\n                        case 14:\n                            message.openInterestDelta = reader.double();\n                            break;\n                        case 15:\n                            message.preOpenInterest = reader.double();\n                            break;\n                        case 16:\n                            message.preClosePrice = reader.double();\n                            break;\n                        case 17:\n                            message.settlePrice = reader.double();\n                            break;\n                        case 18:\n                            message.preSettlePrice = reader.double();\n                            break;\n                        case 19:\n                            message.openPrice = reader.double();\n                            break;\n                        case 20:\n                            message.highPrice = reader.double();\n                            break;\n                        case 21:\n                            message.lowPrice = reader.double();\n                            break;\n                        case 22:\n                            message.upperLimit = reader.double();\n                            break;\n                        case 23:\n                            message.lowerLimit = reader.double();\n                            break;\n                        case 24:\n                            if (!(message.bidPrice && message.bidPrice.length))\n                                message.bidPrice = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.bidPrice.push(reader.double());\n                            } else\n                                message.bidPrice.push(reader.double());\n                            break;\n                        case 25:\n                            if (!(message.askPrice && message.askPrice.length))\n                                message.askPrice = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.askPrice.push(reader.double());\n                            } else\n                                message.askPrice.push(reader.double());\n                            break;\n                        case 26:\n                            if (!(message.bidVolume && message.bidVolume.length))\n                                message.bidVolume = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.bidVolume.push(reader.fixed32());\n                            } else\n                                message.bidVolume.push(reader.fixed32());\n                            break;\n                        case 27:\n                            if (!(message.askVolume && message.askVolume.length))\n                                message.askVolume = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.askVolume.push(reader.fixed32());\n                            } else\n                                message.askVolume.push(reader.fixed32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TickField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.TickField} TickField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TickField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TickField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TickField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isInteger(message.tradingDay))\n                            return \"tradingDay: integer expected\";\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        if (!$util.isInteger(message.actionDay))\n                            return \"actionDay: integer expected\";\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        if (!$util.isInteger(message.actionTime))\n                            return \"actionTime: integer expected\";\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (!$util.isInteger(message.actionTimestamp) && !(message.actionTimestamp && $util.isInteger(message.actionTimestamp.low) && $util.isInteger(message.actionTimestamp.high)))\n                            return \"actionTimestamp: integer|Long expected\";\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        if (typeof message.lastPrice !== \"number\")\n                            return \"lastPrice: number expected\";\n                    if (message.avgPrice != null && message.hasOwnProperty(\"avgPrice\"))\n                        if (typeof message.avgPrice !== \"number\")\n                            return \"avgPrice: number expected\";\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (!$util.isInteger(message.volumeDelta) && !(message.volumeDelta && $util.isInteger(message.volumeDelta.low) && $util.isInteger(message.volumeDelta.high)))\n                            return \"volumeDelta: integer|Long expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))\n                            return \"volume: integer|Long expected\";\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        if (typeof message.turnover !== \"number\")\n                            return \"turnover: number expected\";\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        if (typeof message.turnoverDelta !== \"number\")\n                            return \"turnoverDelta: number expected\";\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        if (typeof message.openInterest !== \"number\")\n                            return \"openInterest: number expected\";\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        if (typeof message.openInterestDelta !== \"number\")\n                            return \"openInterestDelta: number expected\";\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        if (typeof message.preOpenInterest !== \"number\")\n                            return \"preOpenInterest: number expected\";\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        if (typeof message.preClosePrice !== \"number\")\n                            return \"preClosePrice: number expected\";\n                    if (message.settlePrice != null && message.hasOwnProperty(\"settlePrice\"))\n                        if (typeof message.settlePrice !== \"number\")\n                            return \"settlePrice: number expected\";\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        if (typeof message.preSettlePrice !== \"number\")\n                            return \"preSettlePrice: number expected\";\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        if (typeof message.openPrice !== \"number\")\n                            return \"openPrice: number expected\";\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        if (typeof message.highPrice !== \"number\")\n                            return \"highPrice: number expected\";\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        if (typeof message.lowPrice !== \"number\")\n                            return \"lowPrice: number expected\";\n                    if (message.upperLimit != null && message.hasOwnProperty(\"upperLimit\"))\n                        if (typeof message.upperLimit !== \"number\")\n                            return \"upperLimit: number expected\";\n                    if (message.lowerLimit != null && message.hasOwnProperty(\"lowerLimit\"))\n                        if (typeof message.lowerLimit !== \"number\")\n                            return \"lowerLimit: number expected\";\n                    if (message.bidPrice != null && message.hasOwnProperty(\"bidPrice\")) {\n                        if (!Array.isArray(message.bidPrice))\n                            return \"bidPrice: array expected\";\n                        for (var i = 0; i < message.bidPrice.length; ++i)\n                            if (typeof message.bidPrice[i] !== \"number\")\n                                return \"bidPrice: number[] expected\";\n                    }\n                    if (message.askPrice != null && message.hasOwnProperty(\"askPrice\")) {\n                        if (!Array.isArray(message.askPrice))\n                            return \"askPrice: array expected\";\n                        for (var i = 0; i < message.askPrice.length; ++i)\n                            if (typeof message.askPrice[i] !== \"number\")\n                                return \"askPrice: number[] expected\";\n                    }\n                    if (message.bidVolume != null && message.hasOwnProperty(\"bidVolume\")) {\n                        if (!Array.isArray(message.bidVolume))\n                            return \"bidVolume: array expected\";\n                        for (var i = 0; i < message.bidVolume.length; ++i)\n                            if (!$util.isInteger(message.bidVolume[i]))\n                                return \"bidVolume: integer[] expected\";\n                    }\n                    if (message.askVolume != null && message.hasOwnProperty(\"askVolume\")) {\n                        if (!Array.isArray(message.askVolume))\n                            return \"askVolume: array expected\";\n                        for (var i = 0; i < message.askVolume.length; ++i)\n                            if (!$util.isInteger(message.askVolume[i]))\n                                return \"askVolume: integer[] expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TickField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.TickField} TickField\n                 */\n                TickField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.TickField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.TickField();\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.tradingDay != null)\n                        message.tradingDay = object.tradingDay >>> 0;\n                    if (object.actionDay != null)\n                        message.actionDay = object.actionDay >>> 0;\n                    if (object.actionTime != null)\n                        message.actionTime = object.actionTime >>> 0;\n                    if (object.actionTimestamp != null)\n                        if ($util.Long)\n                            (message.actionTimestamp = $util.Long.fromValue(object.actionTimestamp)).unsigned = false;\n                        else if (typeof object.actionTimestamp === \"string\")\n                            message.actionTimestamp = parseInt(object.actionTimestamp, 10);\n                        else if (typeof object.actionTimestamp === \"number\")\n                            message.actionTimestamp = object.actionTimestamp;\n                        else if (typeof object.actionTimestamp === \"object\")\n                            message.actionTimestamp = new $util.LongBits(object.actionTimestamp.low >>> 0, object.actionTimestamp.high >>> 0).toNumber();\n                    if (object.lastPrice != null)\n                        message.lastPrice = Number(object.lastPrice);\n                    if (object.avgPrice != null)\n                        message.avgPrice = Number(object.avgPrice);\n                    if (object.volumeDelta != null)\n                        if ($util.Long)\n                            (message.volumeDelta = $util.Long.fromValue(object.volumeDelta)).unsigned = false;\n                        else if (typeof object.volumeDelta === \"string\")\n                            message.volumeDelta = parseInt(object.volumeDelta, 10);\n                        else if (typeof object.volumeDelta === \"number\")\n                            message.volumeDelta = object.volumeDelta;\n                        else if (typeof object.volumeDelta === \"object\")\n                            message.volumeDelta = new $util.LongBits(object.volumeDelta.low >>> 0, object.volumeDelta.high >>> 0).toNumber();\n                    if (object.volume != null)\n                        if ($util.Long)\n                            (message.volume = $util.Long.fromValue(object.volume)).unsigned = false;\n                        else if (typeof object.volume === \"string\")\n                            message.volume = parseInt(object.volume, 10);\n                        else if (typeof object.volume === \"number\")\n                            message.volume = object.volume;\n                        else if (typeof object.volume === \"object\")\n                            message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber();\n                    if (object.turnover != null)\n                        message.turnover = Number(object.turnover);\n                    if (object.turnoverDelta != null)\n                        message.turnoverDelta = Number(object.turnoverDelta);\n                    if (object.openInterest != null)\n                        message.openInterest = Number(object.openInterest);\n                    if (object.openInterestDelta != null)\n                        message.openInterestDelta = Number(object.openInterestDelta);\n                    if (object.preOpenInterest != null)\n                        message.preOpenInterest = Number(object.preOpenInterest);\n                    if (object.preClosePrice != null)\n                        message.preClosePrice = Number(object.preClosePrice);\n                    if (object.settlePrice != null)\n                        message.settlePrice = Number(object.settlePrice);\n                    if (object.preSettlePrice != null)\n                        message.preSettlePrice = Number(object.preSettlePrice);\n                    if (object.openPrice != null)\n                        message.openPrice = Number(object.openPrice);\n                    if (object.highPrice != null)\n                        message.highPrice = Number(object.highPrice);\n                    if (object.lowPrice != null)\n                        message.lowPrice = Number(object.lowPrice);\n                    if (object.upperLimit != null)\n                        message.upperLimit = Number(object.upperLimit);\n                    if (object.lowerLimit != null)\n                        message.lowerLimit = Number(object.lowerLimit);\n                    if (object.bidPrice) {\n                        if (!Array.isArray(object.bidPrice))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.bidPrice: array expected\");\n                        message.bidPrice = [];\n                        for (var i = 0; i < object.bidPrice.length; ++i)\n                            message.bidPrice[i] = Number(object.bidPrice[i]);\n                    }\n                    if (object.askPrice) {\n                        if (!Array.isArray(object.askPrice))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.askPrice: array expected\");\n                        message.askPrice = [];\n                        for (var i = 0; i < object.askPrice.length; ++i)\n                            message.askPrice[i] = Number(object.askPrice[i]);\n                    }\n                    if (object.bidVolume) {\n                        if (!Array.isArray(object.bidVolume))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.bidVolume: array expected\");\n                        message.bidVolume = [];\n                        for (var i = 0; i < object.bidVolume.length; ++i)\n                            message.bidVolume[i] = object.bidVolume[i] >>> 0;\n                    }\n                    if (object.askVolume) {\n                        if (!Array.isArray(object.askVolume))\n                            throw TypeError(\".xyz.redtorch.pb.TickField.askVolume: array expected\");\n                        message.askVolume = [];\n                        for (var i = 0; i < object.askVolume.length; ++i)\n                            message.askVolume[i] = object.askVolume[i] >>> 0;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TickField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @static\n                 * @param {xyz.redtorch.pb.TickField} message TickField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TickField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.bidPrice = [];\n                        object.askPrice = [];\n                        object.bidVolume = [];\n                        object.askVolume = [];\n                    }\n                    if (options.defaults) {\n                        object.uniformSymbol = \"\";\n                        object.gatewayId = \"\";\n                        object.tradingDay = 0;\n                        object.actionDay = 0;\n                        object.actionTime = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.actionTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.actionTimestamp = options.longs === String ? \"0\" : 0;\n                        object.lastPrice = 0;\n                        object.avgPrice = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volumeDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volumeDelta = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volume = options.longs === String ? \"0\" : 0;\n                        object.turnover = 0;\n                        object.turnoverDelta = 0;\n                        object.openInterest = 0;\n                        object.openInterestDelta = 0;\n                        object.preOpenInterest = 0;\n                        object.preClosePrice = 0;\n                        object.settlePrice = 0;\n                        object.preSettlePrice = 0;\n                        object.openPrice = 0;\n                        object.highPrice = 0;\n                        object.lowPrice = 0;\n                        object.upperLimit = 0;\n                        object.lowerLimit = 0;\n                    }\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        object.actionDay = message.actionDay;\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        object.actionTime = message.actionTime;\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (typeof message.actionTimestamp === \"number\")\n                            object.actionTimestamp = options.longs === String ? String(message.actionTimestamp) : message.actionTimestamp;\n                        else\n                            object.actionTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.actionTimestamp) : options.longs === Number ? new $util.LongBits(message.actionTimestamp.low >>> 0, message.actionTimestamp.high >>> 0).toNumber() : message.actionTimestamp;\n                    if (message.lastPrice != null && message.hasOwnProperty(\"lastPrice\"))\n                        object.lastPrice = options.json && !isFinite(message.lastPrice) ? String(message.lastPrice) : message.lastPrice;\n                    if (message.avgPrice != null && message.hasOwnProperty(\"avgPrice\"))\n                        object.avgPrice = options.json && !isFinite(message.avgPrice) ? String(message.avgPrice) : message.avgPrice;\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (typeof message.volumeDelta === \"number\")\n                            object.volumeDelta = options.longs === String ? String(message.volumeDelta) : message.volumeDelta;\n                        else\n                            object.volumeDelta = options.longs === String ? $util.Long.prototype.toString.call(message.volumeDelta) : options.longs === Number ? new $util.LongBits(message.volumeDelta.low >>> 0, message.volumeDelta.high >>> 0).toNumber() : message.volumeDelta;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (typeof message.volume === \"number\")\n                            object.volume = options.longs === String ? String(message.volume) : message.volume;\n                        else\n                            object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber() : message.volume;\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        object.turnover = options.json && !isFinite(message.turnover) ? String(message.turnover) : message.turnover;\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        object.turnoverDelta = options.json && !isFinite(message.turnoverDelta) ? String(message.turnoverDelta) : message.turnoverDelta;\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        object.openInterest = options.json && !isFinite(message.openInterest) ? String(message.openInterest) : message.openInterest;\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        object.openInterestDelta = options.json && !isFinite(message.openInterestDelta) ? String(message.openInterestDelta) : message.openInterestDelta;\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        object.preOpenInterest = options.json && !isFinite(message.preOpenInterest) ? String(message.preOpenInterest) : message.preOpenInterest;\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        object.preClosePrice = options.json && !isFinite(message.preClosePrice) ? String(message.preClosePrice) : message.preClosePrice;\n                    if (message.settlePrice != null && message.hasOwnProperty(\"settlePrice\"))\n                        object.settlePrice = options.json && !isFinite(message.settlePrice) ? String(message.settlePrice) : message.settlePrice;\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        object.preSettlePrice = options.json && !isFinite(message.preSettlePrice) ? String(message.preSettlePrice) : message.preSettlePrice;\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        object.highPrice = options.json && !isFinite(message.highPrice) ? String(message.highPrice) : message.highPrice;\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        object.lowPrice = options.json && !isFinite(message.lowPrice) ? String(message.lowPrice) : message.lowPrice;\n                    if (message.upperLimit != null && message.hasOwnProperty(\"upperLimit\"))\n                        object.upperLimit = options.json && !isFinite(message.upperLimit) ? String(message.upperLimit) : message.upperLimit;\n                    if (message.lowerLimit != null && message.hasOwnProperty(\"lowerLimit\"))\n                        object.lowerLimit = options.json && !isFinite(message.lowerLimit) ? String(message.lowerLimit) : message.lowerLimit;\n                    if (message.bidPrice && message.bidPrice.length) {\n                        object.bidPrice = [];\n                        for (var j = 0; j < message.bidPrice.length; ++j)\n                            object.bidPrice[j] = options.json && !isFinite(message.bidPrice[j]) ? String(message.bidPrice[j]) : message.bidPrice[j];\n                    }\n                    if (message.askPrice && message.askPrice.length) {\n                        object.askPrice = [];\n                        for (var j = 0; j < message.askPrice.length; ++j)\n                            object.askPrice[j] = options.json && !isFinite(message.askPrice[j]) ? String(message.askPrice[j]) : message.askPrice[j];\n                    }\n                    if (message.bidVolume && message.bidVolume.length) {\n                        object.bidVolume = [];\n                        for (var j = 0; j < message.bidVolume.length; ++j)\n                            object.bidVolume[j] = message.bidVolume[j];\n                    }\n                    if (message.askVolume && message.askVolume.length) {\n                        object.askVolume = [];\n                        for (var j = 0; j < message.askVolume.length; ++j)\n                            object.askVolume[j] = message.askVolume[j];\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this TickField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.TickField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TickField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TickField;\n            })();\n\n            pb.BarField = (function() {\n\n                /**\n                 * Properties of a BarField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IBarField\n                 * @property {string|null} [uniformSymbol] BarField uniformSymbol\n                 * @property {string|null} [gatewayId] BarField gatewayId\n                 * @property {number|null} [tradingDay] BarField tradingDay\n                 * @property {number|null} [actionDay] BarField actionDay\n                 * @property {number|null} [actionTime] BarField actionTime\n                 * @property {number|Long|null} [actionTimestamp] BarField actionTimestamp\n                 * @property {number|null} [openPrice] BarField openPrice\n                 * @property {number|null} [highPrice] BarField highPrice\n                 * @property {number|null} [lowPrice] BarField lowPrice\n                 * @property {number|null} [closePrice] BarField closePrice\n                 * @property {number|null} [openInterest] BarField openInterest\n                 * @property {number|null} [openInterestDelta] BarField openInterestDelta\n                 * @property {number|Long|null} [volume] BarField volume\n                 * @property {number|Long|null} [volumeDelta] BarField volumeDelta\n                 * @property {number|null} [turnover] BarField turnover\n                 * @property {number|null} [turnoverDelta] BarField turnoverDelta\n                 * @property {number|null} [preOpenInterest] BarField preOpenInterest\n                 * @property {number|null} [preClosePrice] BarField preClosePrice\n                 * @property {number|null} [preSettlePrice] BarField preSettlePrice\n                 * @property {number|null} [period] BarField period\n                 */\n\n                /**\n                 * Constructs a new BarField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a BarField.\n                 * @implements IBarField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IBarField=} [properties] Properties to set\n                 */\n                function BarField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * BarField uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.uniformSymbol = \"\";\n\n                /**\n                 * BarField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.gatewayId = \"\";\n\n                /**\n                 * BarField tradingDay.\n                 * @member {number} tradingDay\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.tradingDay = 0;\n\n                /**\n                 * BarField actionDay.\n                 * @member {number} actionDay\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.actionDay = 0;\n\n                /**\n                 * BarField actionTime.\n                 * @member {number} actionTime\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.actionTime = 0;\n\n                /**\n                 * BarField actionTimestamp.\n                 * @member {number|Long} actionTimestamp\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.actionTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField openPrice.\n                 * @member {number} openPrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.openPrice = 0;\n\n                /**\n                 * BarField highPrice.\n                 * @member {number} highPrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.highPrice = 0;\n\n                /**\n                 * BarField lowPrice.\n                 * @member {number} lowPrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.lowPrice = 0;\n\n                /**\n                 * BarField closePrice.\n                 * @member {number} closePrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.closePrice = 0;\n\n                /**\n                 * BarField openInterest.\n                 * @member {number} openInterest\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.openInterest = 0;\n\n                /**\n                 * BarField openInterestDelta.\n                 * @member {number} openInterestDelta\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.openInterestDelta = 0;\n\n                /**\n                 * BarField volume.\n                 * @member {number|Long} volume\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.volume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField volumeDelta.\n                 * @member {number|Long} volumeDelta\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.volumeDelta = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * BarField turnover.\n                 * @member {number} turnover\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.turnover = 0;\n\n                /**\n                 * BarField turnoverDelta.\n                 * @member {number} turnoverDelta\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.turnoverDelta = 0;\n\n                /**\n                 * BarField preOpenInterest.\n                 * @member {number} preOpenInterest\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.preOpenInterest = 0;\n\n                /**\n                 * BarField preClosePrice.\n                 * @member {number} preClosePrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.preClosePrice = 0;\n\n                /**\n                 * BarField preSettlePrice.\n                 * @member {number} preSettlePrice\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.preSettlePrice = 0;\n\n                /**\n                 * BarField period.\n                 * @member {number} period\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 */\n                BarField.prototype.period = 0;\n\n                /**\n                 * Creates a new BarField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.IBarField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.BarField} BarField instance\n                 */\n                BarField.create = function create(properties) {\n                    return new BarField(properties);\n                };\n\n                /**\n                 * Encodes the specified BarField message. Does not implicitly {@link xyz.redtorch.pb.BarField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.IBarField} message BarField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                BarField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.uniformSymbol);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayId);\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.tradingDay);\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.actionDay);\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.actionTime);\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        writer.uint32(/* id 6, wireType 1 =*/49).fixed64(message.actionTimestamp);\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.openPrice);\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.highPrice);\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.lowPrice);\n                    if (message.closePrice != null && message.hasOwnProperty(\"closePrice\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.closePrice);\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.openInterest);\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.openInterestDelta);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 13, wireType 1 =*/105).fixed64(message.volume);\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        writer.uint32(/* id 14, wireType 1 =*/113).fixed64(message.volumeDelta);\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.turnover);\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        writer.uint32(/* id 16, wireType 1 =*/129).double(message.turnoverDelta);\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.preOpenInterest);\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.preClosePrice);\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        writer.uint32(/* id 19, wireType 1 =*/153).double(message.preSettlePrice);\n                    if (message.period != null && message.hasOwnProperty(\"period\"))\n                        writer.uint32(/* id 20, wireType 0 =*/160).int32(message.period);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified BarField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.BarField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.IBarField} message BarField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                BarField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a BarField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.BarField} BarField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                BarField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.BarField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        case 2:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 3:\n                            message.tradingDay = reader.fixed32();\n                            break;\n                        case 4:\n                            message.actionDay = reader.fixed32();\n                            break;\n                        case 5:\n                            message.actionTime = reader.fixed32();\n                            break;\n                        case 6:\n                            message.actionTimestamp = reader.fixed64();\n                            break;\n                        case 7:\n                            message.openPrice = reader.double();\n                            break;\n                        case 8:\n                            message.highPrice = reader.double();\n                            break;\n                        case 9:\n                            message.lowPrice = reader.double();\n                            break;\n                        case 10:\n                            message.closePrice = reader.double();\n                            break;\n                        case 11:\n                            message.openInterest = reader.double();\n                            break;\n                        case 12:\n                            message.openInterestDelta = reader.double();\n                            break;\n                        case 13:\n                            message.volume = reader.fixed64();\n                            break;\n                        case 14:\n                            message.volumeDelta = reader.fixed64();\n                            break;\n                        case 15:\n                            message.turnover = reader.double();\n                            break;\n                        case 16:\n                            message.turnoverDelta = reader.double();\n                            break;\n                        case 17:\n                            message.preOpenInterest = reader.double();\n                            break;\n                        case 18:\n                            message.preClosePrice = reader.double();\n                            break;\n                        case 19:\n                            message.preSettlePrice = reader.double();\n                            break;\n                        case 20:\n                            message.period = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a BarField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.BarField} BarField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                BarField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a BarField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                BarField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        if (!$util.isInteger(message.tradingDay))\n                            return \"tradingDay: integer expected\";\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        if (!$util.isInteger(message.actionDay))\n                            return \"actionDay: integer expected\";\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        if (!$util.isInteger(message.actionTime))\n                            return \"actionTime: integer expected\";\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (!$util.isInteger(message.actionTimestamp) && !(message.actionTimestamp && $util.isInteger(message.actionTimestamp.low) && $util.isInteger(message.actionTimestamp.high)))\n                            return \"actionTimestamp: integer|Long expected\";\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        if (typeof message.openPrice !== \"number\")\n                            return \"openPrice: number expected\";\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        if (typeof message.highPrice !== \"number\")\n                            return \"highPrice: number expected\";\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        if (typeof message.lowPrice !== \"number\")\n                            return \"lowPrice: number expected\";\n                    if (message.closePrice != null && message.hasOwnProperty(\"closePrice\"))\n                        if (typeof message.closePrice !== \"number\")\n                            return \"closePrice: number expected\";\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        if (typeof message.openInterest !== \"number\")\n                            return \"openInterest: number expected\";\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        if (typeof message.openInterestDelta !== \"number\")\n                            return \"openInterestDelta: number expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))\n                            return \"volume: integer|Long expected\";\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (!$util.isInteger(message.volumeDelta) && !(message.volumeDelta && $util.isInteger(message.volumeDelta.low) && $util.isInteger(message.volumeDelta.high)))\n                            return \"volumeDelta: integer|Long expected\";\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        if (typeof message.turnover !== \"number\")\n                            return \"turnover: number expected\";\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        if (typeof message.turnoverDelta !== \"number\")\n                            return \"turnoverDelta: number expected\";\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        if (typeof message.preOpenInterest !== \"number\")\n                            return \"preOpenInterest: number expected\";\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        if (typeof message.preClosePrice !== \"number\")\n                            return \"preClosePrice: number expected\";\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        if (typeof message.preSettlePrice !== \"number\")\n                            return \"preSettlePrice: number expected\";\n                    if (message.period != null && message.hasOwnProperty(\"period\"))\n                        if (!$util.isInteger(message.period))\n                            return \"period: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a BarField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.BarField} BarField\n                 */\n                BarField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.BarField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.BarField();\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.tradingDay != null)\n                        message.tradingDay = object.tradingDay >>> 0;\n                    if (object.actionDay != null)\n                        message.actionDay = object.actionDay >>> 0;\n                    if (object.actionTime != null)\n                        message.actionTime = object.actionTime >>> 0;\n                    if (object.actionTimestamp != null)\n                        if ($util.Long)\n                            (message.actionTimestamp = $util.Long.fromValue(object.actionTimestamp)).unsigned = false;\n                        else if (typeof object.actionTimestamp === \"string\")\n                            message.actionTimestamp = parseInt(object.actionTimestamp, 10);\n                        else if (typeof object.actionTimestamp === \"number\")\n                            message.actionTimestamp = object.actionTimestamp;\n                        else if (typeof object.actionTimestamp === \"object\")\n                            message.actionTimestamp = new $util.LongBits(object.actionTimestamp.low >>> 0, object.actionTimestamp.high >>> 0).toNumber();\n                    if (object.openPrice != null)\n                        message.openPrice = Number(object.openPrice);\n                    if (object.highPrice != null)\n                        message.highPrice = Number(object.highPrice);\n                    if (object.lowPrice != null)\n                        message.lowPrice = Number(object.lowPrice);\n                    if (object.closePrice != null)\n                        message.closePrice = Number(object.closePrice);\n                    if (object.openInterest != null)\n                        message.openInterest = Number(object.openInterest);\n                    if (object.openInterestDelta != null)\n                        message.openInterestDelta = Number(object.openInterestDelta);\n                    if (object.volume != null)\n                        if ($util.Long)\n                            (message.volume = $util.Long.fromValue(object.volume)).unsigned = false;\n                        else if (typeof object.volume === \"string\")\n                            message.volume = parseInt(object.volume, 10);\n                        else if (typeof object.volume === \"number\")\n                            message.volume = object.volume;\n                        else if (typeof object.volume === \"object\")\n                            message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber();\n                    if (object.volumeDelta != null)\n                        if ($util.Long)\n                            (message.volumeDelta = $util.Long.fromValue(object.volumeDelta)).unsigned = false;\n                        else if (typeof object.volumeDelta === \"string\")\n                            message.volumeDelta = parseInt(object.volumeDelta, 10);\n                        else if (typeof object.volumeDelta === \"number\")\n                            message.volumeDelta = object.volumeDelta;\n                        else if (typeof object.volumeDelta === \"object\")\n                            message.volumeDelta = new $util.LongBits(object.volumeDelta.low >>> 0, object.volumeDelta.high >>> 0).toNumber();\n                    if (object.turnover != null)\n                        message.turnover = Number(object.turnover);\n                    if (object.turnoverDelta != null)\n                        message.turnoverDelta = Number(object.turnoverDelta);\n                    if (object.preOpenInterest != null)\n                        message.preOpenInterest = Number(object.preOpenInterest);\n                    if (object.preClosePrice != null)\n                        message.preClosePrice = Number(object.preClosePrice);\n                    if (object.preSettlePrice != null)\n                        message.preSettlePrice = Number(object.preSettlePrice);\n                    if (object.period != null)\n                        message.period = object.period | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a BarField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @static\n                 * @param {xyz.redtorch.pb.BarField} message BarField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                BarField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.uniformSymbol = \"\";\n                        object.gatewayId = \"\";\n                        object.tradingDay = 0;\n                        object.actionDay = 0;\n                        object.actionTime = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.actionTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.actionTimestamp = options.longs === String ? \"0\" : 0;\n                        object.openPrice = 0;\n                        object.highPrice = 0;\n                        object.lowPrice = 0;\n                        object.closePrice = 0;\n                        object.openInterest = 0;\n                        object.openInterestDelta = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volume = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.volumeDelta = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.volumeDelta = options.longs === String ? \"0\" : 0;\n                        object.turnover = 0;\n                        object.turnoverDelta = 0;\n                        object.preOpenInterest = 0;\n                        object.preClosePrice = 0;\n                        object.preSettlePrice = 0;\n                        object.period = 0;\n                    }\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.tradingDay != null && message.hasOwnProperty(\"tradingDay\"))\n                        object.tradingDay = message.tradingDay;\n                    if (message.actionDay != null && message.hasOwnProperty(\"actionDay\"))\n                        object.actionDay = message.actionDay;\n                    if (message.actionTime != null && message.hasOwnProperty(\"actionTime\"))\n                        object.actionTime = message.actionTime;\n                    if (message.actionTimestamp != null && message.hasOwnProperty(\"actionTimestamp\"))\n                        if (typeof message.actionTimestamp === \"number\")\n                            object.actionTimestamp = options.longs === String ? String(message.actionTimestamp) : message.actionTimestamp;\n                        else\n                            object.actionTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.actionTimestamp) : options.longs === Number ? new $util.LongBits(message.actionTimestamp.low >>> 0, message.actionTimestamp.high >>> 0).toNumber() : message.actionTimestamp;\n                    if (message.openPrice != null && message.hasOwnProperty(\"openPrice\"))\n                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;\n                    if (message.highPrice != null && message.hasOwnProperty(\"highPrice\"))\n                        object.highPrice = options.json && !isFinite(message.highPrice) ? String(message.highPrice) : message.highPrice;\n                    if (message.lowPrice != null && message.hasOwnProperty(\"lowPrice\"))\n                        object.lowPrice = options.json && !isFinite(message.lowPrice) ? String(message.lowPrice) : message.lowPrice;\n                    if (message.closePrice != null && message.hasOwnProperty(\"closePrice\"))\n                        object.closePrice = options.json && !isFinite(message.closePrice) ? String(message.closePrice) : message.closePrice;\n                    if (message.openInterest != null && message.hasOwnProperty(\"openInterest\"))\n                        object.openInterest = options.json && !isFinite(message.openInterest) ? String(message.openInterest) : message.openInterest;\n                    if (message.openInterestDelta != null && message.hasOwnProperty(\"openInterestDelta\"))\n                        object.openInterestDelta = options.json && !isFinite(message.openInterestDelta) ? String(message.openInterestDelta) : message.openInterestDelta;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (typeof message.volume === \"number\")\n                            object.volume = options.longs === String ? String(message.volume) : message.volume;\n                        else\n                            object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber() : message.volume;\n                    if (message.volumeDelta != null && message.hasOwnProperty(\"volumeDelta\"))\n                        if (typeof message.volumeDelta === \"number\")\n                            object.volumeDelta = options.longs === String ? String(message.volumeDelta) : message.volumeDelta;\n                        else\n                            object.volumeDelta = options.longs === String ? $util.Long.prototype.toString.call(message.volumeDelta) : options.longs === Number ? new $util.LongBits(message.volumeDelta.low >>> 0, message.volumeDelta.high >>> 0).toNumber() : message.volumeDelta;\n                    if (message.turnover != null && message.hasOwnProperty(\"turnover\"))\n                        object.turnover = options.json && !isFinite(message.turnover) ? String(message.turnover) : message.turnover;\n                    if (message.turnoverDelta != null && message.hasOwnProperty(\"turnoverDelta\"))\n                        object.turnoverDelta = options.json && !isFinite(message.turnoverDelta) ? String(message.turnoverDelta) : message.turnoverDelta;\n                    if (message.preOpenInterest != null && message.hasOwnProperty(\"preOpenInterest\"))\n                        object.preOpenInterest = options.json && !isFinite(message.preOpenInterest) ? String(message.preOpenInterest) : message.preOpenInterest;\n                    if (message.preClosePrice != null && message.hasOwnProperty(\"preClosePrice\"))\n                        object.preClosePrice = options.json && !isFinite(message.preClosePrice) ? String(message.preClosePrice) : message.preClosePrice;\n                    if (message.preSettlePrice != null && message.hasOwnProperty(\"preSettlePrice\"))\n                        object.preSettlePrice = options.json && !isFinite(message.preSettlePrice) ? String(message.preSettlePrice) : message.preSettlePrice;\n                    if (message.period != null && message.hasOwnProperty(\"period\"))\n                        object.period = message.period;\n                    return object;\n                };\n\n                /**\n                 * Converts this BarField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.BarField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                BarField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return BarField;\n            })();\n\n            pb.CommonReqField = (function() {\n\n                /**\n                 * Properties of a CommonReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ICommonReqField\n                 * @property {string|null} [transactionId] CommonReqField transactionId\n                 * @property {string|null} [operatorId] CommonReqField operatorId\n                 */\n\n                /**\n                 * Constructs a new CommonReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a CommonReqField.\n                 * @implements ICommonReqField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ICommonReqField=} [properties] Properties to set\n                 */\n                function CommonReqField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommonReqField transactionId.\n                 * @member {string} transactionId\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @instance\n                 */\n                CommonReqField.prototype.transactionId = \"\";\n\n                /**\n                 * CommonReqField operatorId.\n                 * @member {string} operatorId\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @instance\n                 */\n                CommonReqField.prototype.operatorId = \"\";\n\n                /**\n                 * Creates a new CommonReqField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonReqField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField instance\n                 */\n                CommonReqField.create = function create(properties) {\n                    return new CommonReqField(properties);\n                };\n\n                /**\n                 * Encodes the specified CommonReqField message. Does not implicitly {@link xyz.redtorch.pb.CommonReqField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonReqField} message CommonReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonReqField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.transactionId);\n                    if (message.operatorId != null && message.hasOwnProperty(\"operatorId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.operatorId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommonReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CommonReqField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonReqField} message CommonReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonReqField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommonReqField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonReqField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CommonReqField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.transactionId = reader.string();\n                            break;\n                        case 2:\n                            message.operatorId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommonReqField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonReqField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommonReqField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommonReqField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        if (!$util.isString(message.transactionId))\n                            return \"transactionId: string expected\";\n                    if (message.operatorId != null && message.hasOwnProperty(\"operatorId\"))\n                        if (!$util.isString(message.operatorId))\n                            return \"operatorId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommonReqField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField\n                 */\n                CommonReqField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.CommonReqField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.CommonReqField();\n                    if (object.transactionId != null)\n                        message.transactionId = String(object.transactionId);\n                    if (object.operatorId != null)\n                        message.operatorId = String(object.operatorId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommonReqField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.CommonReqField} message CommonReqField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommonReqField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.transactionId = \"\";\n                        object.operatorId = \"\";\n                    }\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        object.transactionId = message.transactionId;\n                    if (message.operatorId != null && message.hasOwnProperty(\"operatorId\"))\n                        object.operatorId = message.operatorId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommonReqField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.CommonReqField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommonReqField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommonReqField;\n            })();\n\n            pb.CommonRspField = (function() {\n\n                /**\n                 * Properties of a CommonRspField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ICommonRspField\n                 * @property {string|null} [transactionId] CommonRspField transactionId\n                 * @property {number|null} [errorId] CommonRspField errorId\n                 * @property {string|null} [errorMsg] CommonRspField errorMsg\n                 */\n\n                /**\n                 * Constructs a new CommonRspField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a CommonRspField.\n                 * @implements ICommonRspField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ICommonRspField=} [properties] Properties to set\n                 */\n                function CommonRspField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommonRspField transactionId.\n                 * @member {string} transactionId\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 */\n                CommonRspField.prototype.transactionId = \"\";\n\n                /**\n                 * CommonRspField errorId.\n                 * @member {number} errorId\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 */\n                CommonRspField.prototype.errorId = 0;\n\n                /**\n                 * CommonRspField errorMsg.\n                 * @member {string} errorMsg\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 */\n                CommonRspField.prototype.errorMsg = \"\";\n\n                /**\n                 * Creates a new CommonRspField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonRspField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField instance\n                 */\n                CommonRspField.create = function create(properties) {\n                    return new CommonRspField(properties);\n                };\n\n                /**\n                 * Encodes the specified CommonRspField message. Does not implicitly {@link xyz.redtorch.pb.CommonRspField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonRspField} message CommonRspField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonRspField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.transactionId);\n                    if (message.errorId != null && message.hasOwnProperty(\"errorId\"))\n                        writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.errorId);\n                    if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.errorMsg);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommonRspField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CommonRspField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICommonRspField} message CommonRspField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommonRspField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommonRspField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonRspField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CommonRspField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.transactionId = reader.string();\n                            break;\n                        case 2:\n                            message.errorId = reader.fixed32();\n                            break;\n                        case 3:\n                            message.errorMsg = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommonRspField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommonRspField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommonRspField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommonRspField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        if (!$util.isString(message.transactionId))\n                            return \"transactionId: string expected\";\n                    if (message.errorId != null && message.hasOwnProperty(\"errorId\"))\n                        if (!$util.isInteger(message.errorId))\n                            return \"errorId: integer expected\";\n                    if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                        if (!$util.isString(message.errorMsg))\n                            return \"errorMsg: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommonRspField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField\n                 */\n                CommonRspField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.CommonRspField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.CommonRspField();\n                    if (object.transactionId != null)\n                        message.transactionId = String(object.transactionId);\n                    if (object.errorId != null)\n                        message.errorId = object.errorId >>> 0;\n                    if (object.errorMsg != null)\n                        message.errorMsg = String(object.errorMsg);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommonRspField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @static\n                 * @param {xyz.redtorch.pb.CommonRspField} message CommonRspField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommonRspField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.transactionId = \"\";\n                        object.errorId = 0;\n                        object.errorMsg = \"\";\n                    }\n                    if (message.transactionId != null && message.hasOwnProperty(\"transactionId\"))\n                        object.transactionId = message.transactionId;\n                    if (message.errorId != null && message.hasOwnProperty(\"errorId\"))\n                        object.errorId = message.errorId;\n                    if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                        object.errorMsg = message.errorMsg;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommonRspField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.CommonRspField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommonRspField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommonRspField;\n            })();\n\n            pb.SubmitOrderReqField = (function() {\n\n                /**\n                 * Properties of a SubmitOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ISubmitOrderReqField\n                 * @property {string|null} [originOrderId] SubmitOrderReqField originOrderId\n                 * @property {string|null} [accountCode] SubmitOrderReqField accountCode\n                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] SubmitOrderReqField currency\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] SubmitOrderReqField contract\n                 * @property {string|null} [gatewayId] SubmitOrderReqField gatewayId\n                 * @property {number|null} [volume] SubmitOrderReqField volume\n                 * @property {number|null} [price] SubmitOrderReqField price\n                 * @property {xyz.redtorch.pb.OrderPriceTypeEnum|null} [orderPriceType] SubmitOrderReqField orderPriceType\n                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] SubmitOrderReqField direction\n                 * @property {xyz.redtorch.pb.OffsetFlagEnum|null} [offsetFlag] SubmitOrderReqField offsetFlag\n                 * @property {xyz.redtorch.pb.HedgeFlagEnum|null} [hedgeFlag] SubmitOrderReqField hedgeFlag\n                 * @property {xyz.redtorch.pb.TimeConditionEnum|null} [timeCondition] SubmitOrderReqField timeCondition\n                 * @property {string|null} [gtdDate] SubmitOrderReqField gtdDate\n                 * @property {xyz.redtorch.pb.VolumeConditionEnum|null} [volumeCondition] SubmitOrderReqField volumeCondition\n                 * @property {number|null} [minVolume] SubmitOrderReqField minVolume\n                 * @property {xyz.redtorch.pb.ContingentConditionEnum|null} [contingentCondition] SubmitOrderReqField contingentCondition\n                 * @property {number|null} [stopPrice] SubmitOrderReqField stopPrice\n                 * @property {xyz.redtorch.pb.ForceCloseReasonEnum|null} [forceCloseReason] SubmitOrderReqField forceCloseReason\n                 * @property {number|null} [autoSuspend] SubmitOrderReqField autoSuspend\n                 * @property {number|null} [userForceClose] SubmitOrderReqField userForceClose\n                 * @property {number|null} [swapOrder] SubmitOrderReqField swapOrder\n                 */\n\n                /**\n                 * Constructs a new SubmitOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a SubmitOrderReqField.\n                 * @implements ISubmitOrderReqField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField=} [properties] Properties to set\n                 */\n                function SubmitOrderReqField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SubmitOrderReqField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.originOrderId = \"\";\n\n                /**\n                 * SubmitOrderReqField accountCode.\n                 * @member {string} accountCode\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.accountCode = \"\";\n\n                /**\n                 * SubmitOrderReqField currency.\n                 * @member {xyz.redtorch.pb.CurrencyEnum} currency\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.currency = 0;\n\n                /**\n                 * SubmitOrderReqField contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.contract = null;\n\n                /**\n                 * SubmitOrderReqField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.gatewayId = \"\";\n\n                /**\n                 * SubmitOrderReqField volume.\n                 * @member {number} volume\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.volume = 0;\n\n                /**\n                 * SubmitOrderReqField price.\n                 * @member {number} price\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.price = 0;\n\n                /**\n                 * SubmitOrderReqField orderPriceType.\n                 * @member {xyz.redtorch.pb.OrderPriceTypeEnum} orderPriceType\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.orderPriceType = 0;\n\n                /**\n                 * SubmitOrderReqField direction.\n                 * @member {xyz.redtorch.pb.DirectionEnum} direction\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.direction = 0;\n\n                /**\n                 * SubmitOrderReqField offsetFlag.\n                 * @member {xyz.redtorch.pb.OffsetFlagEnum} offsetFlag\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.offsetFlag = 0;\n\n                /**\n                 * SubmitOrderReqField hedgeFlag.\n                 * @member {xyz.redtorch.pb.HedgeFlagEnum} hedgeFlag\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.hedgeFlag = 0;\n\n                /**\n                 * SubmitOrderReqField timeCondition.\n                 * @member {xyz.redtorch.pb.TimeConditionEnum} timeCondition\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.timeCondition = 0;\n\n                /**\n                 * SubmitOrderReqField gtdDate.\n                 * @member {string} gtdDate\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.gtdDate = \"\";\n\n                /**\n                 * SubmitOrderReqField volumeCondition.\n                 * @member {xyz.redtorch.pb.VolumeConditionEnum} volumeCondition\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.volumeCondition = 0;\n\n                /**\n                 * SubmitOrderReqField minVolume.\n                 * @member {number} minVolume\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.minVolume = 0;\n\n                /**\n                 * SubmitOrderReqField contingentCondition.\n                 * @member {xyz.redtorch.pb.ContingentConditionEnum} contingentCondition\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.contingentCondition = 0;\n\n                /**\n                 * SubmitOrderReqField stopPrice.\n                 * @member {number} stopPrice\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.stopPrice = 0;\n\n                /**\n                 * SubmitOrderReqField forceCloseReason.\n                 * @member {xyz.redtorch.pb.ForceCloseReasonEnum} forceCloseReason\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.forceCloseReason = 0;\n\n                /**\n                 * SubmitOrderReqField autoSuspend.\n                 * @member {number} autoSuspend\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.autoSuspend = 0;\n\n                /**\n                 * SubmitOrderReqField userForceClose.\n                 * @member {number} userForceClose\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.userForceClose = 0;\n\n                /**\n                 * SubmitOrderReqField swapOrder.\n                 * @member {number} swapOrder\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 */\n                SubmitOrderReqField.prototype.swapOrder = 0;\n\n                /**\n                 * Creates a new SubmitOrderReqField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField instance\n                 */\n                SubmitOrderReqField.create = function create(properties) {\n                    return new SubmitOrderReqField(properties);\n                };\n\n                /**\n                 * Encodes the specified SubmitOrderReqField message. Does not implicitly {@link xyz.redtorch.pb.SubmitOrderReqField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField} message SubmitOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubmitOrderReqField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.originOrderId);\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountCode);\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.currency);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.gatewayId);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.volume);\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.price);\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.orderPriceType);\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.direction);\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.offsetFlag);\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.hedgeFlag);\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.timeCondition);\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.gtdDate);\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.volumeCondition);\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        writer.uint32(/* id 15, wireType 5 =*/125).fixed32(message.minVolume);\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        writer.uint32(/* id 16, wireType 0 =*/128).int32(message.contingentCondition);\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.stopPrice);\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.forceCloseReason);\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        writer.uint32(/* id 19, wireType 5 =*/157).fixed32(message.autoSuspend);\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        writer.uint32(/* id 20, wireType 5 =*/165).fixed32(message.userForceClose);\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        writer.uint32(/* id 21, wireType 5 =*/173).fixed32(message.swapOrder);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SubmitOrderReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.SubmitOrderReqField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ISubmitOrderReqField} message SubmitOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubmitOrderReqField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SubmitOrderReqField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubmitOrderReqField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.SubmitOrderReqField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 2:\n                            message.accountCode = reader.string();\n                            break;\n                        case 3:\n                            message.currency = reader.int32();\n                            break;\n                        case 4:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 6:\n                            message.volume = reader.fixed32();\n                            break;\n                        case 7:\n                            message.price = reader.double();\n                            break;\n                        case 8:\n                            message.orderPriceType = reader.int32();\n                            break;\n                        case 9:\n                            message.direction = reader.int32();\n                            break;\n                        case 10:\n                            message.offsetFlag = reader.int32();\n                            break;\n                        case 11:\n                            message.hedgeFlag = reader.int32();\n                            break;\n                        case 12:\n                            message.timeCondition = reader.int32();\n                            break;\n                        case 13:\n                            message.gtdDate = reader.string();\n                            break;\n                        case 14:\n                            message.volumeCondition = reader.int32();\n                            break;\n                        case 15:\n                            message.minVolume = reader.fixed32();\n                            break;\n                        case 16:\n                            message.contingentCondition = reader.int32();\n                            break;\n                        case 17:\n                            message.stopPrice = reader.double();\n                            break;\n                        case 18:\n                            message.forceCloseReason = reader.int32();\n                            break;\n                        case 19:\n                            message.autoSuspend = reader.fixed32();\n                            break;\n                        case 20:\n                            message.userForceClose = reader.fixed32();\n                            break;\n                        case 21:\n                            message.swapOrder = reader.fixed32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SubmitOrderReqField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubmitOrderReqField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SubmitOrderReqField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SubmitOrderReqField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        if (!$util.isString(message.accountCode))\n                            return \"accountCode: string expected\";\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        switch (message.currency) {\n                        default:\n                            return \"currency: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                            break;\n                        }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume))\n                            return \"volume: integer expected\";\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        if (typeof message.price !== \"number\")\n                            return \"price: number expected\";\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        switch (message.orderPriceType) {\n                        default:\n                            return \"orderPriceType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                            break;\n                        }\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        switch (message.direction) {\n                        default:\n                            return \"direction: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        switch (message.offsetFlag) {\n                        default:\n                            return \"offsetFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        switch (message.hedgeFlag) {\n                        default:\n                            return \"hedgeFlag: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        switch (message.timeCondition) {\n                        default:\n                            return \"timeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        if (!$util.isString(message.gtdDate))\n                            return \"gtdDate: string expected\";\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        switch (message.volumeCondition) {\n                        default:\n                            return \"volumeCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        if (!$util.isInteger(message.minVolume))\n                            return \"minVolume: integer expected\";\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        switch (message.contingentCondition) {\n                        default:\n                            return \"contingentCondition: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                            break;\n                        }\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        if (typeof message.stopPrice !== \"number\")\n                            return \"stopPrice: number expected\";\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        switch (message.forceCloseReason) {\n                        default:\n                            return \"forceCloseReason: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                            break;\n                        }\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        if (!$util.isInteger(message.autoSuspend))\n                            return \"autoSuspend: integer expected\";\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        if (!$util.isInteger(message.userForceClose))\n                            return \"userForceClose: integer expected\";\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        if (!$util.isInteger(message.swapOrder))\n                            return \"swapOrder: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SubmitOrderReqField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField\n                 */\n                SubmitOrderReqField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.SubmitOrderReqField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.SubmitOrderReqField();\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.accountCode != null)\n                        message.accountCode = String(object.accountCode);\n                    switch (object.currency) {\n                    case \"UnknownCurrency\":\n                    case 0:\n                        message.currency = 0;\n                        break;\n                    case \"USD\":\n                    case 1:\n                        message.currency = 1;\n                        break;\n                    case \"CNY\":\n                    case 2:\n                        message.currency = 2;\n                        break;\n                    case \"CNH\":\n                    case 3:\n                        message.currency = 3;\n                        break;\n                    case \"HKD\":\n                    case 4:\n                        message.currency = 4;\n                        break;\n                    case \"JPY\":\n                    case 5:\n                        message.currency = 5;\n                        break;\n                    case \"EUR\":\n                    case 6:\n                        message.currency = 6;\n                        break;\n                    case \"GBP\":\n                    case 7:\n                        message.currency = 7;\n                        break;\n                    case \"DEM\":\n                    case 8:\n                        message.currency = 8;\n                        break;\n                    case \"CHF\":\n                    case 9:\n                        message.currency = 9;\n                        break;\n                    case \"FRF\":\n                    case 10:\n                        message.currency = 10;\n                        break;\n                    case \"CAD\":\n                    case 11:\n                        message.currency = 11;\n                        break;\n                    case \"AUD\":\n                    case 12:\n                        message.currency = 12;\n                        break;\n                    case \"ATS\":\n                    case 13:\n                        message.currency = 13;\n                        break;\n                    case \"FIM\":\n                    case 14:\n                        message.currency = 14;\n                        break;\n                    case \"BEF\":\n                    case 15:\n                        message.currency = 15;\n                        break;\n                    case \"THB\":\n                    case 16:\n                        message.currency = 16;\n                        break;\n                    case \"IEP\":\n                    case 17:\n                        message.currency = 17;\n                        break;\n                    case \"ITL\":\n                    case 18:\n                        message.currency = 18;\n                        break;\n                    case \"LUF\":\n                    case 19:\n                        message.currency = 19;\n                        break;\n                    case \"NLG\":\n                    case 20:\n                        message.currency = 20;\n                        break;\n                    case \"PTE\":\n                    case 21:\n                        message.currency = 21;\n                        break;\n                    case \"ESP\":\n                    case 22:\n                        message.currency = 22;\n                        break;\n                    case \"IDR\":\n                    case 23:\n                        message.currency = 23;\n                        break;\n                    case \"MYR\":\n                    case 24:\n                        message.currency = 24;\n                        break;\n                    case \"NZD\":\n                    case 25:\n                        message.currency = 25;\n                        break;\n                    case \"PHP\":\n                    case 26:\n                        message.currency = 26;\n                        break;\n                    case \"SUR\":\n                    case 27:\n                        message.currency = 27;\n                        break;\n                    case \"SGD\":\n                    case 28:\n                        message.currency = 28;\n                        break;\n                    case \"KRW\":\n                    case 29:\n                        message.currency = 29;\n                        break;\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.SubmitOrderReqField.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.volume != null)\n                        message.volume = object.volume >>> 0;\n                    if (object.price != null)\n                        message.price = Number(object.price);\n                    switch (object.orderPriceType) {\n                    case \"OPT_Unknown\":\n                    case 0:\n                        message.orderPriceType = 0;\n                        break;\n                    case \"OPT_AnyPrice\":\n                    case 1:\n                        message.orderPriceType = 1;\n                        break;\n                    case \"OPT_LimitPrice\":\n                    case 2:\n                        message.orderPriceType = 2;\n                        break;\n                    case \"OPT_BestPrice\":\n                    case 3:\n                        message.orderPriceType = 3;\n                        break;\n                    case \"OPT_LastPrice\":\n                    case 4:\n                        message.orderPriceType = 4;\n                        break;\n                    case \"OPT_LastPricePlusOneTicks\":\n                    case 5:\n                        message.orderPriceType = 5;\n                        break;\n                    case \"OPT_LastPricePlusTwoTicks\":\n                    case 6:\n                        message.orderPriceType = 6;\n                        break;\n                    case \"OPT_LastPricePlusThreeTicks\":\n                    case 7:\n                        message.orderPriceType = 7;\n                        break;\n                    case \"OPT_AskPrice1\":\n                    case 8:\n                        message.orderPriceType = 8;\n                        break;\n                    case \"OPT_AskPrice1PlusOneTicks\":\n                    case 9:\n                        message.orderPriceType = 9;\n                        break;\n                    case \"OPT_AskPrice1PlusTwoTicks\":\n                    case 10:\n                        message.orderPriceType = 10;\n                        break;\n                    case \"OPT_AskPrice1PlusThreeTicks\":\n                    case 11:\n                        message.orderPriceType = 11;\n                        break;\n                    case \"OPT_BidPrice1\":\n                    case 12:\n                        message.orderPriceType = 12;\n                        break;\n                    case \"OPT_BidPrice1PlusOneTicks\":\n                    case 13:\n                        message.orderPriceType = 13;\n                        break;\n                    case \"OPT_BidPrice1PlusTwoTicks\":\n                    case 14:\n                        message.orderPriceType = 14;\n                        break;\n                    case \"OPT_BidPrice1PlusThreeTicks\":\n                    case 15:\n                        message.orderPriceType = 15;\n                        break;\n                    case \"OPT_FiveLevelPrice\":\n                    case 16:\n                        message.orderPriceType = 16;\n                        break;\n                    }\n                    switch (object.direction) {\n                    case \"D_Unknown\":\n                    case 0:\n                        message.direction = 0;\n                        break;\n                    case \"D_Buy\":\n                    case 1:\n                        message.direction = 1;\n                        break;\n                    case \"D_Sell\":\n                    case 2:\n                        message.direction = 2;\n                        break;\n                    }\n                    switch (object.offsetFlag) {\n                    case \"OF_Unknown\":\n                    case 0:\n                        message.offsetFlag = 0;\n                        break;\n                    case \"OF_Open\":\n                    case 1:\n                        message.offsetFlag = 1;\n                        break;\n                    case \"OF_Close\":\n                    case 2:\n                        message.offsetFlag = 2;\n                        break;\n                    case \"OF_ForceClose\":\n                    case 3:\n                        message.offsetFlag = 3;\n                        break;\n                    case \"OF_CloseToday\":\n                    case 4:\n                        message.offsetFlag = 4;\n                        break;\n                    case \"OF_CloseYesterday\":\n                    case 5:\n                        message.offsetFlag = 5;\n                        break;\n                    case \"OF_ForceOff\":\n                    case 6:\n                        message.offsetFlag = 6;\n                        break;\n                    case \"OF_LocalForceClose\":\n                    case 7:\n                        message.offsetFlag = 7;\n                        break;\n                    }\n                    switch (object.hedgeFlag) {\n                    case \"HF_Unknown\":\n                    case 0:\n                        message.hedgeFlag = 0;\n                        break;\n                    case \"HF_Speculation\":\n                    case 1:\n                        message.hedgeFlag = 1;\n                        break;\n                    case \"HF_Arbitrage\":\n                    case 2:\n                        message.hedgeFlag = 2;\n                        break;\n                    case \"HF_Hedge\":\n                    case 3:\n                        message.hedgeFlag = 3;\n                        break;\n                    case \"HF_MarketMaker\":\n                    case 4:\n                        message.hedgeFlag = 4;\n                        break;\n                    case \"HF_SpecHedge\":\n                    case 5:\n                        message.hedgeFlag = 5;\n                        break;\n                    case \"HF_HedgeSpec\":\n                    case 6:\n                        message.hedgeFlag = 6;\n                        break;\n                    }\n                    switch (object.timeCondition) {\n                    case \"TC_Unknown\":\n                    case 0:\n                        message.timeCondition = 0;\n                        break;\n                    case \"TC_IOC\":\n                    case 1:\n                        message.timeCondition = 1;\n                        break;\n                    case \"TC_GFS\":\n                    case 2:\n                        message.timeCondition = 2;\n                        break;\n                    case \"TC_GFD\":\n                    case 3:\n                        message.timeCondition = 3;\n                        break;\n                    case \"TC_GTD\":\n                    case 4:\n                        message.timeCondition = 4;\n                        break;\n                    case \"TC_GTC\":\n                    case 5:\n                        message.timeCondition = 5;\n                        break;\n                    case \"TC_GFA\":\n                    case 6:\n                        message.timeCondition = 6;\n                        break;\n                    }\n                    if (object.gtdDate != null)\n                        message.gtdDate = String(object.gtdDate);\n                    switch (object.volumeCondition) {\n                    case \"VC_Unknown\":\n                    case 0:\n                        message.volumeCondition = 0;\n                        break;\n                    case \"VC_AV\":\n                    case 1:\n                        message.volumeCondition = 1;\n                        break;\n                    case \"VC_MV\":\n                    case 2:\n                        message.volumeCondition = 2;\n                        break;\n                    case \"VC_CV\":\n                    case 3:\n                        message.volumeCondition = 3;\n                        break;\n                    }\n                    if (object.minVolume != null)\n                        message.minVolume = object.minVolume >>> 0;\n                    switch (object.contingentCondition) {\n                    case \"CC_Unknown\":\n                    case 0:\n                        message.contingentCondition = 0;\n                        break;\n                    case \"CC_Immediately\":\n                    case 1:\n                        message.contingentCondition = 1;\n                        break;\n                    case \"CC_Touch\":\n                    case 2:\n                        message.contingentCondition = 2;\n                        break;\n                    case \"CC_TouchProfit\":\n                    case 3:\n                        message.contingentCondition = 3;\n                        break;\n                    case \"CC_ParkedOrder\":\n                    case 4:\n                        message.contingentCondition = 4;\n                        break;\n                    case \"CC_LastPriceGreaterThanStopPrice\":\n                    case 5:\n                        message.contingentCondition = 5;\n                        break;\n                    case \"CC_LastPriceGreaterEqualStopPrice\":\n                    case 6:\n                        message.contingentCondition = 6;\n                        break;\n                    case \"CC_LastPriceLesserThanStopPrice\":\n                    case 7:\n                        message.contingentCondition = 7;\n                        break;\n                    case \"CC_LastPriceLesserEqualStopPrice\":\n                    case 8:\n                        message.contingentCondition = 8;\n                        break;\n                    case \"CC_AskPriceGreaterThanStopPrice\":\n                    case 9:\n                        message.contingentCondition = 9;\n                        break;\n                    case \"CC_AskPriceGreaterEqualStopPrice\":\n                    case 10:\n                        message.contingentCondition = 10;\n                        break;\n                    case \"CC_AskPriceLesserThanStopPrice\":\n                    case 11:\n                        message.contingentCondition = 11;\n                        break;\n                    case \"CC_AskPriceLesserEqualStopPrice\":\n                    case 12:\n                        message.contingentCondition = 12;\n                        break;\n                    case \"CC_BidPriceGreaterThanStopPrice\":\n                    case 13:\n                        message.contingentCondition = 13;\n                        break;\n                    case \"CC_BidPriceGreaterEqualStopPrice\":\n                    case 14:\n                        message.contingentCondition = 14;\n                        break;\n                    case \"CC_BidPriceLesserThanStopPrice\":\n                    case 15:\n                        message.contingentCondition = 15;\n                        break;\n                    case \"CC_BidPriceLesserEqualStopPrice\":\n                    case 16:\n                        message.contingentCondition = 16;\n                        break;\n                    case \"CC_LocalLastPriceLesserEqualStopPrice\":\n                    case 17:\n                        message.contingentCondition = 17;\n                        break;\n                    case \"CC_LocalLastPriceGreaterEqualStopPrice\":\n                    case 18:\n                        message.contingentCondition = 18;\n                        break;\n                    }\n                    if (object.stopPrice != null)\n                        message.stopPrice = Number(object.stopPrice);\n                    switch (object.forceCloseReason) {\n                    case \"FCR_Unknown\":\n                    case 0:\n                        message.forceCloseReason = 0;\n                        break;\n                    case \"FCR_NotForceClose\":\n                    case 1:\n                        message.forceCloseReason = 1;\n                        break;\n                    case \"FCR_LackDeposit\":\n                    case 2:\n                        message.forceCloseReason = 2;\n                        break;\n                    case \"FCR_ClientOverPositionLimit\":\n                    case 3:\n                        message.forceCloseReason = 3;\n                        break;\n                    case \"FCR_MemberOverPositionLimit\":\n                    case 4:\n                        message.forceCloseReason = 4;\n                        break;\n                    case \"FCR_NotMultiple\":\n                    case 5:\n                        message.forceCloseReason = 5;\n                        break;\n                    case \"FCR_Violation\":\n                    case 6:\n                        message.forceCloseReason = 6;\n                        break;\n                    case \"FCR_Other\":\n                    case 7:\n                        message.forceCloseReason = 7;\n                        break;\n                    case \"FCR_PersonDeliver\":\n                    case 8:\n                        message.forceCloseReason = 8;\n                        break;\n                    }\n                    if (object.autoSuspend != null)\n                        message.autoSuspend = object.autoSuspend >>> 0;\n                    if (object.userForceClose != null)\n                        message.userForceClose = object.userForceClose >>> 0;\n                    if (object.swapOrder != null)\n                        message.swapOrder = object.swapOrder >>> 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SubmitOrderReqField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.SubmitOrderReqField} message SubmitOrderReqField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SubmitOrderReqField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originOrderId = \"\";\n                        object.accountCode = \"\";\n                        object.currency = options.enums === String ? \"UnknownCurrency\" : 0;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                        object.volume = 0;\n                        object.price = 0;\n                        object.orderPriceType = options.enums === String ? \"OPT_Unknown\" : 0;\n                        object.direction = options.enums === String ? \"D_Unknown\" : 0;\n                        object.offsetFlag = options.enums === String ? \"OF_Unknown\" : 0;\n                        object.hedgeFlag = options.enums === String ? \"HF_Unknown\" : 0;\n                        object.timeCondition = options.enums === String ? \"TC_Unknown\" : 0;\n                        object.gtdDate = \"\";\n                        object.volumeCondition = options.enums === String ? \"VC_Unknown\" : 0;\n                        object.minVolume = 0;\n                        object.contingentCondition = options.enums === String ? \"CC_Unknown\" : 0;\n                        object.stopPrice = 0;\n                        object.forceCloseReason = options.enums === String ? \"FCR_Unknown\" : 0;\n                        object.autoSuspend = 0;\n                        object.userForceClose = 0;\n                        object.swapOrder = 0;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        object.accountCode = message.accountCode;\n                    if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        object.volume = message.volume;\n                    if (message.price != null && message.hasOwnProperty(\"price\"))\n                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;\n                    if (message.orderPriceType != null && message.hasOwnProperty(\"orderPriceType\"))\n                        object.orderPriceType = options.enums === String ? $root.xyz.redtorch.pb.OrderPriceTypeEnum[message.orderPriceType] : message.orderPriceType;\n                    if (message.direction != null && message.hasOwnProperty(\"direction\"))\n                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;\n                    if (message.offsetFlag != null && message.hasOwnProperty(\"offsetFlag\"))\n                        object.offsetFlag = options.enums === String ? $root.xyz.redtorch.pb.OffsetFlagEnum[message.offsetFlag] : message.offsetFlag;\n                    if (message.hedgeFlag != null && message.hasOwnProperty(\"hedgeFlag\"))\n                        object.hedgeFlag = options.enums === String ? $root.xyz.redtorch.pb.HedgeFlagEnum[message.hedgeFlag] : message.hedgeFlag;\n                    if (message.timeCondition != null && message.hasOwnProperty(\"timeCondition\"))\n                        object.timeCondition = options.enums === String ? $root.xyz.redtorch.pb.TimeConditionEnum[message.timeCondition] : message.timeCondition;\n                    if (message.gtdDate != null && message.hasOwnProperty(\"gtdDate\"))\n                        object.gtdDate = message.gtdDate;\n                    if (message.volumeCondition != null && message.hasOwnProperty(\"volumeCondition\"))\n                        object.volumeCondition = options.enums === String ? $root.xyz.redtorch.pb.VolumeConditionEnum[message.volumeCondition] : message.volumeCondition;\n                    if (message.minVolume != null && message.hasOwnProperty(\"minVolume\"))\n                        object.minVolume = message.minVolume;\n                    if (message.contingentCondition != null && message.hasOwnProperty(\"contingentCondition\"))\n                        object.contingentCondition = options.enums === String ? $root.xyz.redtorch.pb.ContingentConditionEnum[message.contingentCondition] : message.contingentCondition;\n                    if (message.stopPrice != null && message.hasOwnProperty(\"stopPrice\"))\n                        object.stopPrice = options.json && !isFinite(message.stopPrice) ? String(message.stopPrice) : message.stopPrice;\n                    if (message.forceCloseReason != null && message.hasOwnProperty(\"forceCloseReason\"))\n                        object.forceCloseReason = options.enums === String ? $root.xyz.redtorch.pb.ForceCloseReasonEnum[message.forceCloseReason] : message.forceCloseReason;\n                    if (message.autoSuspend != null && message.hasOwnProperty(\"autoSuspend\"))\n                        object.autoSuspend = message.autoSuspend;\n                    if (message.userForceClose != null && message.hasOwnProperty(\"userForceClose\"))\n                        object.userForceClose = message.userForceClose;\n                    if (message.swapOrder != null && message.hasOwnProperty(\"swapOrder\"))\n                        object.swapOrder = message.swapOrder;\n                    return object;\n                };\n\n                /**\n                 * Converts this SubmitOrderReqField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.SubmitOrderReqField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SubmitOrderReqField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SubmitOrderReqField;\n            })();\n\n            pb.CancelOrderReqField = (function() {\n\n                /**\n                 * Properties of a CancelOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ICancelOrderReqField\n                 * @property {string|null} [originOrderId] CancelOrderReqField originOrderId\n                 * @property {string|null} [orderId] CancelOrderReqField orderId\n                 */\n\n                /**\n                 * Constructs a new CancelOrderReqField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a CancelOrderReqField.\n                 * @implements ICancelOrderReqField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField=} [properties] Properties to set\n                 */\n                function CancelOrderReqField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CancelOrderReqField originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @instance\n                 */\n                CancelOrderReqField.prototype.originOrderId = \"\";\n\n                /**\n                 * CancelOrderReqField orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @instance\n                 */\n                CancelOrderReqField.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new CancelOrderReqField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField instance\n                 */\n                CancelOrderReqField.create = function create(properties) {\n                    return new CancelOrderReqField(properties);\n                };\n\n                /**\n                 * Encodes the specified CancelOrderReqField message. Does not implicitly {@link xyz.redtorch.pb.CancelOrderReqField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField} message CancelOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CancelOrderReqField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originOrderId);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CancelOrderReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CancelOrderReqField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.ICancelOrderReqField} message CancelOrderReqField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CancelOrderReqField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CancelOrderReqField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CancelOrderReqField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CancelOrderReqField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 3:\n                            message.originOrderId = reader.string();\n                            break;\n                        case 4:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CancelOrderReqField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CancelOrderReqField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CancelOrderReqField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CancelOrderReqField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CancelOrderReqField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField\n                 */\n                CancelOrderReqField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.CancelOrderReqField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.CancelOrderReqField();\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CancelOrderReqField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @static\n                 * @param {xyz.redtorch.pb.CancelOrderReqField} message CancelOrderReqField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CancelOrderReqField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originOrderId = \"\";\n                        object.orderId = \"\";\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CancelOrderReqField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.CancelOrderReqField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CancelOrderReqField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CancelOrderReqField;\n            })();\n\n            pb.GatewaySettingField = (function() {\n\n                /**\n                 * Properties of a GatewaySettingField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IGatewaySettingField\n                 * @property {string|null} [gatewayId] GatewaySettingField gatewayId\n                 * @property {string|null} [gatewayName] GatewaySettingField gatewayName\n                 * @property {string|null} [gatewayDescription] GatewaySettingField gatewayDescription\n                 * @property {string|null} [implementClassName] GatewaySettingField implementClassName\n                 * @property {xyz.redtorch.pb.GatewayTypeEnum|null} [gatewayType] GatewaySettingField gatewayType\n                 * @property {xyz.redtorch.pb.GatewayAdapterTypeEnum|null} [gatewayAdapterType] GatewaySettingField gatewayAdapterType\n                 * @property {number|null} [targetNodeId] GatewaySettingField targetNodeId\n                 * @property {string|null} [autoConnectTimeRanges] GatewaySettingField autoConnectTimeRanges\n                 * @property {xyz.redtorch.pb.ConnectStatusEnum|null} [status] GatewaySettingField status\n                 * @property {number|Long|null} [version] GatewaySettingField version\n                 * @property {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField|null} [ctpApiSetting] GatewaySettingField ctpApiSetting\n                 * @property {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField|null} [ibApiSetting] GatewaySettingField ibApiSetting\n                 */\n\n                /**\n                 * Constructs a new GatewaySettingField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a GatewaySettingField.\n                 * @implements IGatewaySettingField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IGatewaySettingField=} [properties] Properties to set\n                 */\n                function GatewaySettingField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * GatewaySettingField gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayId = \"\";\n\n                /**\n                 * GatewaySettingField gatewayName.\n                 * @member {string} gatewayName\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayName = \"\";\n\n                /**\n                 * GatewaySettingField gatewayDescription.\n                 * @member {string} gatewayDescription\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayDescription = \"\";\n\n                /**\n                 * GatewaySettingField implementClassName.\n                 * @member {string} implementClassName\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.implementClassName = \"\";\n\n                /**\n                 * GatewaySettingField gatewayType.\n                 * @member {xyz.redtorch.pb.GatewayTypeEnum} gatewayType\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayType = 0;\n\n                /**\n                 * GatewaySettingField gatewayAdapterType.\n                 * @member {xyz.redtorch.pb.GatewayAdapterTypeEnum} gatewayAdapterType\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.gatewayAdapterType = 0;\n\n                /**\n                 * GatewaySettingField targetNodeId.\n                 * @member {number} targetNodeId\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.targetNodeId = 0;\n\n                /**\n                 * GatewaySettingField autoConnectTimeRanges.\n                 * @member {string} autoConnectTimeRanges\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.autoConnectTimeRanges = \"\";\n\n                /**\n                 * GatewaySettingField status.\n                 * @member {xyz.redtorch.pb.ConnectStatusEnum} status\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.status = 0;\n\n                /**\n                 * GatewaySettingField version.\n                 * @member {number|Long} version\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * GatewaySettingField ctpApiSetting.\n                 * @member {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField|null|undefined} ctpApiSetting\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.ctpApiSetting = null;\n\n                /**\n                 * GatewaySettingField ibApiSetting.\n                 * @member {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField|null|undefined} ibApiSetting\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 */\n                GatewaySettingField.prototype.ibApiSetting = null;\n\n                /**\n                 * Creates a new GatewaySettingField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewaySettingField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField instance\n                 */\n                GatewaySettingField.create = function create(properties) {\n                    return new GatewaySettingField(properties);\n                };\n\n                /**\n                 * Encodes the specified GatewaySettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewaySettingField} message GatewaySettingField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewaySettingField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.gatewayId);\n                    if (message.gatewayName != null && message.hasOwnProperty(\"gatewayName\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayName);\n                    if (message.gatewayDescription != null && message.hasOwnProperty(\"gatewayDescription\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatewayDescription);\n                    if (message.implementClassName != null && message.hasOwnProperty(\"implementClassName\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.implementClassName);\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gatewayType);\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.gatewayAdapterType);\n                    if (message.targetNodeId != null && message.hasOwnProperty(\"targetNodeId\"))\n                        writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.targetNodeId);\n                    if (message.autoConnectTimeRanges != null && message.hasOwnProperty(\"autoConnectTimeRanges\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.autoConnectTimeRanges);\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.status);\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.version);\n                    if (message.ctpApiSetting != null && message.hasOwnProperty(\"ctpApiSetting\"))\n                        $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.encode(message.ctpApiSetting, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                    if (message.ibApiSetting != null && message.hasOwnProperty(\"ibApiSetting\"))\n                        $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.encode(message.ibApiSetting, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified GatewaySettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.IGatewaySettingField} message GatewaySettingField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GatewaySettingField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a GatewaySettingField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewaySettingField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.gatewayId = reader.string();\n                            break;\n                        case 2:\n                            message.gatewayName = reader.string();\n                            break;\n                        case 3:\n                            message.gatewayDescription = reader.string();\n                            break;\n                        case 4:\n                            message.implementClassName = reader.string();\n                            break;\n                        case 5:\n                            message.gatewayType = reader.int32();\n                            break;\n                        case 6:\n                            message.gatewayAdapterType = reader.int32();\n                            break;\n                        case 7:\n                            message.targetNodeId = reader.fixed32();\n                            break;\n                        case 8:\n                            message.autoConnectTimeRanges = reader.string();\n                            break;\n                        case 9:\n                            message.status = reader.int32();\n                            break;\n                        case 10:\n                            message.version = reader.fixed64();\n                            break;\n                        case 11:\n                            message.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.decode(reader, reader.uint32());\n                            break;\n                        case 12:\n                            message.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a GatewaySettingField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GatewaySettingField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a GatewaySettingField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                GatewaySettingField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    if (message.gatewayName != null && message.hasOwnProperty(\"gatewayName\"))\n                        if (!$util.isString(message.gatewayName))\n                            return \"gatewayName: string expected\";\n                    if (message.gatewayDescription != null && message.hasOwnProperty(\"gatewayDescription\"))\n                        if (!$util.isString(message.gatewayDescription))\n                            return \"gatewayDescription: string expected\";\n                    if (message.implementClassName != null && message.hasOwnProperty(\"implementClassName\"))\n                        if (!$util.isString(message.implementClassName))\n                            return \"implementClassName: string expected\";\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        switch (message.gatewayType) {\n                        default:\n                            return \"gatewayType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        switch (message.gatewayAdapterType) {\n                        default:\n                            return \"gatewayAdapterType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.targetNodeId != null && message.hasOwnProperty(\"targetNodeId\"))\n                        if (!$util.isInteger(message.targetNodeId))\n                            return \"targetNodeId: integer expected\";\n                    if (message.autoConnectTimeRanges != null && message.hasOwnProperty(\"autoConnectTimeRanges\"))\n                        if (!$util.isString(message.autoConnectTimeRanges))\n                            return \"autoConnectTimeRanges: string expected\";\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        switch (message.status) {\n                        default:\n                            return \"status: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                            return \"version: integer|Long expected\";\n                    if (message.ctpApiSetting != null && message.hasOwnProperty(\"ctpApiSetting\")) {\n                        var error = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify(message.ctpApiSetting);\n                        if (error)\n                            return \"ctpApiSetting.\" + error;\n                    }\n                    if (message.ibApiSetting != null && message.hasOwnProperty(\"ibApiSetting\")) {\n                        var error = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify(message.ibApiSetting);\n                        if (error)\n                            return \"ibApiSetting.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a GatewaySettingField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField\n                 */\n                GatewaySettingField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.GatewaySettingField();\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    if (object.gatewayName != null)\n                        message.gatewayName = String(object.gatewayName);\n                    if (object.gatewayDescription != null)\n                        message.gatewayDescription = String(object.gatewayDescription);\n                    if (object.implementClassName != null)\n                        message.implementClassName = String(object.implementClassName);\n                    switch (object.gatewayType) {\n                    case \"GTE_TradeAndMarketData\":\n                    case 0:\n                        message.gatewayType = 0;\n                        break;\n                    case \"GTE_MarketData\":\n                    case 1:\n                        message.gatewayType = 1;\n                        break;\n                    case \"GTE_Trade\":\n                    case 2:\n                        message.gatewayType = 2;\n                        break;\n                    }\n                    switch (object.gatewayAdapterType) {\n                    case \"GAT_CTP\":\n                    case 0:\n                        message.gatewayAdapterType = 0;\n                        break;\n                    case \"GAT_IB\":\n                    case 1:\n                        message.gatewayAdapterType = 1;\n                        break;\n                    case \"GAT_COMMON\":\n                    case 2:\n                        message.gatewayAdapterType = 2;\n                        break;\n                    }\n                    if (object.targetNodeId != null)\n                        message.targetNodeId = object.targetNodeId >>> 0;\n                    if (object.autoConnectTimeRanges != null)\n                        message.autoConnectTimeRanges = String(object.autoConnectTimeRanges);\n                    switch (object.status) {\n                    case \"CS_Unknown\":\n                    case 0:\n                        message.status = 0;\n                        break;\n                    case \"CS_Disconnected\":\n                    case 1:\n                        message.status = 1;\n                        break;\n                    case \"CS_Connected\":\n                    case 2:\n                        message.status = 2;\n                        break;\n                    case \"CS_Disconnecting\":\n                    case 3:\n                        message.status = 3;\n                        break;\n                    case \"CS_Connecting\":\n                    case 4:\n                        message.status = 4;\n                        break;\n                    }\n                    if (object.version != null)\n                        if ($util.Long)\n                            (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                        else if (typeof object.version === \"string\")\n                            message.version = parseInt(object.version, 10);\n                        else if (typeof object.version === \"number\")\n                            message.version = object.version;\n                        else if (typeof object.version === \"object\")\n                            message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n                    if (object.ctpApiSetting != null) {\n                        if (typeof object.ctpApiSetting !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.GatewaySettingField.ctpApiSetting: object expected\");\n                        message.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.fromObject(object.ctpApiSetting);\n                    }\n                    if (object.ibApiSetting != null) {\n                        if (typeof object.ibApiSetting !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.GatewaySettingField.ibApiSetting: object expected\");\n                        message.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.fromObject(object.ibApiSetting);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a GatewaySettingField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @static\n                 * @param {xyz.redtorch.pb.GatewaySettingField} message GatewaySettingField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                GatewaySettingField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.gatewayId = \"\";\n                        object.gatewayName = \"\";\n                        object.gatewayDescription = \"\";\n                        object.implementClassName = \"\";\n                        object.gatewayType = options.enums === String ? \"GTE_TradeAndMarketData\" : 0;\n                        object.gatewayAdapterType = options.enums === String ? \"GAT_CTP\" : 0;\n                        object.targetNodeId = 0;\n                        object.autoConnectTimeRanges = \"\";\n                        object.status = options.enums === String ? \"CS_Unknown\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.version = options.longs === String ? \"0\" : 0;\n                        object.ctpApiSetting = null;\n                        object.ibApiSetting = null;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    if (message.gatewayName != null && message.hasOwnProperty(\"gatewayName\"))\n                        object.gatewayName = message.gatewayName;\n                    if (message.gatewayDescription != null && message.hasOwnProperty(\"gatewayDescription\"))\n                        object.gatewayDescription = message.gatewayDescription;\n                    if (message.implementClassName != null && message.hasOwnProperty(\"implementClassName\"))\n                        object.implementClassName = message.implementClassName;\n                    if (message.gatewayType != null && message.hasOwnProperty(\"gatewayType\"))\n                        object.gatewayType = options.enums === String ? $root.xyz.redtorch.pb.GatewayTypeEnum[message.gatewayType] : message.gatewayType;\n                    if (message.gatewayAdapterType != null && message.hasOwnProperty(\"gatewayAdapterType\"))\n                        object.gatewayAdapterType = options.enums === String ? $root.xyz.redtorch.pb.GatewayAdapterTypeEnum[message.gatewayAdapterType] : message.gatewayAdapterType;\n                    if (message.targetNodeId != null && message.hasOwnProperty(\"targetNodeId\"))\n                        object.targetNodeId = message.targetNodeId;\n                    if (message.autoConnectTimeRanges != null && message.hasOwnProperty(\"autoConnectTimeRanges\"))\n                        object.autoConnectTimeRanges = message.autoConnectTimeRanges;\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = options.enums === String ? $root.xyz.redtorch.pb.ConnectStatusEnum[message.status] : message.status;\n                    if (message.version != null && message.hasOwnProperty(\"version\"))\n                        if (typeof message.version === \"number\")\n                            object.version = options.longs === String ? String(message.version) : message.version;\n                        else\n                            object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n                    if (message.ctpApiSetting != null && message.hasOwnProperty(\"ctpApiSetting\"))\n                        object.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.toObject(message.ctpApiSetting, options);\n                    if (message.ibApiSetting != null && message.hasOwnProperty(\"ibApiSetting\"))\n                        object.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.toObject(message.ibApiSetting, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this GatewaySettingField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.GatewaySettingField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                GatewaySettingField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                GatewaySettingField.CtpApiSettingField = (function() {\n\n                    /**\n                     * Properties of a CtpApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @interface ICtpApiSettingField\n                     * @property {string|null} [userId] CtpApiSettingField userId\n                     * @property {string|null} [password] CtpApiSettingField password\n                     * @property {string|null} [brokerId] CtpApiSettingField brokerId\n                     * @property {string|null} [tdHost] CtpApiSettingField tdHost\n                     * @property {string|null} [tdPort] CtpApiSettingField tdPort\n                     * @property {string|null} [mdHost] CtpApiSettingField mdHost\n                     * @property {string|null} [mdPort] CtpApiSettingField mdPort\n                     * @property {string|null} [authCode] CtpApiSettingField authCode\n                     * @property {string|null} [userProductInfo] CtpApiSettingField userProductInfo\n                     * @property {string|null} [appId] CtpApiSettingField appId\n                     */\n\n                    /**\n                     * Constructs a new CtpApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @classdesc Represents a CtpApiSettingField.\n                     * @implements ICtpApiSettingField\n                     * @constructor\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField=} [properties] Properties to set\n                     */\n                    function CtpApiSettingField(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * CtpApiSettingField userId.\n                     * @member {string} userId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.userId = \"\";\n\n                    /**\n                     * CtpApiSettingField password.\n                     * @member {string} password\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.password = \"\";\n\n                    /**\n                     * CtpApiSettingField brokerId.\n                     * @member {string} brokerId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.brokerId = \"\";\n\n                    /**\n                     * CtpApiSettingField tdHost.\n                     * @member {string} tdHost\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.tdHost = \"\";\n\n                    /**\n                     * CtpApiSettingField tdPort.\n                     * @member {string} tdPort\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.tdPort = \"\";\n\n                    /**\n                     * CtpApiSettingField mdHost.\n                     * @member {string} mdHost\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.mdHost = \"\";\n\n                    /**\n                     * CtpApiSettingField mdPort.\n                     * @member {string} mdPort\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.mdPort = \"\";\n\n                    /**\n                     * CtpApiSettingField authCode.\n                     * @member {string} authCode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.authCode = \"\";\n\n                    /**\n                     * CtpApiSettingField userProductInfo.\n                     * @member {string} userProductInfo\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.userProductInfo = \"\";\n\n                    /**\n                     * CtpApiSettingField appId.\n                     * @member {string} appId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     */\n                    CtpApiSettingField.prototype.appId = \"\";\n\n                    /**\n                     * Creates a new CtpApiSettingField instance using the specified properties.\n                     * @function create\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField=} [properties] Properties to set\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField instance\n                     */\n                    CtpApiSettingField.create = function create(properties) {\n                        return new CtpApiSettingField(properties);\n                    };\n\n                    /**\n                     * Encodes the specified CtpApiSettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify|verify} messages.\n                     * @function encode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField} message CtpApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    CtpApiSettingField.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n                        if (message.password != null && message.hasOwnProperty(\"password\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);\n                        if (message.brokerId != null && message.hasOwnProperty(\"brokerId\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.brokerId);\n                        if (message.tdHost != null && message.hasOwnProperty(\"tdHost\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.tdHost);\n                        if (message.tdPort != null && message.hasOwnProperty(\"tdPort\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.tdPort);\n                        if (message.mdHost != null && message.hasOwnProperty(\"mdHost\"))\n                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.mdHost);\n                        if (message.mdPort != null && message.hasOwnProperty(\"mdPort\"))\n                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.mdPort);\n                        if (message.authCode != null && message.hasOwnProperty(\"authCode\"))\n                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.authCode);\n                        if (message.userProductInfo != null && message.hasOwnProperty(\"userProductInfo\"))\n                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.userProductInfo);\n                        if (message.appId != null && message.hasOwnProperty(\"appId\"))\n                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.appId);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified CtpApiSettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField} message CtpApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    CtpApiSettingField.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a CtpApiSettingField message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    CtpApiSettingField.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.userId = reader.string();\n                                break;\n                            case 2:\n                                message.password = reader.string();\n                                break;\n                            case 3:\n                                message.brokerId = reader.string();\n                                break;\n                            case 4:\n                                message.tdHost = reader.string();\n                                break;\n                            case 5:\n                                message.tdPort = reader.string();\n                                break;\n                            case 6:\n                                message.mdHost = reader.string();\n                                break;\n                            case 7:\n                                message.mdPort = reader.string();\n                                break;\n                            case 8:\n                                message.authCode = reader.string();\n                                break;\n                            case 9:\n                                message.userProductInfo = reader.string();\n                                break;\n                            case 10:\n                                message.appId = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a CtpApiSettingField message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    CtpApiSettingField.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a CtpApiSettingField message.\n                     * @function verify\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    CtpApiSettingField.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                            if (!$util.isString(message.userId))\n                                return \"userId: string expected\";\n                        if (message.password != null && message.hasOwnProperty(\"password\"))\n                            if (!$util.isString(message.password))\n                                return \"password: string expected\";\n                        if (message.brokerId != null && message.hasOwnProperty(\"brokerId\"))\n                            if (!$util.isString(message.brokerId))\n                                return \"brokerId: string expected\";\n                        if (message.tdHost != null && message.hasOwnProperty(\"tdHost\"))\n                            if (!$util.isString(message.tdHost))\n                                return \"tdHost: string expected\";\n                        if (message.tdPort != null && message.hasOwnProperty(\"tdPort\"))\n                            if (!$util.isString(message.tdPort))\n                                return \"tdPort: string expected\";\n                        if (message.mdHost != null && message.hasOwnProperty(\"mdHost\"))\n                            if (!$util.isString(message.mdHost))\n                                return \"mdHost: string expected\";\n                        if (message.mdPort != null && message.hasOwnProperty(\"mdPort\"))\n                            if (!$util.isString(message.mdPort))\n                                return \"mdPort: string expected\";\n                        if (message.authCode != null && message.hasOwnProperty(\"authCode\"))\n                            if (!$util.isString(message.authCode))\n                                return \"authCode: string expected\";\n                        if (message.userProductInfo != null && message.hasOwnProperty(\"userProductInfo\"))\n                            if (!$util.isString(message.userProductInfo))\n                                return \"userProductInfo: string expected\";\n                        if (message.appId != null && message.hasOwnProperty(\"appId\"))\n                            if (!$util.isString(message.appId))\n                                return \"appId: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a CtpApiSettingField message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField\n                     */\n                    CtpApiSettingField.fromObject = function fromObject(object) {\n                        if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField)\n                            return object;\n                        var message = new $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField();\n                        if (object.userId != null)\n                            message.userId = String(object.userId);\n                        if (object.password != null)\n                            message.password = String(object.password);\n                        if (object.brokerId != null)\n                            message.brokerId = String(object.brokerId);\n                        if (object.tdHost != null)\n                            message.tdHost = String(object.tdHost);\n                        if (object.tdPort != null)\n                            message.tdPort = String(object.tdPort);\n                        if (object.mdHost != null)\n                            message.mdHost = String(object.mdHost);\n                        if (object.mdPort != null)\n                            message.mdPort = String(object.mdPort);\n                        if (object.authCode != null)\n                            message.authCode = String(object.authCode);\n                        if (object.userProductInfo != null)\n                            message.userProductInfo = String(object.userProductInfo);\n                        if (object.appId != null)\n                            message.appId = String(object.appId);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a CtpApiSettingField message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} message CtpApiSettingField\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    CtpApiSettingField.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.userId = \"\";\n                            object.password = \"\";\n                            object.brokerId = \"\";\n                            object.tdHost = \"\";\n                            object.tdPort = \"\";\n                            object.mdHost = \"\";\n                            object.mdPort = \"\";\n                            object.authCode = \"\";\n                            object.userProductInfo = \"\";\n                            object.appId = \"\";\n                        }\n                        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                            object.userId = message.userId;\n                        if (message.password != null && message.hasOwnProperty(\"password\"))\n                            object.password = message.password;\n                        if (message.brokerId != null && message.hasOwnProperty(\"brokerId\"))\n                            object.brokerId = message.brokerId;\n                        if (message.tdHost != null && message.hasOwnProperty(\"tdHost\"))\n                            object.tdHost = message.tdHost;\n                        if (message.tdPort != null && message.hasOwnProperty(\"tdPort\"))\n                            object.tdPort = message.tdPort;\n                        if (message.mdHost != null && message.hasOwnProperty(\"mdHost\"))\n                            object.mdHost = message.mdHost;\n                        if (message.mdPort != null && message.hasOwnProperty(\"mdPort\"))\n                            object.mdPort = message.mdPort;\n                        if (message.authCode != null && message.hasOwnProperty(\"authCode\"))\n                            object.authCode = message.authCode;\n                        if (message.userProductInfo != null && message.hasOwnProperty(\"userProductInfo\"))\n                            object.userProductInfo = message.userProductInfo;\n                        if (message.appId != null && message.hasOwnProperty(\"appId\"))\n                            object.appId = message.appId;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this CtpApiSettingField to JSON.\n                     * @function toJSON\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    CtpApiSettingField.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return CtpApiSettingField;\n                })();\n\n                GatewaySettingField.IbApiSettingField = (function() {\n\n                    /**\n                     * Properties of an IbApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @interface IIbApiSettingField\n                     * @property {string|null} [host] IbApiSettingField host\n                     * @property {number|null} [port] IbApiSettingField port\n                     * @property {number|null} [clientId] IbApiSettingField clientId\n                     */\n\n                    /**\n                     * Constructs a new IbApiSettingField.\n                     * @memberof xyz.redtorch.pb.GatewaySettingField\n                     * @classdesc Represents an IbApiSettingField.\n                     * @implements IIbApiSettingField\n                     * @constructor\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField=} [properties] Properties to set\n                     */\n                    function IbApiSettingField(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * IbApiSettingField host.\n                     * @member {string} host\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     */\n                    IbApiSettingField.prototype.host = \"\";\n\n                    /**\n                     * IbApiSettingField port.\n                     * @member {number} port\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     */\n                    IbApiSettingField.prototype.port = 0;\n\n                    /**\n                     * IbApiSettingField clientId.\n                     * @member {number} clientId\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     */\n                    IbApiSettingField.prototype.clientId = 0;\n\n                    /**\n                     * Creates a new IbApiSettingField instance using the specified properties.\n                     * @function create\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField=} [properties] Properties to set\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField instance\n                     */\n                    IbApiSettingField.create = function create(properties) {\n                        return new IbApiSettingField(properties);\n                    };\n\n                    /**\n                     * Encodes the specified IbApiSettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify|verify} messages.\n                     * @function encode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField} message IbApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    IbApiSettingField.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.host != null && message.hasOwnProperty(\"host\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.host);\n                        if (message.port != null && message.hasOwnProperty(\"port\"))\n                            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.port);\n                        if (message.clientId != null && message.hasOwnProperty(\"clientId\"))\n                            writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.clientId);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified IbApiSettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField} message IbApiSettingField message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    IbApiSettingField.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an IbApiSettingField message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    IbApiSettingField.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.host = reader.string();\n                                break;\n                            case 2:\n                                message.port = reader.fixed32();\n                                break;\n                            case 3:\n                                message.clientId = reader.fixed32();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an IbApiSettingField message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    IbApiSettingField.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an IbApiSettingField message.\n                     * @function verify\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    IbApiSettingField.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.host != null && message.hasOwnProperty(\"host\"))\n                            if (!$util.isString(message.host))\n                                return \"host: string expected\";\n                        if (message.port != null && message.hasOwnProperty(\"port\"))\n                            if (!$util.isInteger(message.port))\n                                return \"port: integer expected\";\n                        if (message.clientId != null && message.hasOwnProperty(\"clientId\"))\n                            if (!$util.isInteger(message.clientId))\n                                return \"clientId: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an IbApiSettingField message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField\n                     */\n                    IbApiSettingField.fromObject = function fromObject(object) {\n                        if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField)\n                            return object;\n                        var message = new $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField();\n                        if (object.host != null)\n                            message.host = String(object.host);\n                        if (object.port != null)\n                            message.port = object.port >>> 0;\n                        if (object.clientId != null)\n                            message.clientId = object.clientId >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an IbApiSettingField message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @static\n                     * @param {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} message IbApiSettingField\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    IbApiSettingField.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.host = \"\";\n                            object.port = 0;\n                            object.clientId = 0;\n                        }\n                        if (message.host != null && message.hasOwnProperty(\"host\"))\n                            object.host = message.host;\n                        if (message.port != null && message.hasOwnProperty(\"port\"))\n                            object.port = message.port;\n                        if (message.clientId != null && message.hasOwnProperty(\"clientId\"))\n                            object.clientId = message.clientId;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this IbApiSettingField to JSON.\n                     * @function toJSON\n                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    IbApiSettingField.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return IbApiSettingField;\n                })();\n\n                return GatewaySettingField;\n            })();\n\n            pb.LogField = (function() {\n\n                /**\n                 * Properties of a LogField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface ILogField\n                 * @property {xyz.redtorch.pb.LogLevelEnum|null} [logLevel] LogField logLevel\n                 * @property {number|Long|null} [timestamp] LogField timestamp\n                 * @property {string|null} [content] LogField content\n                 */\n\n                /**\n                 * Constructs a new LogField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a LogField.\n                 * @implements ILogField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.ILogField=} [properties] Properties to set\n                 */\n                function LogField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * LogField logLevel.\n                 * @member {xyz.redtorch.pb.LogLevelEnum} logLevel\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 */\n                LogField.prototype.logLevel = 0;\n\n                /**\n                 * LogField timestamp.\n                 * @member {number|Long} timestamp\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 */\n                LogField.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * LogField content.\n                 * @member {string} content\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 */\n                LogField.prototype.content = \"\";\n\n                /**\n                 * Creates a new LogField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.ILogField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.LogField} LogField instance\n                 */\n                LogField.create = function create(properties) {\n                    return new LogField(properties);\n                };\n\n                /**\n                 * Encodes the specified LogField message. Does not implicitly {@link xyz.redtorch.pb.LogField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.ILogField} message LogField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                LogField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.logLevel != null && message.hasOwnProperty(\"logLevel\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.logLevel);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timestamp);\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified LogField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.LogField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.ILogField} message LogField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                LogField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a LogField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.LogField} LogField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                LogField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.LogField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.logLevel = reader.int32();\n                            break;\n                        case 2:\n                            message.timestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.content = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a LogField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.LogField} LogField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                LogField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a LogField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                LogField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.logLevel != null && message.hasOwnProperty(\"logLevel\"))\n                        switch (message.logLevel) {\n                        default:\n                            return \"logLevel: enum value expected\";\n                        case 0:\n                        case 40000:\n                        case 30000:\n                        case 20000:\n                        case 10000:\n                        case 5000:\n                            break;\n                        }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                            return \"timestamp: integer|Long expected\";\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        if (!$util.isString(message.content))\n                            return \"content: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a LogField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.LogField} LogField\n                 */\n                LogField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.LogField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.LogField();\n                    switch (object.logLevel) {\n                    case \"LL_All\":\n                    case 0:\n                        message.logLevel = 0;\n                        break;\n                    case \"LL_Error\":\n                    case 40000:\n                        message.logLevel = 40000;\n                        break;\n                    case \"LL_Warn\":\n                    case 30000:\n                        message.logLevel = 30000;\n                        break;\n                    case \"LL_Info\":\n                    case 20000:\n                        message.logLevel = 20000;\n                        break;\n                    case \"LL_Debug\":\n                    case 10000:\n                        message.logLevel = 10000;\n                        break;\n                    case \"LL_Trace\":\n                    case 5000:\n                        message.logLevel = 5000;\n                        break;\n                    }\n                    if (object.timestamp != null)\n                        if ($util.Long)\n                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                        else if (typeof object.timestamp === \"string\")\n                            message.timestamp = parseInt(object.timestamp, 10);\n                        else if (typeof object.timestamp === \"number\")\n                            message.timestamp = object.timestamp;\n                        else if (typeof object.timestamp === \"object\")\n                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n                    if (object.content != null)\n                        message.content = String(object.content);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a LogField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @static\n                 * @param {xyz.redtorch.pb.LogField} message LogField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                LogField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.logLevel = options.enums === String ? \"LL_All\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.timestamp = options.longs === String ? \"0\" : 0;\n                        object.content = \"\";\n                    }\n                    if (message.logLevel != null && message.hasOwnProperty(\"logLevel\"))\n                        object.logLevel = options.enums === String ? $root.xyz.redtorch.pb.LogLevelEnum[message.logLevel] : message.logLevel;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (typeof message.timestamp === \"number\")\n                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                        else\n                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        object.content = message.content;\n                    return object;\n                };\n\n                /**\n                 * Converts this LogField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.LogField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                LogField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return LogField;\n            })();\n\n            pb.NoticeField = (function() {\n\n                /**\n                 * Properties of a NoticeField.\n                 * @memberof xyz.redtorch.pb\n                 * @interface INoticeField\n                 * @property {xyz.redtorch.pb.CommonStatusEnum|null} [status] NoticeField status\n                 * @property {number|Long|null} [timestamp] NoticeField timestamp\n                 * @property {string|null} [content] NoticeField content\n                 */\n\n                /**\n                 * Constructs a new NoticeField.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a NoticeField.\n                 * @implements INoticeField\n                 * @constructor\n                 * @param {xyz.redtorch.pb.INoticeField=} [properties] Properties to set\n                 */\n                function NoticeField(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * NoticeField status.\n                 * @member {xyz.redtorch.pb.CommonStatusEnum} status\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 */\n                NoticeField.prototype.status = 0;\n\n                /**\n                 * NoticeField timestamp.\n                 * @member {number|Long} timestamp\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 */\n                NoticeField.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * NoticeField content.\n                 * @member {string} content\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 */\n                NoticeField.prototype.content = \"\";\n\n                /**\n                 * Creates a new NoticeField instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.INoticeField=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField instance\n                 */\n                NoticeField.create = function create(properties) {\n                    return new NoticeField(properties);\n                };\n\n                /**\n                 * Encodes the specified NoticeField message. Does not implicitly {@link xyz.redtorch.pb.NoticeField.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.INoticeField} message NoticeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NoticeField.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timestamp);\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified NoticeField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.NoticeField.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.INoticeField} message NoticeField message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NoticeField.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a NoticeField message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NoticeField.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.NoticeField();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.status = reader.int32();\n                            break;\n                        case 2:\n                            message.timestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.content = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a NoticeField message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NoticeField.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a NoticeField message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                NoticeField.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        switch (message.status) {\n                        default:\n                            return \"status: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                            break;\n                        }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                            return \"timestamp: integer|Long expected\";\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        if (!$util.isString(message.content))\n                            return \"content: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a NoticeField message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField\n                 */\n                NoticeField.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.NoticeField)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.NoticeField();\n                    switch (object.status) {\n                    case \"COMS_SUCCESS\":\n                    case 0:\n                        message.status = 0;\n                        break;\n                    case \"COMS_INFO\":\n                    case 1:\n                        message.status = 1;\n                        break;\n                    case \"COMS_WARN\":\n                    case 2:\n                        message.status = 2;\n                        break;\n                    case \"COMS_ERROR\":\n                    case 3:\n                        message.status = 3;\n                        break;\n                    }\n                    if (object.timestamp != null)\n                        if ($util.Long)\n                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                        else if (typeof object.timestamp === \"string\")\n                            message.timestamp = parseInt(object.timestamp, 10);\n                        else if (typeof object.timestamp === \"number\")\n                            message.timestamp = object.timestamp;\n                        else if (typeof object.timestamp === \"object\")\n                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n                    if (object.content != null)\n                        message.content = String(object.content);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a NoticeField message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @static\n                 * @param {xyz.redtorch.pb.NoticeField} message NoticeField\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                NoticeField.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.status = options.enums === String ? \"COMS_SUCCESS\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.timestamp = options.longs === String ? \"0\" : 0;\n                        object.content = \"\";\n                    }\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = options.enums === String ? $root.xyz.redtorch.pb.CommonStatusEnum[message.status] : message.status;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (typeof message.timestamp === \"number\")\n                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                        else\n                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n                    if (message.content != null && message.hasOwnProperty(\"content\"))\n                        object.content = message.content;\n                    return object;\n                };\n\n                /**\n                 * Converts this NoticeField to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.NoticeField\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                NoticeField.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return NoticeField;\n            })();\n\n            pb.RpcSubscribeReq = (function() {\n\n                /**\n                 * Properties of a RpcSubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubscribeReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSubscribeReq commonReq\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcSubscribeReq contract\n                 */\n\n                /**\n                 * Constructs a new RpcSubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubscribeReq.\n                 * @implements IRpcSubscribeReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq=} [properties] Properties to set\n                 */\n                function RpcSubscribeReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubscribeReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @instance\n                 */\n                RpcSubscribeReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSubscribeReq contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @instance\n                 */\n                RpcSubscribeReq.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcSubscribeReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq instance\n                 */\n                RpcSubscribeReq.create = function create(properties) {\n                    return new RpcSubscribeReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq} message RpcSubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeReq} message RpcSubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubscribeReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubscribeReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubscribeReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubscribeReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubscribeReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubscribeReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq\n                 */\n                RpcSubscribeReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubscribeReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubscribeReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubscribeReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubscribeReq.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubscribeReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubscribeReq} message RpcSubscribeReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubscribeReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.contract = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubscribeReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubscribeReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubscribeReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubscribeReq;\n            })();\n\n            pb.RpcSubscribeRsp = (function() {\n\n                /**\n                 * Properties of a RpcSubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubscribeRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSubscribeRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcSubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubscribeRsp.\n                 * @implements IRpcSubscribeRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp=} [properties] Properties to set\n                 */\n                function RpcSubscribeRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubscribeRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @instance\n                 */\n                RpcSubscribeRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcSubscribeRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp instance\n                 */\n                RpcSubscribeRsp.create = function create(properties) {\n                    return new RpcSubscribeRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp} message RpcSubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubscribeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp} message RpcSubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubscribeRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubscribeRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubscribeRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubscribeRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubscribeRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubscribeRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubscribeRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubscribeRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp\n                 */\n                RpcSubscribeRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubscribeRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubscribeRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubscribeRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubscribeRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubscribeRsp} message RpcSubscribeRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubscribeRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubscribeRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubscribeRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubscribeRsp;\n            })();\n\n            pb.RpcUnsubscribeReq = (function() {\n\n                /**\n                 * Properties of a RpcUnsubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcUnsubscribeReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcUnsubscribeReq commonReq\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcUnsubscribeReq contract\n                 * @property {string|null} [gatewayId] RpcUnsubscribeReq gatewayId\n                 */\n\n                /**\n                 * Constructs a new RpcUnsubscribeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcUnsubscribeReq.\n                 * @implements IRpcUnsubscribeReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq=} [properties] Properties to set\n                 */\n                function RpcUnsubscribeReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcUnsubscribeReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 */\n                RpcUnsubscribeReq.prototype.commonReq = null;\n\n                /**\n                 * RpcUnsubscribeReq contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 */\n                RpcUnsubscribeReq.prototype.contract = null;\n\n                /**\n                 * RpcUnsubscribeReq gatewayId.\n                 * @member {string} gatewayId\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 */\n                RpcUnsubscribeReq.prototype.gatewayId = \"\";\n\n                /**\n                 * Creates a new RpcUnsubscribeReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq instance\n                 */\n                RpcUnsubscribeReq.create = function create(properties) {\n                    return new RpcUnsubscribeReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq} message RpcUnsubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatewayId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq} message RpcUnsubscribeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcUnsubscribeReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.gatewayId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcUnsubscribeReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcUnsubscribeReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        if (!$util.isString(message.gatewayId))\n                            return \"gatewayId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcUnsubscribeReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq\n                 */\n                RpcUnsubscribeReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcUnsubscribeReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcUnsubscribeReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcUnsubscribeReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcUnsubscribeReq.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    if (object.gatewayId != null)\n                        message.gatewayId = String(object.gatewayId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcUnsubscribeReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcUnsubscribeReq} message RpcUnsubscribeReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcUnsubscribeReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.contract = null;\n                        object.gatewayId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    if (message.gatewayId != null && message.hasOwnProperty(\"gatewayId\"))\n                        object.gatewayId = message.gatewayId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcUnsubscribeReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcUnsubscribeReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcUnsubscribeReq;\n            })();\n\n            pb.RpcUnsubscribeRsp = (function() {\n\n                /**\n                 * Properties of a RpcUnsubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcUnsubscribeRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcUnsubscribeRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcUnsubscribeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcUnsubscribeRsp.\n                 * @implements IRpcUnsubscribeRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp=} [properties] Properties to set\n                 */\n                function RpcUnsubscribeRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcUnsubscribeRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @instance\n                 */\n                RpcUnsubscribeRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcUnsubscribeRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp instance\n                 */\n                RpcUnsubscribeRsp.create = function create(properties) {\n                    return new RpcUnsubscribeRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp} message RpcUnsubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcUnsubscribeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp} message RpcUnsubscribeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcUnsubscribeRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcUnsubscribeRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcUnsubscribeRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcUnsubscribeRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcUnsubscribeRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcUnsubscribeRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcUnsubscribeRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp\n                 */\n                RpcUnsubscribeRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcUnsubscribeRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcUnsubscribeRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcUnsubscribeRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcUnsubscribeRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcUnsubscribeRsp} message RpcUnsubscribeRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcUnsubscribeRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcUnsubscribeRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcUnsubscribeRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcUnsubscribeRsp;\n            })();\n\n            pb.RpcSubmitOrderReq = (function() {\n\n                /**\n                 * Properties of a RpcSubmitOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubmitOrderReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSubmitOrderReq commonReq\n                 * @property {xyz.redtorch.pb.ISubmitOrderReqField|null} [submitOrderReq] RpcSubmitOrderReq submitOrderReq\n                 */\n\n                /**\n                 * Constructs a new RpcSubmitOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubmitOrderReq.\n                 * @implements IRpcSubmitOrderReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq=} [properties] Properties to set\n                 */\n                function RpcSubmitOrderReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubmitOrderReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @instance\n                 */\n                RpcSubmitOrderReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSubmitOrderReq submitOrderReq.\n                 * @member {xyz.redtorch.pb.ISubmitOrderReqField|null|undefined} submitOrderReq\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @instance\n                 */\n                RpcSubmitOrderReq.prototype.submitOrderReq = null;\n\n                /**\n                 * Creates a new RpcSubmitOrderReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq instance\n                 */\n                RpcSubmitOrderReq.create = function create(properties) {\n                    return new RpcSubmitOrderReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq} message RpcSubmitOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.submitOrderReq != null && message.hasOwnProperty(\"submitOrderReq\"))\n                        $root.xyz.redtorch.pb.SubmitOrderReqField.encode(message.submitOrderReq, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq} message RpcSubmitOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubmitOrderReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubmitOrderReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubmitOrderReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.submitOrderReq != null && message.hasOwnProperty(\"submitOrderReq\")) {\n                        var error = $root.xyz.redtorch.pb.SubmitOrderReqField.verify(message.submitOrderReq);\n                        if (error)\n                            return \"submitOrderReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubmitOrderReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq\n                 */\n                RpcSubmitOrderReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubmitOrderReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubmitOrderReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubmitOrderReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.submitOrderReq != null) {\n                        if (typeof object.submitOrderReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubmitOrderReq.submitOrderReq: object expected\");\n                        message.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.fromObject(object.submitOrderReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubmitOrderReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubmitOrderReq} message RpcSubmitOrderReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubmitOrderReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.submitOrderReq = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.submitOrderReq != null && message.hasOwnProperty(\"submitOrderReq\"))\n                        object.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.toObject(message.submitOrderReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubmitOrderReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubmitOrderReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubmitOrderReq;\n            })();\n\n            pb.RpcSubmitOrderRsp = (function() {\n\n                /**\n                 * Properties of a RpcSubmitOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSubmitOrderRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSubmitOrderRsp commonRsp\n                 * @property {string|null} [orderId] RpcSubmitOrderRsp orderId\n                 */\n\n                /**\n                 * Constructs a new RpcSubmitOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSubmitOrderRsp.\n                 * @implements IRpcSubmitOrderRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp=} [properties] Properties to set\n                 */\n                function RpcSubmitOrderRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSubmitOrderRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @instance\n                 */\n                RpcSubmitOrderRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcSubmitOrderRsp orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @instance\n                 */\n                RpcSubmitOrderRsp.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new RpcSubmitOrderRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp instance\n                 */\n                RpcSubmitOrderRsp.create = function create(properties) {\n                    return new RpcSubmitOrderRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp} message RpcSubmitOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSubmitOrderRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp} message RpcSubmitOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSubmitOrderRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubmitOrderRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSubmitOrderRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSubmitOrderRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSubmitOrderRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSubmitOrderRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSubmitOrderRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp\n                 */\n                RpcSubmitOrderRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSubmitOrderRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSubmitOrderRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSubmitOrderRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSubmitOrderRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSubmitOrderRsp} message RpcSubmitOrderRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSubmitOrderRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.orderId = \"\";\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSubmitOrderRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSubmitOrderRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSubmitOrderRsp;\n            })();\n\n            pb.RpcCancelOrderReq = (function() {\n\n                /**\n                 * Properties of a RpcCancelOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcCancelOrderReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcCancelOrderReq commonReq\n                 * @property {xyz.redtorch.pb.ICancelOrderReqField|null} [cancelOrderReq] RpcCancelOrderReq cancelOrderReq\n                 */\n\n                /**\n                 * Constructs a new RpcCancelOrderReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcCancelOrderReq.\n                 * @implements IRpcCancelOrderReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq=} [properties] Properties to set\n                 */\n                function RpcCancelOrderReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcCancelOrderReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @instance\n                 */\n                RpcCancelOrderReq.prototype.commonReq = null;\n\n                /**\n                 * RpcCancelOrderReq cancelOrderReq.\n                 * @member {xyz.redtorch.pb.ICancelOrderReqField|null|undefined} cancelOrderReq\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @instance\n                 */\n                RpcCancelOrderReq.prototype.cancelOrderReq = null;\n\n                /**\n                 * Creates a new RpcCancelOrderReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq instance\n                 */\n                RpcCancelOrderReq.create = function create(properties) {\n                    return new RpcCancelOrderReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderReq message. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq} message RpcCancelOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.cancelOrderReq != null && message.hasOwnProperty(\"cancelOrderReq\"))\n                        $root.xyz.redtorch.pb.CancelOrderReqField.encode(message.cancelOrderReq, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq} message RpcCancelOrderReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcCancelOrderReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcCancelOrderReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcCancelOrderReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.cancelOrderReq != null && message.hasOwnProperty(\"cancelOrderReq\")) {\n                        var error = $root.xyz.redtorch.pb.CancelOrderReqField.verify(message.cancelOrderReq);\n                        if (error)\n                            return \"cancelOrderReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcCancelOrderReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq\n                 */\n                RpcCancelOrderReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcCancelOrderReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcCancelOrderReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcCancelOrderReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.cancelOrderReq != null) {\n                        if (typeof object.cancelOrderReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcCancelOrderReq.cancelOrderReq: object expected\");\n                        message.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.fromObject(object.cancelOrderReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcCancelOrderReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcCancelOrderReq} message RpcCancelOrderReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcCancelOrderReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.cancelOrderReq = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.cancelOrderReq != null && message.hasOwnProperty(\"cancelOrderReq\"))\n                        object.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.toObject(message.cancelOrderReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcCancelOrderReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcCancelOrderReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcCancelOrderReq;\n            })();\n\n            pb.RpcCancelOrderRsp = (function() {\n\n                /**\n                 * Properties of a RpcCancelOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcCancelOrderRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcCancelOrderRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcCancelOrderRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcCancelOrderRsp.\n                 * @implements IRpcCancelOrderRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp=} [properties] Properties to set\n                 */\n                function RpcCancelOrderRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcCancelOrderRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @instance\n                 */\n                RpcCancelOrderRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcCancelOrderRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp instance\n                 */\n                RpcCancelOrderRsp.create = function create(properties) {\n                    return new RpcCancelOrderRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp} message RpcCancelOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcCancelOrderRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp} message RpcCancelOrderRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcCancelOrderRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcCancelOrderRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcCancelOrderRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcCancelOrderRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcCancelOrderRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcCancelOrderRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcCancelOrderRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp\n                 */\n                RpcCancelOrderRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcCancelOrderRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcCancelOrderRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcCancelOrderRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcCancelOrderRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcCancelOrderRsp} message RpcCancelOrderRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcCancelOrderRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcCancelOrderRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcCancelOrderRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcCancelOrderRsp;\n            })();\n\n            pb.RpcSearchContractReq = (function() {\n\n                /**\n                 * Properties of a RpcSearchContractReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSearchContractReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSearchContractReq commonReq\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcSearchContractReq contract\n                 */\n\n                /**\n                 * Constructs a new RpcSearchContractReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSearchContractReq.\n                 * @implements IRpcSearchContractReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq=} [properties] Properties to set\n                 */\n                function RpcSearchContractReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSearchContractReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @instance\n                 */\n                RpcSearchContractReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSearchContractReq contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @instance\n                 */\n                RpcSearchContractReq.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcSearchContractReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq instance\n                 */\n                RpcSearchContractReq.create = function create(properties) {\n                    return new RpcSearchContractReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq} message RpcSearchContractReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractReq} message RpcSearchContractReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSearchContractReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSearchContractReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSearchContractReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSearchContractReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSearchContractReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSearchContractReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq\n                 */\n                RpcSearchContractReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSearchContractReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSearchContractReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSearchContractReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSearchContractReq.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSearchContractReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSearchContractReq} message RpcSearchContractReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSearchContractReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.contract = null;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSearchContractReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSearchContractReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSearchContractReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSearchContractReq;\n            })();\n\n            pb.RpcSearchContractRsp = (function() {\n\n                /**\n                 * Properties of a RpcSearchContractRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSearchContractRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSearchContractRsp commonRsp\n                 */\n\n                /**\n                 * Constructs a new RpcSearchContractRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSearchContractRsp.\n                 * @implements IRpcSearchContractRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp=} [properties] Properties to set\n                 */\n                function RpcSearchContractRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSearchContractRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @instance\n                 */\n                RpcSearchContractRsp.prototype.commonRsp = null;\n\n                /**\n                 * Creates a new RpcSearchContractRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp instance\n                 */\n                RpcSearchContractRsp.create = function create(properties) {\n                    return new RpcSearchContractRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp} message RpcSearchContractRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSearchContractRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp} message RpcSearchContractRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSearchContractRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSearchContractRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSearchContractRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSearchContractRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSearchContractRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSearchContractRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSearchContractRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSearchContractRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp\n                 */\n                RpcSearchContractRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSearchContractRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSearchContractRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSearchContractRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSearchContractRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSearchContractRsp} message RpcSearchContractRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSearchContractRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSearchContractRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSearchContractRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSearchContractRsp;\n            })();\n\n            pb.RpcGetOrderListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetOrderListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetOrderListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetOrderListReq.\n                 * @implements IRpcGetOrderListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq=} [properties] Properties to set\n                 */\n                function RpcGetOrderListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetOrderListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @instance\n                 */\n                RpcGetOrderListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetOrderListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq instance\n                 */\n                RpcGetOrderListReq.create = function create(properties) {\n                    return new RpcGetOrderListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq} message RpcGetOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq} message RpcGetOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetOrderListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetOrderListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetOrderListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetOrderListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq\n                 */\n                RpcGetOrderListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetOrderListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetOrderListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetOrderListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetOrderListReq} message RpcGetOrderListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetOrderListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetOrderListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetOrderListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetOrderListReq;\n            })();\n\n            pb.RpcGetOrderListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetOrderListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetOrderListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcGetOrderListRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcGetOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetOrderListRsp.\n                 * @implements IRpcGetOrderListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp=} [properties] Properties to set\n                 */\n                function RpcGetOrderListRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetOrderListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @instance\n                 */\n                RpcGetOrderListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetOrderListRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @instance\n                 */\n                RpcGetOrderListRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetOrderListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp instance\n                 */\n                RpcGetOrderListRsp.create = function create(properties) {\n                    return new RpcGetOrderListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp} message RpcGetOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetOrderListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp} message RpcGetOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetOrderListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetOrderListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetOrderListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetOrderListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetOrderListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetOrderListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetOrderListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp\n                 */\n                RpcGetOrderListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetOrderListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetOrderListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetOrderListRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetOrderListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetOrderListRsp} message RpcGetOrderListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetOrderListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetOrderListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetOrderListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetOrderListRsp;\n            })();\n\n            pb.RpcGetWorkingOrderListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetWorkingOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetWorkingOrderListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetWorkingOrderListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetWorkingOrderListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetWorkingOrderListReq.\n                 * @implements IRpcGetWorkingOrderListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq=} [properties] Properties to set\n                 */\n                function RpcGetWorkingOrderListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetWorkingOrderListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @instance\n                 */\n                RpcGetWorkingOrderListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetWorkingOrderListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq instance\n                 */\n                RpcGetWorkingOrderListReq.create = function create(properties) {\n                    return new RpcGetWorkingOrderListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetWorkingOrderListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetWorkingOrderListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetWorkingOrderListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq\n                 */\n                RpcGetWorkingOrderListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetWorkingOrderListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetWorkingOrderListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetWorkingOrderListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetWorkingOrderListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetWorkingOrderListReq;\n            })();\n\n            pb.RpcGetWorkingOrderListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetWorkingOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetWorkingOrderListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetWorkingOrderListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcGetWorkingOrderListRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcGetWorkingOrderListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetWorkingOrderListRsp.\n                 * @implements IRpcGetWorkingOrderListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp=} [properties] Properties to set\n                 */\n                function RpcGetWorkingOrderListRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetWorkingOrderListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @instance\n                 */\n                RpcGetWorkingOrderListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetWorkingOrderListRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @instance\n                 */\n                RpcGetWorkingOrderListRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetWorkingOrderListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp instance\n                 */\n                RpcGetWorkingOrderListRsp.create = function create(properties) {\n                    return new RpcGetWorkingOrderListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetWorkingOrderListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetWorkingOrderListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetWorkingOrderListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetWorkingOrderListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetWorkingOrderListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetWorkingOrderListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetWorkingOrderListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp\n                 */\n                RpcGetWorkingOrderListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetWorkingOrderListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetWorkingOrderListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetWorkingOrderListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetWorkingOrderListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetWorkingOrderListRsp;\n            })();\n\n            pb.RpcQueryOrderByOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderByOrderIdReq commonReq\n                 * @property {string|null} [orderId] RpcQueryOrderByOrderIdReq orderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOrderIdReq.\n                 * @implements IRpcQueryOrderByOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderByOrderIdReq orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdReq.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderByOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq instance\n                 */\n                RpcQueryOrderByOrderIdReq.create = function create(properties) {\n                    return new RpcQueryOrderByOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq\n                 */\n                RpcQueryOrderByOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.orderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOrderIdReq;\n            })();\n\n            pb.RpcQueryOrderByOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderByOrderIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcQueryOrderByOrderIdRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOrderIdRsp.\n                 * @implements IRpcQueryOrderByOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOrderIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderByOrderIdRsp order.\n                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOrderIdRsp.prototype.order = null;\n\n                /**\n                 * Creates a new RpcQueryOrderByOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp instance\n                 */\n                RpcQueryOrderByOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryOrderByOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);\n                        if (error)\n                            return \"order.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp\n                 */\n                RpcQueryOrderByOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order != null) {\n                        if (typeof object.order !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.order: object expected\");\n                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.order = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOrderIdRsp;\n            })();\n\n            pb.RpcQueryOrderByOriginOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOriginOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderByOriginOrderIdReq commonReq\n                 * @property {string|null} [originOrderId] RpcQueryOrderByOriginOrderIdReq originOrderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOriginOrderIdReq.\n                 * @implements IRpcQueryOrderByOriginOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOriginOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdReq originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdReq.prototype.originOrderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderByOriginOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq instance\n                 */\n                RpcQueryOrderByOriginOrderIdReq.create = function create(properties) {\n                    return new RpcQueryOrderByOriginOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originOrderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.originOrderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOriginOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOriginOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOriginOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq\n                 */\n                RpcQueryOrderByOriginOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOriginOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOriginOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.originOrderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOriginOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOriginOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOriginOrderIdReq;\n            })();\n\n            pb.RpcQueryOrderByOriginOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderByOriginOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderByOriginOrderIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcQueryOrderByOriginOrderIdRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderByOriginOrderIdRsp.\n                 * @implements IRpcQueryOrderByOriginOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderByOriginOrderIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderByOriginOrderIdRsp order.\n                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.prototype.order = null;\n\n                /**\n                 * Creates a new RpcQueryOrderByOriginOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp instance\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryOrderByOriginOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderByOriginOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderByOriginOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderByOriginOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);\n                        if (error)\n                            return \"order.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderByOriginOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order != null) {\n                        if (typeof object.order !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.order: object expected\");\n                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderByOriginOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.order = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderByOriginOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderByOriginOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderByOriginOrderIdRsp;\n            })();\n\n            pb.RpcQueryOrderListByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderListByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryOrderListByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByAccountIdReq.\n                 * @implements IRpcQueryOrderListByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderListByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderListByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq instance\n                 */\n                RpcQueryOrderListByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryOrderListByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq\n                 */\n                RpcQueryOrderListByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByAccountIdReq;\n            })();\n\n            pb.RpcQueryOrderListByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderListByAccountIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcQueryOrderListByAccountIdRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByAccountIdRsp.\n                 * @implements IRpcQueryOrderListByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByAccountIdRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderListByAccountIdRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByAccountIdRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryOrderListByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp instance\n                 */\n                RpcQueryOrderListByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryOrderListByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp\n                 */\n                RpcQueryOrderListByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByAccountIdRsp;\n            })();\n\n            pb.RpcQueryOrderListByUniformSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByUniformSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderListByUniformSymbolReq commonReq\n                 * @property {string|null} [uniformSymbol] RpcQueryOrderListByUniformSymbolReq uniformSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByUniformSymbolReq.\n                 * @implements IRpcQueryOrderListByUniformSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByUniformSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByUniformSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryOrderListByUniformSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryOrderListByUniformSymbolReq uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryOrderListByUniformSymbolReq.prototype.uniformSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryOrderListByUniformSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq} RpcQueryOrderListByUniformSymbolReq instance\n                 */\n                RpcQueryOrderListByUniformSymbolReq.create = function create(properties) {\n                    return new RpcQueryOrderListByUniformSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUniformSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolReq} message RpcQueryOrderListByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUniformSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uniformSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUniformSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolReq} message RpcQueryOrderListByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUniformSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUniformSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq} RpcQueryOrderListByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUniformSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUniformSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq} RpcQueryOrderListByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUniformSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByUniformSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByUniformSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByUniformSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq} RpcQueryOrderListByUniformSymbolReq\n                 */\n                RpcQueryOrderListByUniformSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByUniformSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq} message RpcQueryOrderListByUniformSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByUniformSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.uniformSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByUniformSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByUniformSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByUniformSymbolReq;\n            })();\n\n            pb.RpcQueryOrderListByUniformSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryOrderListByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryOrderListByUniformSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderListByUniformSymbolRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcQueryOrderListByUniformSymbolRsp order\n                 */\n\n                /**\n                 * Constructs a new RpcQueryOrderListByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryOrderListByUniformSymbolRsp.\n                 * @implements IRpcQueryOrderListByUniformSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryOrderListByUniformSymbolRsp(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryOrderListByUniformSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryOrderListByUniformSymbolRsp order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryOrderListByUniformSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp} RpcQueryOrderListByUniformSymbolRsp instance\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.create = function create(properties) {\n                    return new RpcQueryOrderListByUniformSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUniformSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolRsp} message RpcQueryOrderListByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryOrderListByUniformSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUniformSymbolRsp} message RpcQueryOrderListByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUniformSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp} RpcQueryOrderListByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryOrderListByUniformSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp} RpcQueryOrderListByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryOrderListByUniformSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryOrderListByUniformSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp} RpcQueryOrderListByUniformSymbolRsp\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryOrderListByUniformSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp} message RpcQueryOrderListByUniformSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryOrderListByUniformSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUniformSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryOrderListByUniformSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryOrderListByUniformSymbolRsp;\n            })();\n\n            pb.RpcGetTradeListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetTradeListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTradeListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetTradeListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetTradeListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTradeListReq.\n                 * @implements IRpcGetTradeListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq=} [properties] Properties to set\n                 */\n                function RpcGetTradeListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTradeListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @instance\n                 */\n                RpcGetTradeListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetTradeListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq instance\n                 */\n                RpcGetTradeListReq.create = function create(properties) {\n                    return new RpcGetTradeListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq} message RpcGetTradeListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq} message RpcGetTradeListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTradeListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTradeListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTradeListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTradeListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq\n                 */\n                RpcGetTradeListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTradeListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTradeListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTradeListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTradeListReq} message RpcGetTradeListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTradeListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTradeListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTradeListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTradeListReq;\n            })();\n\n            pb.RpcGetTradeListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetTradeListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTradeListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetTradeListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcGetTradeListRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcGetTradeListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTradeListRsp.\n                 * @implements IRpcGetTradeListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp=} [properties] Properties to set\n                 */\n                function RpcGetTradeListRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTradeListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @instance\n                 */\n                RpcGetTradeListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetTradeListRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @instance\n                 */\n                RpcGetTradeListRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetTradeListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp instance\n                 */\n                RpcGetTradeListRsp.create = function create(properties) {\n                    return new RpcGetTradeListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp} message RpcGetTradeListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTradeListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp} message RpcGetTradeListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTradeListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTradeListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTradeListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTradeListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTradeListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTradeListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTradeListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp\n                 */\n                RpcGetTradeListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTradeListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTradeListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetTradeListRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTradeListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTradeListRsp} message RpcGetTradeListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTradeListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTradeListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTradeListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTradeListRsp;\n            })();\n\n            pb.RpcQueryTradeByTradeIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeByTradeIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeByTradeIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeByTradeIdReq commonReq\n                 * @property {string|null} [tradeId] RpcQueryTradeByTradeIdReq tradeId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeByTradeIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeByTradeIdReq.\n                 * @implements IRpcQueryTradeByTradeIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeByTradeIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeByTradeIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeByTradeIdReq tradeId.\n                 * @member {string} tradeId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdReq.prototype.tradeId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeByTradeIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq instance\n                 */\n                RpcQueryTradeByTradeIdReq.create = function create(properties) {\n                    return new RpcQueryTradeByTradeIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.tradeId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.tradeId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeByTradeIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeByTradeIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        if (!$util.isString(message.tradeId))\n                            return \"tradeId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeByTradeIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq\n                 */\n                RpcQueryTradeByTradeIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.tradeId != null)\n                        message.tradeId = String(object.tradeId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeByTradeIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeByTradeIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.tradeId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.tradeId != null && message.hasOwnProperty(\"tradeId\"))\n                        object.tradeId = message.tradeId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeByTradeIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeByTradeIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeByTradeIdReq;\n            })();\n\n            pb.RpcQueryTradeByTradeIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeByTradeIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeByTradeIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeByTradeIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.ITradeField|null} [trade] RpcQueryTradeByTradeIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeByTradeIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeByTradeIdRsp.\n                 * @implements IRpcQueryTradeByTradeIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeByTradeIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeByTradeIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeByTradeIdRsp trade.\n                 * @member {xyz.redtorch.pb.ITradeField|null|undefined} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeByTradeIdRsp.prototype.trade = null;\n\n                /**\n                 * Creates a new RpcQueryTradeByTradeIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp instance\n                 */\n                RpcQueryTradeByTradeIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeByTradeIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        $root.xyz.redtorch.pb.TradeField.encode(message.trade, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeByTradeIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeByTradeIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.trade = $root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeByTradeIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeByTradeIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeByTradeIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeByTradeIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade);\n                        if (error)\n                            return \"trade.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeByTradeIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp\n                 */\n                RpcQueryTradeByTradeIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade != null) {\n                        if (typeof object.trade !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.trade: object expected\");\n                        message.trade = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeByTradeIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeByTradeIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.trade = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        object.trade = $root.xyz.redtorch.pb.TradeField.toObject(message.trade, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeByTradeIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeByTradeIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeByTradeIdRsp;\n            })();\n\n            pb.RpcQueryTradeListByUniformSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByUniformSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByUniformSymbolReq commonReq\n                 * @property {string|null} [uniformSymbol] RpcQueryTradeListByUniformSymbolReq uniformSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByUniformSymbolReq.\n                 * @implements IRpcQueryTradeListByUniformSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByUniformSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByUniformSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryTradeListByUniformSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByUniformSymbolReq uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryTradeListByUniformSymbolReq.prototype.uniformSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByUniformSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq} RpcQueryTradeListByUniformSymbolReq instance\n                 */\n                RpcQueryTradeListByUniformSymbolReq.create = function create(properties) {\n                    return new RpcQueryTradeListByUniformSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUniformSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolReq} message RpcQueryTradeListByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUniformSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uniformSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUniformSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolReq} message RpcQueryTradeListByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUniformSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUniformSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq} RpcQueryTradeListByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUniformSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUniformSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq} RpcQueryTradeListByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUniformSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByUniformSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByUniformSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByUniformSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq} RpcQueryTradeListByUniformSymbolReq\n                 */\n                RpcQueryTradeListByUniformSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByUniformSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq} message RpcQueryTradeListByUniformSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByUniformSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.uniformSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByUniformSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByUniformSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByUniformSymbolReq;\n            })();\n\n            pb.RpcQueryTradeListByUniformSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByUniformSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByUniformSymbolRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByUniformSymbolRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByUniformSymbolRsp.\n                 * @implements IRpcQueryTradeListByUniformSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByUniformSymbolRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByUniformSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByUniformSymbolRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByUniformSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp} RpcQueryTradeListByUniformSymbolRsp instance\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByUniformSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUniformSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolRsp} message RpcQueryTradeListByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByUniformSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUniformSymbolRsp} message RpcQueryTradeListByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUniformSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp} RpcQueryTradeListByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByUniformSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp} RpcQueryTradeListByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByUniformSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByUniformSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp} RpcQueryTradeListByUniformSymbolRsp\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByUniformSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp} message RpcQueryTradeListByUniformSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByUniformSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUniformSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByUniformSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByUniformSymbolRsp;\n            })();\n\n            pb.RpcQueryTradeListByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryTradeListByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByAccountIdReq.\n                 * @implements IRpcQueryTradeListByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq instance\n                 */\n                RpcQueryTradeListByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryTradeListByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq\n                 */\n                RpcQueryTradeListByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByAccountIdReq;\n            })();\n\n            pb.RpcQueryTradeListByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByAccountIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByAccountIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByAccountIdRsp.\n                 * @implements IRpcQueryTradeListByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByAccountIdRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByAccountIdRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByAccountIdRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp instance\n                 */\n                RpcQueryTradeListByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp\n                 */\n                RpcQueryTradeListByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByAccountIdRsp;\n            })();\n\n            pb.RpcQueryTradeListByOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByOrderIdReq commonReq\n                 * @property {string|null} [orderId] RpcQueryTradeListByOrderIdReq orderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOrderIdReq.\n                 * @implements IRpcQueryTradeListByOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByOrderIdReq orderId.\n                 * @member {string} orderId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdReq.prototype.orderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq instance\n                 */\n                RpcQueryTradeListByOrderIdReq.create = function create(properties) {\n                    return new RpcQueryTradeListByOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.orderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        if (!$util.isString(message.orderId))\n                            return \"orderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq\n                 */\n                RpcQueryTradeListByOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.orderId != null)\n                        message.orderId = String(object.orderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.orderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.orderId != null && message.hasOwnProperty(\"orderId\"))\n                        object.orderId = message.orderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOrderIdReq;\n            })();\n\n            pb.RpcQueryTradeListByOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByOrderIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByOrderIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOrderIdRsp.\n                 * @implements IRpcQueryTradeListByOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOrderIdRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByOrderIdRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOrderIdRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp instance\n                 */\n                RpcQueryTradeListByOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp\n                 */\n                RpcQueryTradeListByOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOrderIdRsp;\n            })();\n\n            pb.RpcQueryTradeListByOriginOrderIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOriginOrderIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByOriginOrderIdReq commonReq\n                 * @property {string|null} [originOrderId] RpcQueryTradeListByOriginOrderIdReq originOrderId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOriginOrderIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOriginOrderIdReq.\n                 * @implements IRpcQueryTradeListByOriginOrderIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOriginOrderIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdReq originOrderId.\n                 * @member {string} originOrderId\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.prototype.originOrderId = \"\";\n\n                /**\n                 * Creates a new RpcQueryTradeListByOriginOrderIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq instance\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.create = function create(properties) {\n                    return new RpcQueryTradeListByOriginOrderIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originOrderId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.originOrderId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOriginOrderIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        if (!$util.isString(message.originOrderId))\n                            return \"originOrderId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOriginOrderIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.originOrderId != null)\n                        message.originOrderId = String(object.originOrderId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOriginOrderIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.originOrderId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.originOrderId != null && message.hasOwnProperty(\"originOrderId\"))\n                        object.originOrderId = message.originOrderId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOriginOrderIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOriginOrderIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOriginOrderIdReq;\n            })();\n\n            pb.RpcQueryTradeListByOriginOrderIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryTradeListByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryTradeListByOriginOrderIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByOriginOrderIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByOriginOrderIdRsp trade\n                 */\n\n                /**\n                 * Constructs a new RpcQueryTradeListByOriginOrderIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryTradeListByOriginOrderIdRsp.\n                 * @implements IRpcQueryTradeListByOriginOrderIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryTradeListByOriginOrderIdRsp(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryTradeListByOriginOrderIdRsp trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @instance\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryTradeListByOriginOrderIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp instance\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.create = function create(properties) {\n                    return new RpcQueryTradeListByOriginOrderIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryTradeListByOriginOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryTradeListByOriginOrderIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryTradeListByOriginOrderIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryTradeListByOriginOrderIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryTradeListByOriginOrderIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryTradeListByOriginOrderIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryTradeListByOriginOrderIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryTradeListByOriginOrderIdRsp;\n            })();\n\n            pb.RpcGetPositionListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetPositionListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetPositionListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetPositionListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetPositionListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetPositionListReq.\n                 * @implements IRpcGetPositionListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq=} [properties] Properties to set\n                 */\n                function RpcGetPositionListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetPositionListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @instance\n                 */\n                RpcGetPositionListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetPositionListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq instance\n                 */\n                RpcGetPositionListReq.create = function create(properties) {\n                    return new RpcGetPositionListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq} message RpcGetPositionListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq} message RpcGetPositionListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetPositionListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetPositionListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetPositionListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetPositionListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq\n                 */\n                RpcGetPositionListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetPositionListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetPositionListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetPositionListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetPositionListReq} message RpcGetPositionListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetPositionListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetPositionListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetPositionListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetPositionListReq;\n            })();\n\n            pb.RpcGetPositionListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetPositionListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetPositionListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetPositionListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcGetPositionListRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcGetPositionListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetPositionListRsp.\n                 * @implements IRpcGetPositionListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp=} [properties] Properties to set\n                 */\n                function RpcGetPositionListRsp(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetPositionListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @instance\n                 */\n                RpcGetPositionListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetPositionListRsp position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @instance\n                 */\n                RpcGetPositionListRsp.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetPositionListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp instance\n                 */\n                RpcGetPositionListRsp.create = function create(properties) {\n                    return new RpcGetPositionListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp} message RpcGetPositionListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetPositionListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp} message RpcGetPositionListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetPositionListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetPositionListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetPositionListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetPositionListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetPositionListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetPositionListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetPositionListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp\n                 */\n                RpcGetPositionListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetPositionListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetPositionListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListRsp.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetPositionListRsp.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetPositionListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetPositionListRsp} message RpcGetPositionListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetPositionListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetPositionListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetPositionListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetPositionListRsp;\n            })();\n\n            pb.RpcQueryPositionByPositionIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionByPositionIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionByPositionIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionByPositionIdReq commonReq\n                 * @property {string|null} [positionId] RpcQueryPositionByPositionIdReq positionId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionByPositionIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionByPositionIdReq.\n                 * @implements IRpcQueryPositionByPositionIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryPositionByPositionIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionByPositionIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryPositionByPositionIdReq positionId.\n                 * @member {string} positionId\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdReq.prototype.positionId = \"\";\n\n                /**\n                 * Creates a new RpcQueryPositionByPositionIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq instance\n                 */\n                RpcQueryPositionByPositionIdReq.create = function create(properties) {\n                    return new RpcQueryPositionByPositionIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.positionId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.positionId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionByPositionIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionByPositionIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        if (!$util.isString(message.positionId))\n                            return \"positionId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionByPositionIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq\n                 */\n                RpcQueryPositionByPositionIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.positionId != null)\n                        message.positionId = String(object.positionId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionByPositionIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionByPositionIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.positionId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.positionId != null && message.hasOwnProperty(\"positionId\"))\n                        object.positionId = message.positionId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionByPositionIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionByPositionIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionByPositionIdReq;\n            })();\n\n            pb.RpcQueryPositionByPositionIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionByPositionIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionByPositionIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionByPositionIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IPositionField|null} [position] RpcQueryPositionByPositionIdRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionByPositionIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionByPositionIdRsp.\n                 * @implements IRpcQueryPositionByPositionIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryPositionByPositionIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionByPositionIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryPositionByPositionIdRsp position.\n                 * @member {xyz.redtorch.pb.IPositionField|null|undefined} position\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionByPositionIdRsp.prototype.position = null;\n\n                /**\n                 * Creates a new RpcQueryPositionByPositionIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp instance\n                 */\n                RpcQueryPositionByPositionIdRsp.create = function create(properties) {\n                    return new RpcQueryPositionByPositionIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        $root.xyz.redtorch.pb.PositionField.encode(message.position, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionByPositionIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionByPositionIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.position = $root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionByPositionIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionByPositionIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionByPositionIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionByPositionIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        var error = $root.xyz.redtorch.pb.PositionField.verify(message.position);\n                        if (error)\n                            return \"position.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionByPositionIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp\n                 */\n                RpcQueryPositionByPositionIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position != null) {\n                        if (typeof object.position !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.position: object expected\");\n                        message.position = $root.xyz.redtorch.pb.PositionField.fromObject(object.position);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionByPositionIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionByPositionIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.position = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        object.position = $root.xyz.redtorch.pb.PositionField.toObject(message.position, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionByPositionIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionByPositionIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionByPositionIdRsp;\n            })();\n\n            pb.RpcQueryPositionListByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionListByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryPositionListByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByAccountIdReq.\n                 * @implements IRpcQueryPositionListByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryPositionListByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryPositionListByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq instance\n                 */\n                RpcQueryPositionListByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryPositionListByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq\n                 */\n                RpcQueryPositionListByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByAccountIdReq;\n            })();\n\n            pb.RpcQueryPositionListByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionListByAccountIdRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcQueryPositionListByAccountIdRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByAccountIdRsp.\n                 * @implements IRpcQueryPositionListByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByAccountIdRsp(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryPositionListByAccountIdRsp position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByAccountIdRsp.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryPositionListByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp instance\n                 */\n                RpcQueryPositionListByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryPositionListByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp\n                 */\n                RpcQueryPositionListByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByAccountIdRsp;\n            })();\n\n            pb.RpcQueryPositionListByUniformSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByUniformSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionListByUniformSymbolReq commonReq\n                 * @property {string|null} [uniformSymbol] RpcQueryPositionListByUniformSymbolReq uniformSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByUniformSymbolReq.\n                 * @implements IRpcQueryPositionListByUniformSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByUniformSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByUniformSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryPositionListByUniformSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryPositionListByUniformSymbolReq uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryPositionListByUniformSymbolReq.prototype.uniformSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryPositionListByUniformSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq} RpcQueryPositionListByUniformSymbolReq instance\n                 */\n                RpcQueryPositionListByUniformSymbolReq.create = function create(properties) {\n                    return new RpcQueryPositionListByUniformSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUniformSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolReq} message RpcQueryPositionListByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUniformSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uniformSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUniformSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolReq} message RpcQueryPositionListByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUniformSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUniformSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq} RpcQueryPositionListByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUniformSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUniformSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq} RpcQueryPositionListByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUniformSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByUniformSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByUniformSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByUniformSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq} RpcQueryPositionListByUniformSymbolReq\n                 */\n                RpcQueryPositionListByUniformSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByUniformSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq} message RpcQueryPositionListByUniformSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByUniformSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.uniformSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByUniformSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByUniformSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByUniformSymbolReq;\n            })();\n\n            pb.RpcQueryPositionListByUniformSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryPositionListByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryPositionListByUniformSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionListByUniformSymbolRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcQueryPositionListByUniformSymbolRsp position\n                 */\n\n                /**\n                 * Constructs a new RpcQueryPositionListByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryPositionListByUniformSymbolRsp.\n                 * @implements IRpcQueryPositionListByUniformSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryPositionListByUniformSymbolRsp(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryPositionListByUniformSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryPositionListByUniformSymbolRsp position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryPositionListByUniformSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp} RpcQueryPositionListByUniformSymbolRsp instance\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.create = function create(properties) {\n                    return new RpcQueryPositionListByUniformSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUniformSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolRsp} message RpcQueryPositionListByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryPositionListByUniformSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUniformSymbolRsp} message RpcQueryPositionListByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUniformSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp} RpcQueryPositionListByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryPositionListByUniformSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp} RpcQueryPositionListByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryPositionListByUniformSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryPositionListByUniformSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp} RpcQueryPositionListByUniformSymbolRsp\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryPositionListByUniformSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp} message RpcQueryPositionListByUniformSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryPositionListByUniformSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUniformSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryPositionListByUniformSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryPositionListByUniformSymbolRsp;\n            })();\n\n            pb.RpcGetAccountListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetAccountListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetAccountListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetAccountListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetAccountListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetAccountListReq.\n                 * @implements IRpcGetAccountListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq=} [properties] Properties to set\n                 */\n                function RpcGetAccountListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetAccountListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @instance\n                 */\n                RpcGetAccountListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetAccountListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq instance\n                 */\n                RpcGetAccountListReq.create = function create(properties) {\n                    return new RpcGetAccountListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq} message RpcGetAccountListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq} message RpcGetAccountListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetAccountListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetAccountListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetAccountListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetAccountListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq\n                 */\n                RpcGetAccountListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetAccountListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetAccountListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetAccountListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetAccountListReq} message RpcGetAccountListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetAccountListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetAccountListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetAccountListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetAccountListReq;\n            })();\n\n            pb.RpcGetAccountListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetAccountListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetAccountListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetAccountListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcGetAccountListRsp account\n                 */\n\n                /**\n                 * Constructs a new RpcGetAccountListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetAccountListRsp.\n                 * @implements IRpcGetAccountListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp=} [properties] Properties to set\n                 */\n                function RpcGetAccountListRsp(properties) {\n                    this.account = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetAccountListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @instance\n                 */\n                RpcGetAccountListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetAccountListRsp account.\n                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @instance\n                 */\n                RpcGetAccountListRsp.prototype.account = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetAccountListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp instance\n                 */\n                RpcGetAccountListRsp.create = function create(properties) {\n                    return new RpcGetAccountListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp} message RpcGetAccountListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.account != null && message.account.length)\n                        for (var i = 0; i < message.account.length; ++i)\n                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetAccountListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp} message RpcGetAccountListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetAccountListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetAccountListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.account && message.account.length))\n                                message.account = [];\n                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetAccountListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetAccountListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetAccountListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetAccountListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        if (!Array.isArray(message.account))\n                            return \"account: array expected\";\n                        for (var i = 0; i < message.account.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);\n                            if (error)\n                                return \"account.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetAccountListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp\n                 */\n                RpcGetAccountListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetAccountListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetAccountListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.account) {\n                        if (!Array.isArray(object.account))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListRsp.account: array expected\");\n                        message.account = [];\n                        for (var i = 0; i < object.account.length; ++i) {\n                            if (typeof object.account[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetAccountListRsp.account: object expected\");\n                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetAccountListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetAccountListRsp} message RpcGetAccountListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetAccountListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.account = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.account && message.account.length) {\n                        object.account = [];\n                        for (var j = 0; j < message.account.length; ++j)\n                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetAccountListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetAccountListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetAccountListRsp;\n            })();\n\n            pb.RpcQueryAccountByAccountIdReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountByAccountIdReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryAccountByAccountIdReq commonReq\n                 * @property {string|null} [accountId] RpcQueryAccountByAccountIdReq accountId\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountByAccountIdReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountByAccountIdReq.\n                 * @implements IRpcQueryAccountByAccountIdReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq=} [properties] Properties to set\n                 */\n                function RpcQueryAccountByAccountIdReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountByAccountIdReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryAccountByAccountIdReq accountId.\n                 * @member {string} accountId\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdReq.prototype.accountId = \"\";\n\n                /**\n                 * Creates a new RpcQueryAccountByAccountIdReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq instance\n                 */\n                RpcQueryAccountByAccountIdReq.create = function create(properties) {\n                    return new RpcQueryAccountByAccountIdReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountByAccountIdReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountByAccountIdReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        if (!$util.isString(message.accountId))\n                            return \"accountId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountByAccountIdReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq\n                 */\n                RpcQueryAccountByAccountIdReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountId != null)\n                        message.accountId = String(object.accountId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountByAccountIdReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountByAccountIdReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountId = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountId != null && message.hasOwnProperty(\"accountId\"))\n                        object.accountId = message.accountId;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountByAccountIdReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountByAccountIdReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountByAccountIdReq;\n            })();\n\n            pb.RpcQueryAccountByAccountIdRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountByAccountIdRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryAccountByAccountIdRsp commonRsp\n                 * @property {xyz.redtorch.pb.IAccountField|null} [account] RpcQueryAccountByAccountIdRsp account\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountByAccountIdRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountByAccountIdRsp.\n                 * @implements IRpcQueryAccountByAccountIdRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp=} [properties] Properties to set\n                 */\n                function RpcQueryAccountByAccountIdRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountByAccountIdRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryAccountByAccountIdRsp account.\n                 * @member {xyz.redtorch.pb.IAccountField|null|undefined} account\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @instance\n                 */\n                RpcQueryAccountByAccountIdRsp.prototype.account = null;\n\n                /**\n                 * Creates a new RpcQueryAccountByAccountIdRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp instance\n                 */\n                RpcQueryAccountByAccountIdRsp.create = function create(properties) {\n                    return new RpcQueryAccountByAccountIdRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        $root.xyz.redtorch.pb.AccountField.encode(message.account, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.account = $root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountByAccountIdRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountByAccountIdRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountByAccountIdRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        var error = $root.xyz.redtorch.pb.AccountField.verify(message.account);\n                        if (error)\n                            return \"account.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountByAccountIdRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp\n                 */\n                RpcQueryAccountByAccountIdRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.account != null) {\n                        if (typeof object.account !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.account: object expected\");\n                        message.account = $root.xyz.redtorch.pb.AccountField.fromObject(object.account);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountByAccountIdRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountByAccountIdRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.account = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        object.account = $root.xyz.redtorch.pb.AccountField.toObject(message.account, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountByAccountIdRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountByAccountIdRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountByAccountIdRsp;\n            })();\n\n            pb.RpcQueryAccountListByAccountCodeReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountListByAccountCodeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountListByAccountCodeReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryAccountListByAccountCodeReq commonReq\n                 * @property {string|null} [accountCode] RpcQueryAccountListByAccountCodeReq accountCode\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountListByAccountCodeReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountListByAccountCodeReq.\n                 * @implements IRpcQueryAccountListByAccountCodeReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq=} [properties] Properties to set\n                 */\n                function RpcQueryAccountListByAccountCodeReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountListByAccountCodeReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryAccountListByAccountCodeReq accountCode.\n                 * @member {string} accountCode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeReq.prototype.accountCode = \"\";\n\n                /**\n                 * Creates a new RpcQueryAccountListByAccountCodeReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq instance\n                 */\n                RpcQueryAccountListByAccountCodeReq.create = function create(properties) {\n                    return new RpcQueryAccountListByAccountCodeReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountCode);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.accountCode = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountListByAccountCodeReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountListByAccountCodeReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        if (!$util.isString(message.accountCode))\n                            return \"accountCode: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountListByAccountCodeReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq\n                 */\n                RpcQueryAccountListByAccountCodeReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.accountCode != null)\n                        message.accountCode = String(object.accountCode);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountListByAccountCodeReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountListByAccountCodeReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.accountCode = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.accountCode != null && message.hasOwnProperty(\"accountCode\"))\n                        object.accountCode = message.accountCode;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountListByAccountCodeReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountListByAccountCodeReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountListByAccountCodeReq;\n            })();\n\n            pb.RpcQueryAccountListByAccountCodeRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryAccountListByAccountCodeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryAccountListByAccountCodeRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryAccountListByAccountCodeRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcQueryAccountListByAccountCodeRsp account\n                 */\n\n                /**\n                 * Constructs a new RpcQueryAccountListByAccountCodeRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryAccountListByAccountCodeRsp.\n                 * @implements IRpcQueryAccountListByAccountCodeRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp=} [properties] Properties to set\n                 */\n                function RpcQueryAccountListByAccountCodeRsp(properties) {\n                    this.account = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryAccountListByAccountCodeRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryAccountListByAccountCodeRsp account.\n                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @instance\n                 */\n                RpcQueryAccountListByAccountCodeRsp.prototype.account = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryAccountListByAccountCodeRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp instance\n                 */\n                RpcQueryAccountListByAccountCodeRsp.create = function create(properties) {\n                    return new RpcQueryAccountListByAccountCodeRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.account != null && message.account.length)\n                        for (var i = 0; i < message.account.length; ++i)\n                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryAccountListByAccountCodeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryAccountListByAccountCodeRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.account && message.account.length))\n                                message.account = [];\n                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryAccountListByAccountCodeRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryAccountListByAccountCodeRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryAccountListByAccountCodeRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryAccountListByAccountCodeRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        if (!Array.isArray(message.account))\n                            return \"account: array expected\";\n                        for (var i = 0; i < message.account.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);\n                            if (error)\n                                return \"account.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryAccountListByAccountCodeRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp\n                 */\n                RpcQueryAccountListByAccountCodeRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.account) {\n                        if (!Array.isArray(object.account))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.account: array expected\");\n                        message.account = [];\n                        for (var i = 0; i < object.account.length; ++i) {\n                            if (typeof object.account[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.account: object expected\");\n                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryAccountListByAccountCodeRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryAccountListByAccountCodeRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.account = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.account && message.account.length) {\n                        object.account = [];\n                        for (var j = 0; j < message.account.length; ++j)\n                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryAccountListByAccountCodeRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryAccountListByAccountCodeRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryAccountListByAccountCodeRsp;\n            })();\n\n            pb.RpcGetContractListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetContractListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetContractListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetContractListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetContractListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetContractListReq.\n                 * @implements IRpcGetContractListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq=} [properties] Properties to set\n                 */\n                function RpcGetContractListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetContractListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @instance\n                 */\n                RpcGetContractListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetContractListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq instance\n                 */\n                RpcGetContractListReq.create = function create(properties) {\n                    return new RpcGetContractListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq} message RpcGetContractListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListReq} message RpcGetContractListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetContractListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetContractListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetContractListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetContractListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetContractListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetContractListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq\n                 */\n                RpcGetContractListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetContractListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetContractListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetContractListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetContractListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetContractListReq} message RpcGetContractListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetContractListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetContractListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetContractListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetContractListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetContractListReq;\n            })();\n\n            pb.RpcGetContractListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetContractListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetContractListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetContractListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcGetContractListRsp contract\n                 */\n\n                /**\n                 * Constructs a new RpcGetContractListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetContractListRsp.\n                 * @implements IRpcGetContractListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp=} [properties] Properties to set\n                 */\n                function RpcGetContractListRsp(properties) {\n                    this.contract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetContractListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @instance\n                 */\n                RpcGetContractListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetContractListRsp contract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @instance\n                 */\n                RpcGetContractListRsp.prototype.contract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetContractListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp instance\n                 */\n                RpcGetContractListRsp.create = function create(properties) {\n                    return new RpcGetContractListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp} message RpcGetContractListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.contract.length)\n                        for (var i = 0; i < message.contract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetContractListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp} message RpcGetContractListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetContractListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetContractListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetContractListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.contract && message.contract.length))\n                                message.contract = [];\n                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetContractListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetContractListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetContractListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetContractListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        if (!Array.isArray(message.contract))\n                            return \"contract: array expected\";\n                        for (var i = 0; i < message.contract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);\n                            if (error)\n                                return \"contract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetContractListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp\n                 */\n                RpcGetContractListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetContractListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetContractListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetContractListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.contract) {\n                        if (!Array.isArray(object.contract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetContractListRsp.contract: array expected\");\n                        message.contract = [];\n                        for (var i = 0; i < object.contract.length; ++i) {\n                            if (typeof object.contract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetContractListRsp.contract: object expected\");\n                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetContractListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetContractListRsp} message RpcGetContractListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetContractListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.contract = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.contract && message.contract.length) {\n                        object.contract = [];\n                        for (var j = 0; j < message.contract.length; ++j)\n                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetContractListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetContractListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetContractListRsp;\n            })();\n\n            pb.RpcQueryContractByUniformSymbolReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractByUniformSymbolReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryContractByUniformSymbolReq commonReq\n                 * @property {string|null} [uniformSymbol] RpcQueryContractByUniformSymbolReq uniformSymbol\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractByUniformSymbolReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractByUniformSymbolReq.\n                 * @implements IRpcQueryContractByUniformSymbolReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolReq=} [properties] Properties to set\n                 */\n                function RpcQueryContractByUniformSymbolReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractByUniformSymbolReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryContractByUniformSymbolReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryContractByUniformSymbolReq uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @instance\n                 */\n                RpcQueryContractByUniformSymbolReq.prototype.uniformSymbol = \"\";\n\n                /**\n                 * Creates a new RpcQueryContractByUniformSymbolReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq} RpcQueryContractByUniformSymbolReq instance\n                 */\n                RpcQueryContractByUniformSymbolReq.create = function create(properties) {\n                    return new RpcQueryContractByUniformSymbolReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByUniformSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolReq} message RpcQueryContractByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByUniformSymbolReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uniformSymbol);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByUniformSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolReq} message RpcQueryContractByUniformSymbolReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByUniformSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByUniformSymbolReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq} RpcQueryContractByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByUniformSymbolReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByUniformSymbolReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq} RpcQueryContractByUniformSymbolReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByUniformSymbolReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractByUniformSymbolReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractByUniformSymbolReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractByUniformSymbolReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq} RpcQueryContractByUniformSymbolReq\n                 */\n                RpcQueryContractByUniformSymbolReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractByUniformSymbolReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq} message RpcQueryContractByUniformSymbolReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractByUniformSymbolReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        object.uniformSymbol = \"\";\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractByUniformSymbolReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractByUniformSymbolReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractByUniformSymbolReq;\n            })();\n\n            pb.RpcQueryContractByUniformSymbolRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryContractByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryContractByUniformSymbolRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryContractByUniformSymbolRsp commonRsp\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcQueryContractByUniformSymbolRsp contract\n                 */\n\n                /**\n                 * Constructs a new RpcQueryContractByUniformSymbolRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryContractByUniformSymbolRsp.\n                 * @implements IRpcQueryContractByUniformSymbolRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolRsp=} [properties] Properties to set\n                 */\n                function RpcQueryContractByUniformSymbolRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryContractByUniformSymbolRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryContractByUniformSymbolRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryContractByUniformSymbolRsp contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @instance\n                 */\n                RpcQueryContractByUniformSymbolRsp.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcQueryContractByUniformSymbolRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp} RpcQueryContractByUniformSymbolRsp instance\n                 */\n                RpcQueryContractByUniformSymbolRsp.create = function create(properties) {\n                    return new RpcQueryContractByUniformSymbolRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByUniformSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolRsp} message RpcQueryContractByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByUniformSymbolRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryContractByUniformSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryContractByUniformSymbolRsp} message RpcQueryContractByUniformSymbolRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryContractByUniformSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByUniformSymbolRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp} RpcQueryContractByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByUniformSymbolRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryContractByUniformSymbolRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp} RpcQueryContractByUniformSymbolRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryContractByUniformSymbolRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryContractByUniformSymbolRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryContractByUniformSymbolRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryContractByUniformSymbolRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp} RpcQueryContractByUniformSymbolRsp\n                 */\n                RpcQueryContractByUniformSymbolRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryContractByUniformSymbolRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp} message RpcQueryContractByUniformSymbolRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryContractByUniformSymbolRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonRsp = null;\n                        object.contract = null;\n                    }\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryContractByUniformSymbolRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryContractByUniformSymbolRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryContractByUniformSymbolRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryContractByUniformSymbolRsp;\n            })();\n\n            pb.RpcSyncSlaveNodeRuntimeDataReq = (function() {\n\n                /**\n                 * Properties of a RpcSyncSlaveNodeRuntimeDataReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSyncSlaveNodeRuntimeDataReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSyncSlaveNodeRuntimeDataReq commonReq\n                 * @property {Array.<xyz.redtorch.pb.IGatewayField>|null} [gateway] RpcSyncSlaveNodeRuntimeDataReq gateway\n                 */\n\n                /**\n                 * Constructs a new RpcSyncSlaveNodeRuntimeDataReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSyncSlaveNodeRuntimeDataReq.\n                 * @implements IRpcSyncSlaveNodeRuntimeDataReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq=} [properties] Properties to set\n                 */\n                function RpcSyncSlaveNodeRuntimeDataReq(properties) {\n                    this.gateway = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.prototype.commonReq = null;\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataReq gateway.\n                 * @member {Array.<xyz.redtorch.pb.IGatewayField>} gateway\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.prototype.gateway = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcSyncSlaveNodeRuntimeDataReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.create = function create(properties) {\n                    return new RpcSyncSlaveNodeRuntimeDataReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.gateway != null && message.gateway.length)\n                        for (var i = 0; i < message.gateway.length; ++i)\n                            $root.xyz.redtorch.pb.GatewayField.encode(message.gateway[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.gateway && message.gateway.length))\n                                message.gateway = [];\n                            message.gateway.push($root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSyncSlaveNodeRuntimeDataReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.gateway != null && message.hasOwnProperty(\"gateway\")) {\n                        if (!Array.isArray(message.gateway))\n                            return \"gateway: array expected\";\n                        for (var i = 0; i < message.gateway.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway[i]);\n                            if (error)\n                                return \"gateway.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSyncSlaveNodeRuntimeDataReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.gateway) {\n                        if (!Array.isArray(object.gateway))\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.gateway: array expected\");\n                        message.gateway = [];\n                        for (var i = 0; i < object.gateway.length; ++i) {\n                            if (typeof object.gateway[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.gateway: object expected\");\n                            message.gateway[i] = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSyncSlaveNodeRuntimeDataReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.gateway = [];\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.gateway && message.gateway.length) {\n                        object.gateway = [];\n                        for (var j = 0; j < message.gateway.length; ++j)\n                            object.gateway[j] = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSyncSlaveNodeRuntimeDataReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSyncSlaveNodeRuntimeDataReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSyncSlaveNodeRuntimeDataReq;\n            })();\n\n            pb.RpcSyncSlaveNodeRuntimeDataRsp = (function() {\n\n                /**\n                 * Properties of a RpcSyncSlaveNodeRuntimeDataRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcSyncSlaveNodeRuntimeDataRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSyncSlaveNodeRuntimeDataRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IGatewaySettingField>|null} [gatewaySetting] RpcSyncSlaveNodeRuntimeDataRsp gatewaySetting\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [subscribedContract] RpcSyncSlaveNodeRuntimeDataRsp subscribedContract\n                 */\n\n                /**\n                 * Constructs a new RpcSyncSlaveNodeRuntimeDataRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcSyncSlaveNodeRuntimeDataRsp.\n                 * @implements IRpcSyncSlaveNodeRuntimeDataRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp=} [properties] Properties to set\n                 */\n                function RpcSyncSlaveNodeRuntimeDataRsp(properties) {\n                    this.gatewaySetting = [];\n                    this.subscribedContract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataRsp gatewaySetting.\n                 * @member {Array.<xyz.redtorch.pb.IGatewaySettingField>} gatewaySetting\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.gatewaySetting = $util.emptyArray;\n\n                /**\n                 * RpcSyncSlaveNodeRuntimeDataRsp subscribedContract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} subscribedContract\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.subscribedContract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcSyncSlaveNodeRuntimeDataRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp instance\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.create = function create(properties) {\n                    return new RpcSyncSlaveNodeRuntimeDataRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.gatewaySetting != null && message.gatewaySetting.length)\n                        for (var i = 0; i < message.gatewaySetting.length; ++i)\n                            $root.xyz.redtorch.pb.GatewaySettingField.encode(message.gatewaySetting[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.subscribedContract != null && message.subscribedContract.length)\n                        for (var i = 0; i < message.subscribedContract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.subscribedContract[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.gatewaySetting && message.gatewaySetting.length))\n                                message.gatewaySetting = [];\n                            message.gatewaySetting.push($root.xyz.redtorch.pb.GatewaySettingField.decode(reader, reader.uint32()));\n                            break;\n                        case 3:\n                            if (!(message.subscribedContract && message.subscribedContract.length))\n                                message.subscribedContract = [];\n                            message.subscribedContract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcSyncSlaveNodeRuntimeDataRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcSyncSlaveNodeRuntimeDataRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.gatewaySetting != null && message.hasOwnProperty(\"gatewaySetting\")) {\n                        if (!Array.isArray(message.gatewaySetting))\n                            return \"gatewaySetting: array expected\";\n                        for (var i = 0; i < message.gatewaySetting.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.GatewaySettingField.verify(message.gatewaySetting[i]);\n                            if (error)\n                                return \"gatewaySetting.\" + error;\n                        }\n                    }\n                    if (message.subscribedContract != null && message.hasOwnProperty(\"subscribedContract\")) {\n                        if (!Array.isArray(message.subscribedContract))\n                            return \"subscribedContract: array expected\";\n                        for (var i = 0; i < message.subscribedContract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.subscribedContract[i]);\n                            if (error)\n                                return \"subscribedContract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcSyncSlaveNodeRuntimeDataRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.gatewaySetting) {\n                        if (!Array.isArray(object.gatewaySetting))\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.gatewaySetting: array expected\");\n                        message.gatewaySetting = [];\n                        for (var i = 0; i < object.gatewaySetting.length; ++i) {\n                            if (typeof object.gatewaySetting[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.gatewaySetting: object expected\");\n                            message.gatewaySetting[i] = $root.xyz.redtorch.pb.GatewaySettingField.fromObject(object.gatewaySetting[i]);\n                        }\n                    }\n                    if (object.subscribedContract) {\n                        if (!Array.isArray(object.subscribedContract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.subscribedContract: array expected\");\n                        message.subscribedContract = [];\n                        for (var i = 0; i < object.subscribedContract.length; ++i) {\n                            if (typeof object.subscribedContract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.subscribedContract: object expected\");\n                            message.subscribedContract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.subscribedContract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcSyncSlaveNodeRuntimeDataRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.gatewaySetting = [];\n                        object.subscribedContract = [];\n                    }\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.gatewaySetting && message.gatewaySetting.length) {\n                        object.gatewaySetting = [];\n                        for (var j = 0; j < message.gatewaySetting.length; ++j)\n                            object.gatewaySetting[j] = $root.xyz.redtorch.pb.GatewaySettingField.toObject(message.gatewaySetting[j], options);\n                    }\n                    if (message.subscribedContract && message.subscribedContract.length) {\n                        object.subscribedContract = [];\n                        for (var j = 0; j < message.subscribedContract.length; ++j)\n                            object.subscribedContract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.subscribedContract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcSyncSlaveNodeRuntimeDataRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcSyncSlaveNodeRuntimeDataRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcSyncSlaveNodeRuntimeDataRsp;\n            })();\n\n            pb.RpcGetTickListReq = (function() {\n\n                /**\n                 * Properties of a RpcGetTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTickListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetTickListReq commonReq\n                 */\n\n                /**\n                 * Constructs a new RpcGetTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTickListReq.\n                 * @implements IRpcGetTickListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq=} [properties] Properties to set\n                 */\n                function RpcGetTickListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTickListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @instance\n                 */\n                RpcGetTickListReq.prototype.commonReq = null;\n\n                /**\n                 * Creates a new RpcGetTickListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq instance\n                 */\n                RpcGetTickListReq.create = function create(properties) {\n                    return new RpcGetTickListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq} message RpcGetTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListReq} message RpcGetTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTickListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTickListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTickListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTickListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTickListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTickListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq\n                 */\n                RpcGetTickListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTickListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTickListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTickListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTickListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTickListReq} message RpcGetTickListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTickListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.commonReq = null;\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTickListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTickListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTickListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTickListReq;\n            })();\n\n            pb.RpcGetTickListRsp = (function() {\n\n                /**\n                 * Properties of a RpcGetTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcGetTickListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetTickListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcGetTickListRsp tick\n                 */\n\n                /**\n                 * Constructs a new RpcGetTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcGetTickListRsp.\n                 * @implements IRpcGetTickListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp=} [properties] Properties to set\n                 */\n                function RpcGetTickListRsp(properties) {\n                    this.tick = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcGetTickListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @instance\n                 */\n                RpcGetTickListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcGetTickListRsp tick.\n                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @instance\n                 */\n                RpcGetTickListRsp.prototype.tick = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcGetTickListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp instance\n                 */\n                RpcGetTickListRsp.create = function create(properties) {\n                    return new RpcGetTickListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp} message RpcGetTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.tick != null && message.tick.length)\n                        for (var i = 0; i < message.tick.length; ++i)\n                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcGetTickListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp} message RpcGetTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcGetTickListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcGetTickListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTickListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.tick && message.tick.length))\n                                message.tick = [];\n                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcGetTickListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcGetTickListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcGetTickListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcGetTickListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        if (!Array.isArray(message.tick))\n                            return \"tick: array expected\";\n                        for (var i = 0; i < message.tick.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);\n                            if (error)\n                                return \"tick.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcGetTickListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp\n                 */\n                RpcGetTickListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTickListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcGetTickListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTickListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.tick) {\n                        if (!Array.isArray(object.tick))\n                            throw TypeError(\".xyz.redtorch.pb.RpcGetTickListRsp.tick: array expected\");\n                        message.tick = [];\n                        for (var i = 0; i < object.tick.length; ++i) {\n                            if (typeof object.tick[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcGetTickListRsp.tick: object expected\");\n                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcGetTickListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcGetTickListRsp} message RpcGetTickListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcGetTickListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tick = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.tick && message.tick.length) {\n                        object.tick = [];\n                        for (var j = 0; j < message.tick.length; ++j)\n                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcGetTickListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcGetTickListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcGetTickListRsp;\n            })();\n\n            pb.RpcQueryDBBarListReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBBarListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryDBBarListReq commonReq\n                 * @property {number|Long|null} [startTimestamp] RpcQueryDBBarListReq startTimestamp\n                 * @property {number|Long|null} [endTimestamp] RpcQueryDBBarListReq endTimestamp\n                 * @property {string|null} [uniformSymbol] RpcQueryDBBarListReq uniformSymbol\n                 * @property {xyz.redtorch.pb.BarPeriodEnum|null} [barPeriod] RpcQueryDBBarListReq barPeriod\n                 * @property {xyz.redtorch.pb.MarketDataDBTypeEnum|null} [marketDataDBType] RpcQueryDBBarListReq marketDataDBType\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBBarListReq.\n                 * @implements IRpcQueryDBBarListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq=} [properties] Properties to set\n                 */\n                function RpcQueryDBBarListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBBarListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryDBBarListReq startTimestamp.\n                 * @member {number|Long} startTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.startTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBBarListReq endTimestamp.\n                 * @member {number|Long} endTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.endTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBBarListReq uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.uniformSymbol = \"\";\n\n                /**\n                 * RpcQueryDBBarListReq barPeriod.\n                 * @member {xyz.redtorch.pb.BarPeriodEnum} barPeriod\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.barPeriod = 0;\n\n                /**\n                 * RpcQueryDBBarListReq marketDataDBType.\n                 * @member {xyz.redtorch.pb.MarketDataDBTypeEnum} marketDataDBType\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 */\n                RpcQueryDBBarListReq.prototype.marketDataDBType = 0;\n\n                /**\n                 * Creates a new RpcQueryDBBarListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq instance\n                 */\n                RpcQueryDBBarListReq.create = function create(properties) {\n                    return new RpcQueryDBBarListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq} message RpcQueryDBBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimestamp);\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.endTimestamp);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.uniformSymbol);\n                    if (message.barPeriod != null && message.hasOwnProperty(\"barPeriod\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.barPeriod);\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.marketDataDBType);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListReq} message RpcQueryDBBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBBarListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.startTimestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.endTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        case 5:\n                            message.barPeriod = reader.int32();\n                            break;\n                        case 6:\n                            message.marketDataDBType = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBBarListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBBarListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (!$util.isInteger(message.startTimestamp) && !(message.startTimestamp && $util.isInteger(message.startTimestamp.low) && $util.isInteger(message.startTimestamp.high)))\n                            return \"startTimestamp: integer|Long expected\";\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (!$util.isInteger(message.endTimestamp) && !(message.endTimestamp && $util.isInteger(message.endTimestamp.low) && $util.isInteger(message.endTimestamp.high)))\n                            return \"endTimestamp: integer|Long expected\";\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    if (message.barPeriod != null && message.hasOwnProperty(\"barPeriod\"))\n                        switch (message.barPeriod) {\n                        default:\n                            return \"barPeriod: enum value expected\";\n                        case 0:\n                        case 5:\n                        case 60:\n                        case 180:\n                        case 300:\n                        case 900:\n                        case 86400:\n                            break;\n                        }\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        switch (message.marketDataDBType) {\n                        default:\n                            return \"marketDataDBType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBBarListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListReq} RpcQueryDBBarListReq\n                 */\n                RpcQueryDBBarListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBBarListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBBarListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.startTimestamp != null)\n                        if ($util.Long)\n                            (message.startTimestamp = $util.Long.fromValue(object.startTimestamp)).unsigned = false;\n                        else if (typeof object.startTimestamp === \"string\")\n                            message.startTimestamp = parseInt(object.startTimestamp, 10);\n                        else if (typeof object.startTimestamp === \"number\")\n                            message.startTimestamp = object.startTimestamp;\n                        else if (typeof object.startTimestamp === \"object\")\n                            message.startTimestamp = new $util.LongBits(object.startTimestamp.low >>> 0, object.startTimestamp.high >>> 0).toNumber();\n                    if (object.endTimestamp != null)\n                        if ($util.Long)\n                            (message.endTimestamp = $util.Long.fromValue(object.endTimestamp)).unsigned = false;\n                        else if (typeof object.endTimestamp === \"string\")\n                            message.endTimestamp = parseInt(object.endTimestamp, 10);\n                        else if (typeof object.endTimestamp === \"number\")\n                            message.endTimestamp = object.endTimestamp;\n                        else if (typeof object.endTimestamp === \"object\")\n                            message.endTimestamp = new $util.LongBits(object.endTimestamp.low >>> 0, object.endTimestamp.high >>> 0).toNumber();\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    switch (object.barPeriod) {\n                    case \"B_UNKNOWN\":\n                    case 0:\n                        message.barPeriod = 0;\n                        break;\n                    case \"B_5Sec\":\n                    case 5:\n                        message.barPeriod = 5;\n                        break;\n                    case \"B_1Min\":\n                    case 60:\n                        message.barPeriod = 60;\n                        break;\n                    case \"B_3Min\":\n                    case 180:\n                        message.barPeriod = 180;\n                        break;\n                    case \"B_5Min\":\n                    case 300:\n                        message.barPeriod = 300;\n                        break;\n                    case \"B_15Min\":\n                    case 900:\n                        message.barPeriod = 900;\n                        break;\n                    case \"B_1Day\":\n                    case 86400:\n                        message.barPeriod = 86400;\n                        break;\n                    }\n                    switch (object.marketDataDBType) {\n                    case \"MDDT_MIX\":\n                    case 0:\n                        message.marketDataDBType = 0;\n                        break;\n                    case \"MDDT_TD\":\n                    case 1:\n                        message.marketDataDBType = 1;\n                        break;\n                    case \"MDDT_HIST\":\n                    case 2:\n                        message.marketDataDBType = 2;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBBarListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBBarListReq} message RpcQueryDBBarListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBBarListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.startTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.startTimestamp = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.endTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.endTimestamp = options.longs === String ? \"0\" : 0;\n                        object.uniformSymbol = \"\";\n                        object.barPeriod = options.enums === String ? \"B_UNKNOWN\" : 0;\n                        object.marketDataDBType = options.enums === String ? \"MDDT_MIX\" : 0;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (typeof message.startTimestamp === \"number\")\n                            object.startTimestamp = options.longs === String ? String(message.startTimestamp) : message.startTimestamp;\n                        else\n                            object.startTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.startTimestamp) : options.longs === Number ? new $util.LongBits(message.startTimestamp.low >>> 0, message.startTimestamp.high >>> 0).toNumber() : message.startTimestamp;\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (typeof message.endTimestamp === \"number\")\n                            object.endTimestamp = options.longs === String ? String(message.endTimestamp) : message.endTimestamp;\n                        else\n                            object.endTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.endTimestamp) : options.longs === Number ? new $util.LongBits(message.endTimestamp.low >>> 0, message.endTimestamp.high >>> 0).toNumber() : message.endTimestamp;\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    if (message.barPeriod != null && message.hasOwnProperty(\"barPeriod\"))\n                        object.barPeriod = options.enums === String ? $root.xyz.redtorch.pb.BarPeriodEnum[message.barPeriod] : message.barPeriod;\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        object.marketDataDBType = options.enums === String ? $root.xyz.redtorch.pb.MarketDataDBTypeEnum[message.marketDataDBType] : message.marketDataDBType;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBBarListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBBarListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBBarListReq;\n            })();\n\n            pb.RpcQueryDBBarListRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBBarListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryDBBarListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IBarField>|null} [bar] RpcQueryDBBarListRsp bar\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBBarListRsp.\n                 * @implements IRpcQueryDBBarListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp=} [properties] Properties to set\n                 */\n                function RpcQueryDBBarListRsp(properties) {\n                    this.bar = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBBarListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @instance\n                 */\n                RpcQueryDBBarListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryDBBarListRsp bar.\n                 * @member {Array.<xyz.redtorch.pb.IBarField>} bar\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @instance\n                 */\n                RpcQueryDBBarListRsp.prototype.bar = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryDBBarListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp instance\n                 */\n                RpcQueryDBBarListRsp.create = function create(properties) {\n                    return new RpcQueryDBBarListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp} message RpcQueryDBBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.bar != null && message.bar.length)\n                        for (var i = 0; i < message.bar.length; ++i)\n                            $root.xyz.redtorch.pb.BarField.encode(message.bar[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBBarListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBBarListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBBarListRsp} message RpcQueryDBBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBBarListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBBarListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.bar && message.bar.length))\n                                message.bar = [];\n                            message.bar.push($root.xyz.redtorch.pb.BarField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBBarListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBBarListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBBarListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBBarListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.bar != null && message.hasOwnProperty(\"bar\")) {\n                        if (!Array.isArray(message.bar))\n                            return \"bar: array expected\";\n                        for (var i = 0; i < message.bar.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.BarField.verify(message.bar[i]);\n                            if (error)\n                                return \"bar.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBBarListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBBarListRsp} RpcQueryDBBarListRsp\n                 */\n                RpcQueryDBBarListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBBarListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBBarListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.bar) {\n                        if (!Array.isArray(object.bar))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListRsp.bar: array expected\");\n                        message.bar = [];\n                        for (var i = 0; i < object.bar.length; ++i) {\n                            if (typeof object.bar[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryDBBarListRsp.bar: object expected\");\n                            message.bar[i] = $root.xyz.redtorch.pb.BarField.fromObject(object.bar[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBBarListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBBarListRsp} message RpcQueryDBBarListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBBarListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.bar = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.bar && message.bar.length) {\n                        object.bar = [];\n                        for (var j = 0; j < message.bar.length; ++j)\n                            object.bar[j] = $root.xyz.redtorch.pb.BarField.toObject(message.bar[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBBarListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBBarListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBBarListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBBarListRsp;\n            })();\n\n            pb.RpcQueryDBTickListReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBTickListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryDBTickListReq commonReq\n                 * @property {number|Long|null} [startTimestamp] RpcQueryDBTickListReq startTimestamp\n                 * @property {number|Long|null} [endTimestamp] RpcQueryDBTickListReq endTimestamp\n                 * @property {string|null} [uniformSymbol] RpcQueryDBTickListReq uniformSymbol\n                 * @property {xyz.redtorch.pb.MarketDataDBTypeEnum|null} [marketDataDBType] RpcQueryDBTickListReq marketDataDBType\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBTickListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBTickListReq.\n                 * @implements IRpcQueryDBTickListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq=} [properties] Properties to set\n                 */\n                function RpcQueryDBTickListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBTickListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryDBTickListReq startTimestamp.\n                 * @member {number|Long} startTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.startTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBTickListReq endTimestamp.\n                 * @member {number|Long} endTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.endTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryDBTickListReq uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.uniformSymbol = \"\";\n\n                /**\n                 * RpcQueryDBTickListReq marketDataDBType.\n                 * @member {xyz.redtorch.pb.MarketDataDBTypeEnum} marketDataDBType\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 */\n                RpcQueryDBTickListReq.prototype.marketDataDBType = 0;\n\n                /**\n                 * Creates a new RpcQueryDBTickListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq instance\n                 */\n                RpcQueryDBTickListReq.create = function create(properties) {\n                    return new RpcQueryDBTickListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq} message RpcQueryDBTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimestamp);\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.endTimestamp);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.uniformSymbol);\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.marketDataDBType);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListReq} message RpcQueryDBTickListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBTickListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.startTimestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.endTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        case 5:\n                            message.marketDataDBType = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBTickListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBTickListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (!$util.isInteger(message.startTimestamp) && !(message.startTimestamp && $util.isInteger(message.startTimestamp.low) && $util.isInteger(message.startTimestamp.high)))\n                            return \"startTimestamp: integer|Long expected\";\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (!$util.isInteger(message.endTimestamp) && !(message.endTimestamp && $util.isInteger(message.endTimestamp.low) && $util.isInteger(message.endTimestamp.high)))\n                            return \"endTimestamp: integer|Long expected\";\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        switch (message.marketDataDBType) {\n                        default:\n                            return \"marketDataDBType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBTickListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListReq} RpcQueryDBTickListReq\n                 */\n                RpcQueryDBTickListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBTickListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBTickListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.startTimestamp != null)\n                        if ($util.Long)\n                            (message.startTimestamp = $util.Long.fromValue(object.startTimestamp)).unsigned = false;\n                        else if (typeof object.startTimestamp === \"string\")\n                            message.startTimestamp = parseInt(object.startTimestamp, 10);\n                        else if (typeof object.startTimestamp === \"number\")\n                            message.startTimestamp = object.startTimestamp;\n                        else if (typeof object.startTimestamp === \"object\")\n                            message.startTimestamp = new $util.LongBits(object.startTimestamp.low >>> 0, object.startTimestamp.high >>> 0).toNumber();\n                    if (object.endTimestamp != null)\n                        if ($util.Long)\n                            (message.endTimestamp = $util.Long.fromValue(object.endTimestamp)).unsigned = false;\n                        else if (typeof object.endTimestamp === \"string\")\n                            message.endTimestamp = parseInt(object.endTimestamp, 10);\n                        else if (typeof object.endTimestamp === \"number\")\n                            message.endTimestamp = object.endTimestamp;\n                        else if (typeof object.endTimestamp === \"object\")\n                            message.endTimestamp = new $util.LongBits(object.endTimestamp.low >>> 0, object.endTimestamp.high >>> 0).toNumber();\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    switch (object.marketDataDBType) {\n                    case \"MDDT_MIX\":\n                    case 0:\n                        message.marketDataDBType = 0;\n                        break;\n                    case \"MDDT_TD\":\n                    case 1:\n                        message.marketDataDBType = 1;\n                        break;\n                    case \"MDDT_HIST\":\n                    case 2:\n                        message.marketDataDBType = 2;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBTickListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBTickListReq} message RpcQueryDBTickListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBTickListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.startTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.startTimestamp = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.endTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.endTimestamp = options.longs === String ? \"0\" : 0;\n                        object.uniformSymbol = \"\";\n                        object.marketDataDBType = options.enums === String ? \"MDDT_MIX\" : 0;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (typeof message.startTimestamp === \"number\")\n                            object.startTimestamp = options.longs === String ? String(message.startTimestamp) : message.startTimestamp;\n                        else\n                            object.startTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.startTimestamp) : options.longs === Number ? new $util.LongBits(message.startTimestamp.low >>> 0, message.startTimestamp.high >>> 0).toNumber() : message.startTimestamp;\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (typeof message.endTimestamp === \"number\")\n                            object.endTimestamp = options.longs === String ? String(message.endTimestamp) : message.endTimestamp;\n                        else\n                            object.endTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.endTimestamp) : options.longs === Number ? new $util.LongBits(message.endTimestamp.low >>> 0, message.endTimestamp.high >>> 0).toNumber() : message.endTimestamp;\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    if (message.marketDataDBType != null && message.hasOwnProperty(\"marketDataDBType\"))\n                        object.marketDataDBType = options.enums === String ? $root.xyz.redtorch.pb.MarketDataDBTypeEnum[message.marketDataDBType] : message.marketDataDBType;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBTickListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBTickListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBTickListReq;\n            })();\n\n            pb.RpcQueryDBTickListRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryDBTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryDBTickListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryDBTickListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcQueryDBTickListRsp tick\n                 */\n\n                /**\n                 * Constructs a new RpcQueryDBTickListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryDBTickListRsp.\n                 * @implements IRpcQueryDBTickListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp=} [properties] Properties to set\n                 */\n                function RpcQueryDBTickListRsp(properties) {\n                    this.tick = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryDBTickListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @instance\n                 */\n                RpcQueryDBTickListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryDBTickListRsp tick.\n                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @instance\n                 */\n                RpcQueryDBTickListRsp.prototype.tick = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryDBTickListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp instance\n                 */\n                RpcQueryDBTickListRsp.create = function create(properties) {\n                    return new RpcQueryDBTickListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp} message RpcQueryDBTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.tick != null && message.tick.length)\n                        for (var i = 0; i < message.tick.length; ++i)\n                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryDBTickListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryDBTickListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryDBTickListRsp} message RpcQueryDBTickListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryDBTickListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryDBTickListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.tick && message.tick.length))\n                                message.tick = [];\n                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryDBTickListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryDBTickListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryDBTickListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryDBTickListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        if (!Array.isArray(message.tick))\n                            return \"tick: array expected\";\n                        for (var i = 0; i < message.tick.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);\n                            if (error)\n                                return \"tick.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryDBTickListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryDBTickListRsp} RpcQueryDBTickListRsp\n                 */\n                RpcQueryDBTickListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryDBTickListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryDBTickListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.tick) {\n                        if (!Array.isArray(object.tick))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListRsp.tick: array expected\");\n                        message.tick = [];\n                        for (var i = 0; i < object.tick.length; ++i) {\n                            if (typeof object.tick[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryDBTickListRsp.tick: object expected\");\n                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryDBTickListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryDBTickListRsp} message RpcQueryDBTickListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryDBTickListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tick = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.tick && message.tick.length) {\n                        object.tick = [];\n                        for (var j = 0; j < message.tick.length; ++j)\n                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryDBTickListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryDBTickListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryDBTickListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryDBTickListRsp;\n            })();\n\n            pb.RpcQueryVolumeBarListReq = (function() {\n\n                /**\n                 * Properties of a RpcQueryVolumeBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryVolumeBarListReq\n                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryVolumeBarListReq commonReq\n                 * @property {number|Long|null} [startTimestamp] RpcQueryVolumeBarListReq startTimestamp\n                 * @property {number|Long|null} [endTimestamp] RpcQueryVolumeBarListReq endTimestamp\n                 * @property {string|null} [uniformSymbol] RpcQueryVolumeBarListReq uniformSymbol\n                 * @property {number|null} [volume] RpcQueryVolumeBarListReq volume\n                 */\n\n                /**\n                 * Constructs a new RpcQueryVolumeBarListReq.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryVolumeBarListReq.\n                 * @implements IRpcQueryVolumeBarListReq\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq=} [properties] Properties to set\n                 */\n                function RpcQueryVolumeBarListReq(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryVolumeBarListReq commonReq.\n                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.commonReq = null;\n\n                /**\n                 * RpcQueryVolumeBarListReq startTimestamp.\n                 * @member {number|Long} startTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.startTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryVolumeBarListReq endTimestamp.\n                 * @member {number|Long} endTimestamp\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.endTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcQueryVolumeBarListReq uniformSymbol.\n                 * @member {string} uniformSymbol\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.uniformSymbol = \"\";\n\n                /**\n                 * RpcQueryVolumeBarListReq volume.\n                 * @member {number} volume\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 */\n                RpcQueryVolumeBarListReq.prototype.volume = 0;\n\n                /**\n                 * Creates a new RpcQueryVolumeBarListReq instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq instance\n                 */\n                RpcQueryVolumeBarListReq.create = function create(properties) {\n                    return new RpcQueryVolumeBarListReq(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListReq.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq} message RpcQueryVolumeBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListReq.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimestamp);\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.endTimestamp);\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.uniformSymbol);\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.volume);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListReq.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListReq} message RpcQueryVolumeBarListReq message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListReq.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListReq message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListReq.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListReq();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.startTimestamp = reader.fixed64();\n                            break;\n                        case 3:\n                            message.endTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.uniformSymbol = reader.string();\n                            break;\n                        case 5:\n                            message.volume = reader.fixed32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListReq message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListReq.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryVolumeBarListReq message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryVolumeBarListReq.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\")) {\n                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);\n                        if (error)\n                            return \"commonReq.\" + error;\n                    }\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (!$util.isInteger(message.startTimestamp) && !(message.startTimestamp && $util.isInteger(message.startTimestamp.low) && $util.isInteger(message.startTimestamp.high)))\n                            return \"startTimestamp: integer|Long expected\";\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (!$util.isInteger(message.endTimestamp) && !(message.endTimestamp && $util.isInteger(message.endTimestamp.low) && $util.isInteger(message.endTimestamp.high)))\n                            return \"endTimestamp: integer|Long expected\";\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        if (!$util.isString(message.uniformSymbol))\n                            return \"uniformSymbol: string expected\";\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        if (!$util.isInteger(message.volume))\n                            return \"volume: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryVolumeBarListReq message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListReq} RpcQueryVolumeBarListReq\n                 */\n                RpcQueryVolumeBarListReq.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryVolumeBarListReq)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListReq();\n                    if (object.commonReq != null) {\n                        if (typeof object.commonReq !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListReq.commonReq: object expected\");\n                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);\n                    }\n                    if (object.startTimestamp != null)\n                        if ($util.Long)\n                            (message.startTimestamp = $util.Long.fromValue(object.startTimestamp)).unsigned = false;\n                        else if (typeof object.startTimestamp === \"string\")\n                            message.startTimestamp = parseInt(object.startTimestamp, 10);\n                        else if (typeof object.startTimestamp === \"number\")\n                            message.startTimestamp = object.startTimestamp;\n                        else if (typeof object.startTimestamp === \"object\")\n                            message.startTimestamp = new $util.LongBits(object.startTimestamp.low >>> 0, object.startTimestamp.high >>> 0).toNumber();\n                    if (object.endTimestamp != null)\n                        if ($util.Long)\n                            (message.endTimestamp = $util.Long.fromValue(object.endTimestamp)).unsigned = false;\n                        else if (typeof object.endTimestamp === \"string\")\n                            message.endTimestamp = parseInt(object.endTimestamp, 10);\n                        else if (typeof object.endTimestamp === \"number\")\n                            message.endTimestamp = object.endTimestamp;\n                        else if (typeof object.endTimestamp === \"object\")\n                            message.endTimestamp = new $util.LongBits(object.endTimestamp.low >>> 0, object.endTimestamp.high >>> 0).toNumber();\n                    if (object.uniformSymbol != null)\n                        message.uniformSymbol = String(object.uniformSymbol);\n                    if (object.volume != null)\n                        message.volume = object.volume >>> 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryVolumeBarListReq message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryVolumeBarListReq} message RpcQueryVolumeBarListReq\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryVolumeBarListReq.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.commonReq = null;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.startTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.startTimestamp = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.endTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.endTimestamp = options.longs === String ? \"0\" : 0;\n                        object.uniformSymbol = \"\";\n                        object.volume = 0;\n                    }\n                    if (message.commonReq != null && message.hasOwnProperty(\"commonReq\"))\n                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);\n                    if (message.startTimestamp != null && message.hasOwnProperty(\"startTimestamp\"))\n                        if (typeof message.startTimestamp === \"number\")\n                            object.startTimestamp = options.longs === String ? String(message.startTimestamp) : message.startTimestamp;\n                        else\n                            object.startTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.startTimestamp) : options.longs === Number ? new $util.LongBits(message.startTimestamp.low >>> 0, message.startTimestamp.high >>> 0).toNumber() : message.startTimestamp;\n                    if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n                        if (typeof message.endTimestamp === \"number\")\n                            object.endTimestamp = options.longs === String ? String(message.endTimestamp) : message.endTimestamp;\n                        else\n                            object.endTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.endTimestamp) : options.longs === Number ? new $util.LongBits(message.endTimestamp.low >>> 0, message.endTimestamp.high >>> 0).toNumber() : message.endTimestamp;\n                    if (message.uniformSymbol != null && message.hasOwnProperty(\"uniformSymbol\"))\n                        object.uniformSymbol = message.uniformSymbol;\n                    if (message.volume != null && message.hasOwnProperty(\"volume\"))\n                        object.volume = message.volume;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryVolumeBarListReq to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListReq\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryVolumeBarListReq.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryVolumeBarListReq;\n            })();\n\n            pb.RpcQueryVolumeBarListRsp = (function() {\n\n                /**\n                 * Properties of a RpcQueryVolumeBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcQueryVolumeBarListRsp\n                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryVolumeBarListRsp commonRsp\n                 * @property {Array.<xyz.redtorch.pb.IBarField>|null} [bar] RpcQueryVolumeBarListRsp bar\n                 */\n\n                /**\n                 * Constructs a new RpcQueryVolumeBarListRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcQueryVolumeBarListRsp.\n                 * @implements IRpcQueryVolumeBarListRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp=} [properties] Properties to set\n                 */\n                function RpcQueryVolumeBarListRsp(properties) {\n                    this.bar = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcQueryVolumeBarListRsp commonRsp.\n                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @instance\n                 */\n                RpcQueryVolumeBarListRsp.prototype.commonRsp = null;\n\n                /**\n                 * RpcQueryVolumeBarListRsp bar.\n                 * @member {Array.<xyz.redtorch.pb.IBarField>} bar\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @instance\n                 */\n                RpcQueryVolumeBarListRsp.prototype.bar = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcQueryVolumeBarListRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp instance\n                 */\n                RpcQueryVolumeBarListRsp.create = function create(properties) {\n                    return new RpcQueryVolumeBarListRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp} message RpcQueryVolumeBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.bar != null && message.bar.length)\n                        for (var i = 0; i < message.bar.length; ++i)\n                            $root.xyz.redtorch.pb.BarField.encode(message.bar[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcQueryVolumeBarListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryVolumeBarListRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcQueryVolumeBarListRsp} message RpcQueryVolumeBarListRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcQueryVolumeBarListRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.bar && message.bar.length))\n                                message.bar = [];\n                            message.bar.push($root.xyz.redtorch.pb.BarField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcQueryVolumeBarListRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcQueryVolumeBarListRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcQueryVolumeBarListRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcQueryVolumeBarListRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\")) {\n                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);\n                        if (error)\n                            return \"commonRsp.\" + error;\n                    }\n                    if (message.bar != null && message.hasOwnProperty(\"bar\")) {\n                        if (!Array.isArray(message.bar))\n                            return \"bar: array expected\";\n                        for (var i = 0; i < message.bar.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.BarField.verify(message.bar[i]);\n                            if (error)\n                                return \"bar.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcQueryVolumeBarListRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} RpcQueryVolumeBarListRsp\n                 */\n                RpcQueryVolumeBarListRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryVolumeBarListRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcQueryVolumeBarListRsp();\n                    if (object.commonRsp != null) {\n                        if (typeof object.commonRsp !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListRsp.commonRsp: object expected\");\n                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);\n                    }\n                    if (object.bar) {\n                        if (!Array.isArray(object.bar))\n                            throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListRsp.bar: array expected\");\n                        message.bar = [];\n                        for (var i = 0; i < object.bar.length; ++i) {\n                            if (typeof object.bar[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcQueryVolumeBarListRsp.bar: object expected\");\n                            message.bar[i] = $root.xyz.redtorch.pb.BarField.fromObject(object.bar[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcQueryVolumeBarListRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcQueryVolumeBarListRsp} message RpcQueryVolumeBarListRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcQueryVolumeBarListRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.bar = [];\n                    if (options.defaults)\n                        object.commonRsp = null;\n                    if (message.commonRsp != null && message.hasOwnProperty(\"commonRsp\"))\n                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);\n                    if (message.bar && message.bar.length) {\n                        object.bar = [];\n                        for (var j = 0; j < message.bar.length; ++j)\n                            object.bar[j] = $root.xyz.redtorch.pb.BarField.toObject(message.bar[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcQueryVolumeBarListRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcQueryVolumeBarListRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcQueryVolumeBarListRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcQueryVolumeBarListRsp;\n            })();\n\n            pb.RpcExceptionRsp = (function() {\n\n                /**\n                 * Properties of a RpcExceptionRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcExceptionRsp\n                 * @property {number|null} [originalRpcId] RpcExceptionRsp originalRpcId\n                 * @property {string|null} [originalTransactionId] RpcExceptionRsp originalTransactionId\n                 * @property {number|Long|null} [originalTimestamp] RpcExceptionRsp originalTimestamp\n                 * @property {string|null} [info] RpcExceptionRsp info\n                 */\n\n                /**\n                 * Constructs a new RpcExceptionRsp.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcExceptionRsp.\n                 * @implements IRpcExceptionRsp\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp=} [properties] Properties to set\n                 */\n                function RpcExceptionRsp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcExceptionRsp originalRpcId.\n                 * @member {number} originalRpcId\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.originalRpcId = 0;\n\n                /**\n                 * RpcExceptionRsp originalTransactionId.\n                 * @member {string} originalTransactionId\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.originalTransactionId = \"\";\n\n                /**\n                 * RpcExceptionRsp originalTimestamp.\n                 * @member {number|Long} originalTimestamp\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.originalTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * RpcExceptionRsp info.\n                 * @member {string} info\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 */\n                RpcExceptionRsp.prototype.info = \"\";\n\n                /**\n                 * Creates a new RpcExceptionRsp instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp instance\n                 */\n                RpcExceptionRsp.create = function create(properties) {\n                    return new RpcExceptionRsp(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcExceptionRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcExceptionRsp.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp} message RpcExceptionRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcExceptionRsp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.originalRpcId != null && message.hasOwnProperty(\"originalRpcId\"))\n                        writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.originalRpcId);\n                    if (message.originalTransactionId != null && message.hasOwnProperty(\"originalTransactionId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originalTransactionId);\n                    if (message.originalTimestamp != null && message.hasOwnProperty(\"originalTimestamp\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.originalTimestamp);\n                    if (message.info != null && message.hasOwnProperty(\"info\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcExceptionRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcExceptionRsp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcExceptionRsp} message RpcExceptionRsp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcExceptionRsp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcExceptionRsp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcExceptionRsp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcExceptionRsp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.originalRpcId = reader.fixed32();\n                            break;\n                        case 2:\n                            message.originalTransactionId = reader.string();\n                            break;\n                        case 3:\n                            message.originalTimestamp = reader.fixed64();\n                            break;\n                        case 4:\n                            message.info = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcExceptionRsp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcExceptionRsp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcExceptionRsp message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcExceptionRsp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.originalRpcId != null && message.hasOwnProperty(\"originalRpcId\"))\n                        if (!$util.isInteger(message.originalRpcId))\n                            return \"originalRpcId: integer expected\";\n                    if (message.originalTransactionId != null && message.hasOwnProperty(\"originalTransactionId\"))\n                        if (!$util.isString(message.originalTransactionId))\n                            return \"originalTransactionId: string expected\";\n                    if (message.originalTimestamp != null && message.hasOwnProperty(\"originalTimestamp\"))\n                        if (!$util.isInteger(message.originalTimestamp) && !(message.originalTimestamp && $util.isInteger(message.originalTimestamp.low) && $util.isInteger(message.originalTimestamp.high)))\n                            return \"originalTimestamp: integer|Long expected\";\n                    if (message.info != null && message.hasOwnProperty(\"info\"))\n                        if (!$util.isString(message.info))\n                            return \"info: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcExceptionRsp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp\n                 */\n                RpcExceptionRsp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcExceptionRsp)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcExceptionRsp();\n                    if (object.originalRpcId != null)\n                        message.originalRpcId = object.originalRpcId >>> 0;\n                    if (object.originalTransactionId != null)\n                        message.originalTransactionId = String(object.originalTransactionId);\n                    if (object.originalTimestamp != null)\n                        if ($util.Long)\n                            (message.originalTimestamp = $util.Long.fromValue(object.originalTimestamp)).unsigned = false;\n                        else if (typeof object.originalTimestamp === \"string\")\n                            message.originalTimestamp = parseInt(object.originalTimestamp, 10);\n                        else if (typeof object.originalTimestamp === \"number\")\n                            message.originalTimestamp = object.originalTimestamp;\n                        else if (typeof object.originalTimestamp === \"object\")\n                            message.originalTimestamp = new $util.LongBits(object.originalTimestamp.low >>> 0, object.originalTimestamp.high >>> 0).toNumber();\n                    if (object.info != null)\n                        message.info = String(object.info);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcExceptionRsp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcExceptionRsp} message RpcExceptionRsp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcExceptionRsp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.originalRpcId = 0;\n                        object.originalTransactionId = \"\";\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.originalTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.originalTimestamp = options.longs === String ? \"0\" : 0;\n                        object.info = \"\";\n                    }\n                    if (message.originalRpcId != null && message.hasOwnProperty(\"originalRpcId\"))\n                        object.originalRpcId = message.originalRpcId;\n                    if (message.originalTransactionId != null && message.hasOwnProperty(\"originalTransactionId\"))\n                        object.originalTransactionId = message.originalTransactionId;\n                    if (message.originalTimestamp != null && message.hasOwnProperty(\"originalTimestamp\"))\n                        if (typeof message.originalTimestamp === \"number\")\n                            object.originalTimestamp = options.longs === String ? String(message.originalTimestamp) : message.originalTimestamp;\n                        else\n                            object.originalTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.originalTimestamp) : options.longs === Number ? new $util.LongBits(message.originalTimestamp.low >>> 0, message.originalTimestamp.high >>> 0).toNumber() : message.originalTimestamp;\n                    if (message.info != null && message.hasOwnProperty(\"info\"))\n                        object.info = message.info;\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcExceptionRsp to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcExceptionRsp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcExceptionRsp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcExceptionRsp;\n            })();\n\n            pb.RpcOrderRtn = (function() {\n\n                /**\n                 * Properties of a RpcOrderRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcOrderRtn\n                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcOrderRtn order\n                 */\n\n                /**\n                 * Constructs a new RpcOrderRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcOrderRtn.\n                 * @implements IRpcOrderRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn=} [properties] Properties to set\n                 */\n                function RpcOrderRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcOrderRtn order.\n                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @instance\n                 */\n                RpcOrderRtn.prototype.order = null;\n\n                /**\n                 * Creates a new RpcOrderRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn instance\n                 */\n                RpcOrderRtn.create = function create(properties) {\n                    return new RpcOrderRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcOrderRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcOrderRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn} message RpcOrderRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcOrderRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcOrderRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderRtn} message RpcOrderRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcOrderRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcOrderRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcOrderRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcOrderRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcOrderRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);\n                        if (error)\n                            return \"order.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcOrderRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn\n                 */\n                RpcOrderRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcOrderRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcOrderRtn();\n                    if (object.order != null) {\n                        if (typeof object.order !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcOrderRtn.order: object expected\");\n                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcOrderRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcOrderRtn} message RpcOrderRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcOrderRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.order = null;\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcOrderRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcOrderRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcOrderRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcOrderRtn;\n            })();\n\n            pb.RpcTradeRtn = (function() {\n\n                /**\n                 * Properties of a RpcTradeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTradeRtn\n                 * @property {xyz.redtorch.pb.ITradeField|null} [trade] RpcTradeRtn trade\n                 */\n\n                /**\n                 * Constructs a new RpcTradeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTradeRtn.\n                 * @implements IRpcTradeRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn=} [properties] Properties to set\n                 */\n                function RpcTradeRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTradeRtn trade.\n                 * @member {xyz.redtorch.pb.ITradeField|null|undefined} trade\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @instance\n                 */\n                RpcTradeRtn.prototype.trade = null;\n\n                /**\n                 * Creates a new RpcTradeRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn instance\n                 */\n                RpcTradeRtn.create = function create(properties) {\n                    return new RpcTradeRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTradeRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTradeRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn} message RpcTradeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        $root.xyz.redtorch.pb.TradeField.encode(message.trade, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTradeRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTradeRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeRtn} message RpcTradeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTradeRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTradeRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.trade = $root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTradeRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTradeRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTradeRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade);\n                        if (error)\n                            return \"trade.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTradeRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn\n                 */\n                RpcTradeRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTradeRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTradeRtn();\n                    if (object.trade != null) {\n                        if (typeof object.trade !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcTradeRtn.trade: object expected\");\n                        message.trade = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTradeRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTradeRtn} message RpcTradeRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTradeRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.trade = null;\n                    if (message.trade != null && message.hasOwnProperty(\"trade\"))\n                        object.trade = $root.xyz.redtorch.pb.TradeField.toObject(message.trade, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTradeRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTradeRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTradeRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTradeRtn;\n            })();\n\n            pb.RpcContractRtn = (function() {\n\n                /**\n                 * Properties of a RpcContractRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcContractRtn\n                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcContractRtn contract\n                 */\n\n                /**\n                 * Constructs a new RpcContractRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcContractRtn.\n                 * @implements IRpcContractRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcContractRtn=} [properties] Properties to set\n                 */\n                function RpcContractRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcContractRtn contract.\n                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @instance\n                 */\n                RpcContractRtn.prototype.contract = null;\n\n                /**\n                 * Creates a new RpcContractRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn instance\n                 */\n                RpcContractRtn.create = function create(properties) {\n                    return new RpcContractRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcContractRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcContractRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractRtn} message RpcContractRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcContractRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcContractRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractRtn} message RpcContractRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcContractRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcContractRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcContractRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcContractRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcContractRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);\n                        if (error)\n                            return \"contract.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcContractRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn\n                 */\n                RpcContractRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcContractRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcContractRtn();\n                    if (object.contract != null) {\n                        if (typeof object.contract !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcContractRtn.contract: object expected\");\n                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcContractRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcContractRtn} message RpcContractRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcContractRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.contract = null;\n                    if (message.contract != null && message.hasOwnProperty(\"contract\"))\n                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcContractRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcContractRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcContractRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcContractRtn;\n            })();\n\n            pb.RpcPositionRtn = (function() {\n\n                /**\n                 * Properties of a RpcPositionRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcPositionRtn\n                 * @property {xyz.redtorch.pb.IPositionField|null} [position] RpcPositionRtn position\n                 */\n\n                /**\n                 * Constructs a new RpcPositionRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcPositionRtn.\n                 * @implements IRpcPositionRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn=} [properties] Properties to set\n                 */\n                function RpcPositionRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcPositionRtn position.\n                 * @member {xyz.redtorch.pb.IPositionField|null|undefined} position\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @instance\n                 */\n                RpcPositionRtn.prototype.position = null;\n\n                /**\n                 * Creates a new RpcPositionRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn instance\n                 */\n                RpcPositionRtn.create = function create(properties) {\n                    return new RpcPositionRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcPositionRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcPositionRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn} message RpcPositionRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        $root.xyz.redtorch.pb.PositionField.encode(message.position, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcPositionRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcPositionRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionRtn} message RpcPositionRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcPositionRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcPositionRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.position = $root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcPositionRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcPositionRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcPositionRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        var error = $root.xyz.redtorch.pb.PositionField.verify(message.position);\n                        if (error)\n                            return \"position.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcPositionRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn\n                 */\n                RpcPositionRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcPositionRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcPositionRtn();\n                    if (object.position != null) {\n                        if (typeof object.position !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcPositionRtn.position: object expected\");\n                        message.position = $root.xyz.redtorch.pb.PositionField.fromObject(object.position);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcPositionRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcPositionRtn} message RpcPositionRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcPositionRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.position = null;\n                    if (message.position != null && message.hasOwnProperty(\"position\"))\n                        object.position = $root.xyz.redtorch.pb.PositionField.toObject(message.position, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcPositionRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcPositionRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcPositionRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcPositionRtn;\n            })();\n\n            pb.RpcAccountRtn = (function() {\n\n                /**\n                 * Properties of a RpcAccountRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcAccountRtn\n                 * @property {xyz.redtorch.pb.IAccountField|null} [account] RpcAccountRtn account\n                 */\n\n                /**\n                 * Constructs a new RpcAccountRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcAccountRtn.\n                 * @implements IRpcAccountRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn=} [properties] Properties to set\n                 */\n                function RpcAccountRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcAccountRtn account.\n                 * @member {xyz.redtorch.pb.IAccountField|null|undefined} account\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @instance\n                 */\n                RpcAccountRtn.prototype.account = null;\n\n                /**\n                 * Creates a new RpcAccountRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn instance\n                 */\n                RpcAccountRtn.create = function create(properties) {\n                    return new RpcAccountRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcAccountRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcAccountRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn} message RpcAccountRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        $root.xyz.redtorch.pb.AccountField.encode(message.account, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcAccountRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcAccountRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountRtn} message RpcAccountRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcAccountRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcAccountRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.account = $root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcAccountRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcAccountRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcAccountRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        var error = $root.xyz.redtorch.pb.AccountField.verify(message.account);\n                        if (error)\n                            return \"account.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcAccountRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn\n                 */\n                RpcAccountRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcAccountRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcAccountRtn();\n                    if (object.account != null) {\n                        if (typeof object.account !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcAccountRtn.account: object expected\");\n                        message.account = $root.xyz.redtorch.pb.AccountField.fromObject(object.account);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcAccountRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcAccountRtn} message RpcAccountRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcAccountRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.account = null;\n                    if (message.account != null && message.hasOwnProperty(\"account\"))\n                        object.account = $root.xyz.redtorch.pb.AccountField.toObject(message.account, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcAccountRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcAccountRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcAccountRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcAccountRtn;\n            })();\n\n            pb.RpcTickRtn = (function() {\n\n                /**\n                 * Properties of a RpcTickRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTickRtn\n                 * @property {xyz.redtorch.pb.ITickField|null} [tick] RpcTickRtn tick\n                 */\n\n                /**\n                 * Constructs a new RpcTickRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTickRtn.\n                 * @implements IRpcTickRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTickRtn=} [properties] Properties to set\n                 */\n                function RpcTickRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTickRtn tick.\n                 * @member {xyz.redtorch.pb.ITickField|null|undefined} tick\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @instance\n                 */\n                RpcTickRtn.prototype.tick = null;\n\n                /**\n                 * Creates a new RpcTickRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn instance\n                 */\n                RpcTickRtn.create = function create(properties) {\n                    return new RpcTickRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTickRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTickRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickRtn} message RpcTickRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tick != null && message.hasOwnProperty(\"tick\"))\n                        $root.xyz.redtorch.pb.TickField.encode(message.tick, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTickRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTickRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickRtn} message RpcTickRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTickRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTickRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.tick = $root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTickRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTickRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTickRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        var error = $root.xyz.redtorch.pb.TickField.verify(message.tick);\n                        if (error)\n                            return \"tick.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTickRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn\n                 */\n                RpcTickRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTickRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTickRtn();\n                    if (object.tick != null) {\n                        if (typeof object.tick !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcTickRtn.tick: object expected\");\n                        message.tick = $root.xyz.redtorch.pb.TickField.fromObject(object.tick);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTickRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTickRtn} message RpcTickRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTickRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.tick = null;\n                    if (message.tick != null && message.hasOwnProperty(\"tick\"))\n                        object.tick = $root.xyz.redtorch.pb.TickField.toObject(message.tick, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTickRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTickRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTickRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTickRtn;\n            })();\n\n            pb.RpcOrderListRtn = (function() {\n\n                /**\n                 * Properties of a RpcOrderListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcOrderListRtn\n                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcOrderListRtn order\n                 */\n\n                /**\n                 * Constructs a new RpcOrderListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcOrderListRtn.\n                 * @implements IRpcOrderListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn=} [properties] Properties to set\n                 */\n                function RpcOrderListRtn(properties) {\n                    this.order = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcOrderListRtn order.\n                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @instance\n                 */\n                RpcOrderListRtn.prototype.order = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcOrderListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn instance\n                 */\n                RpcOrderListRtn.create = function create(properties) {\n                    return new RpcOrderListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcOrderListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcOrderListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn} message RpcOrderListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.order != null && message.order.length)\n                        for (var i = 0; i < message.order.length; ++i)\n                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcOrderListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcOrderListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcOrderListRtn} message RpcOrderListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcOrderListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcOrderListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcOrderListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.order && message.order.length))\n                                message.order = [];\n                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcOrderListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcOrderListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcOrderListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcOrderListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        if (!Array.isArray(message.order))\n                            return \"order: array expected\";\n                        for (var i = 0; i < message.order.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);\n                            if (error)\n                                return \"order.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcOrderListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn\n                 */\n                RpcOrderListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcOrderListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcOrderListRtn();\n                    if (object.order) {\n                        if (!Array.isArray(object.order))\n                            throw TypeError(\".xyz.redtorch.pb.RpcOrderListRtn.order: array expected\");\n                        message.order = [];\n                        for (var i = 0; i < object.order.length; ++i) {\n                            if (typeof object.order[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcOrderListRtn.order: object expected\");\n                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcOrderListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcOrderListRtn} message RpcOrderListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcOrderListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.order = [];\n                    if (message.order && message.order.length) {\n                        object.order = [];\n                        for (var j = 0; j < message.order.length; ++j)\n                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcOrderListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcOrderListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcOrderListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcOrderListRtn;\n            })();\n\n            pb.RpcTradeListRtn = (function() {\n\n                /**\n                 * Properties of a RpcTradeListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTradeListRtn\n                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcTradeListRtn trade\n                 */\n\n                /**\n                 * Constructs a new RpcTradeListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTradeListRtn.\n                 * @implements IRpcTradeListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn=} [properties] Properties to set\n                 */\n                function RpcTradeListRtn(properties) {\n                    this.trade = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTradeListRtn trade.\n                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @instance\n                 */\n                RpcTradeListRtn.prototype.trade = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcTradeListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn instance\n                 */\n                RpcTradeListRtn.create = function create(properties) {\n                    return new RpcTradeListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTradeListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTradeListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn} message RpcTradeListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.trade != null && message.trade.length)\n                        for (var i = 0; i < message.trade.length; ++i)\n                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTradeListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTradeListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTradeListRtn} message RpcTradeListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTradeListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTradeListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTradeListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.trade && message.trade.length))\n                                message.trade = [];\n                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTradeListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTradeListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTradeListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTradeListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.trade != null && message.hasOwnProperty(\"trade\")) {\n                        if (!Array.isArray(message.trade))\n                            return \"trade: array expected\";\n                        for (var i = 0; i < message.trade.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);\n                            if (error)\n                                return \"trade.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTradeListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn\n                 */\n                RpcTradeListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTradeListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTradeListRtn();\n                    if (object.trade) {\n                        if (!Array.isArray(object.trade))\n                            throw TypeError(\".xyz.redtorch.pb.RpcTradeListRtn.trade: array expected\");\n                        message.trade = [];\n                        for (var i = 0; i < object.trade.length; ++i) {\n                            if (typeof object.trade[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcTradeListRtn.trade: object expected\");\n                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTradeListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTradeListRtn} message RpcTradeListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTradeListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.trade = [];\n                    if (message.trade && message.trade.length) {\n                        object.trade = [];\n                        for (var j = 0; j < message.trade.length; ++j)\n                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTradeListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTradeListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTradeListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTradeListRtn;\n            })();\n\n            pb.RpcContractListRtn = (function() {\n\n                /**\n                 * Properties of a RpcContractListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcContractListRtn\n                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcContractListRtn contract\n                 */\n\n                /**\n                 * Constructs a new RpcContractListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcContractListRtn.\n                 * @implements IRpcContractListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn=} [properties] Properties to set\n                 */\n                function RpcContractListRtn(properties) {\n                    this.contract = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcContractListRtn contract.\n                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @instance\n                 */\n                RpcContractListRtn.prototype.contract = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcContractListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn instance\n                 */\n                RpcContractListRtn.create = function create(properties) {\n                    return new RpcContractListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcContractListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcContractListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn} message RpcContractListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contract != null && message.contract.length)\n                        for (var i = 0; i < message.contract.length; ++i)\n                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcContractListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcContractListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcContractListRtn} message RpcContractListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcContractListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcContractListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcContractListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.contract && message.contract.length))\n                                message.contract = [];\n                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcContractListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcContractListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcContractListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcContractListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contract != null && message.hasOwnProperty(\"contract\")) {\n                        if (!Array.isArray(message.contract))\n                            return \"contract: array expected\";\n                        for (var i = 0; i < message.contract.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);\n                            if (error)\n                                return \"contract.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcContractListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn\n                 */\n                RpcContractListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcContractListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcContractListRtn();\n                    if (object.contract) {\n                        if (!Array.isArray(object.contract))\n                            throw TypeError(\".xyz.redtorch.pb.RpcContractListRtn.contract: array expected\");\n                        message.contract = [];\n                        for (var i = 0; i < object.contract.length; ++i) {\n                            if (typeof object.contract[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcContractListRtn.contract: object expected\");\n                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcContractListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcContractListRtn} message RpcContractListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcContractListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.contract = [];\n                    if (message.contract && message.contract.length) {\n                        object.contract = [];\n                        for (var j = 0; j < message.contract.length; ++j)\n                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcContractListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcContractListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcContractListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcContractListRtn;\n            })();\n\n            pb.RpcPositionListRtn = (function() {\n\n                /**\n                 * Properties of a RpcPositionListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcPositionListRtn\n                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcPositionListRtn position\n                 */\n\n                /**\n                 * Constructs a new RpcPositionListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcPositionListRtn.\n                 * @implements IRpcPositionListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn=} [properties] Properties to set\n                 */\n                function RpcPositionListRtn(properties) {\n                    this.position = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcPositionListRtn position.\n                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @instance\n                 */\n                RpcPositionListRtn.prototype.position = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcPositionListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn instance\n                 */\n                RpcPositionListRtn.create = function create(properties) {\n                    return new RpcPositionListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcPositionListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcPositionListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn} message RpcPositionListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.position != null && message.position.length)\n                        for (var i = 0; i < message.position.length; ++i)\n                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcPositionListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcPositionListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcPositionListRtn} message RpcPositionListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcPositionListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcPositionListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcPositionListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.position && message.position.length))\n                                message.position = [];\n                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcPositionListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcPositionListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcPositionListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcPositionListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.position != null && message.hasOwnProperty(\"position\")) {\n                        if (!Array.isArray(message.position))\n                            return \"position: array expected\";\n                        for (var i = 0; i < message.position.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);\n                            if (error)\n                                return \"position.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcPositionListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn\n                 */\n                RpcPositionListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcPositionListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcPositionListRtn();\n                    if (object.position) {\n                        if (!Array.isArray(object.position))\n                            throw TypeError(\".xyz.redtorch.pb.RpcPositionListRtn.position: array expected\");\n                        message.position = [];\n                        for (var i = 0; i < object.position.length; ++i) {\n                            if (typeof object.position[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcPositionListRtn.position: object expected\");\n                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcPositionListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcPositionListRtn} message RpcPositionListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcPositionListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.position = [];\n                    if (message.position && message.position.length) {\n                        object.position = [];\n                        for (var j = 0; j < message.position.length; ++j)\n                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcPositionListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcPositionListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcPositionListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcPositionListRtn;\n            })();\n\n            pb.RpcAccountListRtn = (function() {\n\n                /**\n                 * Properties of a RpcAccountListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcAccountListRtn\n                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcAccountListRtn account\n                 */\n\n                /**\n                 * Constructs a new RpcAccountListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcAccountListRtn.\n                 * @implements IRpcAccountListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn=} [properties] Properties to set\n                 */\n                function RpcAccountListRtn(properties) {\n                    this.account = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcAccountListRtn account.\n                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @instance\n                 */\n                RpcAccountListRtn.prototype.account = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcAccountListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn instance\n                 */\n                RpcAccountListRtn.create = function create(properties) {\n                    return new RpcAccountListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcAccountListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcAccountListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn} message RpcAccountListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.account != null && message.account.length)\n                        for (var i = 0; i < message.account.length; ++i)\n                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcAccountListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcAccountListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcAccountListRtn} message RpcAccountListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcAccountListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcAccountListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcAccountListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.account && message.account.length))\n                                message.account = [];\n                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcAccountListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcAccountListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcAccountListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcAccountListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.account != null && message.hasOwnProperty(\"account\")) {\n                        if (!Array.isArray(message.account))\n                            return \"account: array expected\";\n                        for (var i = 0; i < message.account.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);\n                            if (error)\n                                return \"account.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcAccountListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn\n                 */\n                RpcAccountListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcAccountListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcAccountListRtn();\n                    if (object.account) {\n                        if (!Array.isArray(object.account))\n                            throw TypeError(\".xyz.redtorch.pb.RpcAccountListRtn.account: array expected\");\n                        message.account = [];\n                        for (var i = 0; i < object.account.length; ++i) {\n                            if (typeof object.account[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcAccountListRtn.account: object expected\");\n                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcAccountListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcAccountListRtn} message RpcAccountListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcAccountListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.account = [];\n                    if (message.account && message.account.length) {\n                        object.account = [];\n                        for (var j = 0; j < message.account.length; ++j)\n                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcAccountListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcAccountListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcAccountListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcAccountListRtn;\n            })();\n\n            pb.RpcTickListRtn = (function() {\n\n                /**\n                 * Properties of a RpcTickListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcTickListRtn\n                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcTickListRtn tick\n                 */\n\n                /**\n                 * Constructs a new RpcTickListRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcTickListRtn.\n                 * @implements IRpcTickListRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn=} [properties] Properties to set\n                 */\n                function RpcTickListRtn(properties) {\n                    this.tick = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcTickListRtn tick.\n                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @instance\n                 */\n                RpcTickListRtn.prototype.tick = $util.emptyArray;\n\n                /**\n                 * Creates a new RpcTickListRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn instance\n                 */\n                RpcTickListRtn.create = function create(properties) {\n                    return new RpcTickListRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcTickListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTickListRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn} message RpcTickListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickListRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tick != null && message.tick.length)\n                        for (var i = 0; i < message.tick.length; ++i)\n                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcTickListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTickListRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcTickListRtn} message RpcTickListRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcTickListRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcTickListRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickListRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTickListRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.tick && message.tick.length))\n                                message.tick = [];\n                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcTickListRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcTickListRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcTickListRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcTickListRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tick != null && message.hasOwnProperty(\"tick\")) {\n                        if (!Array.isArray(message.tick))\n                            return \"tick: array expected\";\n                        for (var i = 0; i < message.tick.length; ++i) {\n                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);\n                            if (error)\n                                return \"tick.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcTickListRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn\n                 */\n                RpcTickListRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcTickListRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcTickListRtn();\n                    if (object.tick) {\n                        if (!Array.isArray(object.tick))\n                            throw TypeError(\".xyz.redtorch.pb.RpcTickListRtn.tick: array expected\");\n                        message.tick = [];\n                        for (var i = 0; i < object.tick.length; ++i) {\n                            if (typeof object.tick[i] !== \"object\")\n                                throw TypeError(\".xyz.redtorch.pb.RpcTickListRtn.tick: object expected\");\n                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcTickListRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcTickListRtn} message RpcTickListRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcTickListRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tick = [];\n                    if (message.tick && message.tick.length) {\n                        object.tick = [];\n                        for (var j = 0; j < message.tick.length; ++j)\n                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcTickListRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcTickListRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcTickListRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcTickListRtn;\n            })();\n\n            pb.RpcNoticeRtn = (function() {\n\n                /**\n                 * Properties of a RpcNoticeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IRpcNoticeRtn\n                 * @property {xyz.redtorch.pb.INoticeField|null} [notice] RpcNoticeRtn notice\n                 */\n\n                /**\n                 * Constructs a new RpcNoticeRtn.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a RpcNoticeRtn.\n                 * @implements IRpcNoticeRtn\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn=} [properties] Properties to set\n                 */\n                function RpcNoticeRtn(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RpcNoticeRtn notice.\n                 * @member {xyz.redtorch.pb.INoticeField|null|undefined} notice\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @instance\n                 */\n                RpcNoticeRtn.prototype.notice = null;\n\n                /**\n                 * Creates a new RpcNoticeRtn instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn instance\n                 */\n                RpcNoticeRtn.create = function create(properties) {\n                    return new RpcNoticeRtn(properties);\n                };\n\n                /**\n                 * Encodes the specified RpcNoticeRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcNoticeRtn.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn} message RpcNoticeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcNoticeRtn.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.notice != null && message.hasOwnProperty(\"notice\"))\n                        $root.xyz.redtorch.pb.NoticeField.encode(message.notice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RpcNoticeRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcNoticeRtn.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.IRpcNoticeRtn} message RpcNoticeRtn message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RpcNoticeRtn.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RpcNoticeRtn message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcNoticeRtn.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcNoticeRtn();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.notice = $root.xyz.redtorch.pb.NoticeField.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RpcNoticeRtn message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RpcNoticeRtn.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RpcNoticeRtn message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RpcNoticeRtn.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.notice != null && message.hasOwnProperty(\"notice\")) {\n                        var error = $root.xyz.redtorch.pb.NoticeField.verify(message.notice);\n                        if (error)\n                            return \"notice.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a RpcNoticeRtn message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn\n                 */\n                RpcNoticeRtn.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.RpcNoticeRtn)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.RpcNoticeRtn();\n                    if (object.notice != null) {\n                        if (typeof object.notice !== \"object\")\n                            throw TypeError(\".xyz.redtorch.pb.RpcNoticeRtn.notice: object expected\");\n                        message.notice = $root.xyz.redtorch.pb.NoticeField.fromObject(object.notice);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RpcNoticeRtn message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @static\n                 * @param {xyz.redtorch.pb.RpcNoticeRtn} message RpcNoticeRtn\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RpcNoticeRtn.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.notice = null;\n                    if (message.notice != null && message.hasOwnProperty(\"notice\"))\n                        object.notice = $root.xyz.redtorch.pb.NoticeField.toObject(message.notice, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this RpcNoticeRtn to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.RpcNoticeRtn\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RpcNoticeRtn.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RpcNoticeRtn;\n            })();\n\n            /**\n             * RpcId enum.\n             * @name xyz.redtorch.pb.RpcId\n             * @enum {string}\n             * @property {number} UNKNOWN_RPC_ID=0 UNKNOWN_RPC_ID value\n             * @property {number} SUBSCRIBE_REQ=1 SUBSCRIBE_REQ value\n             * @property {number} SUBSCRIBE_RSP=2 SUBSCRIBE_RSP value\n             * @property {number} UNSUBSCRIBE_REQ=3 UNSUBSCRIBE_REQ value\n             * @property {number} UNSUBSCRIBE_RSP=4 UNSUBSCRIBE_RSP value\n             * @property {number} SUBMIT_ORDER_REQ=5 SUBMIT_ORDER_REQ value\n             * @property {number} SUBMIT_ORDER_RSP=6 SUBMIT_ORDER_RSP value\n             * @property {number} CANCEL_ORDER_REQ=7 CANCEL_ORDER_REQ value\n             * @property {number} CANCEL_ORDER_RSP=8 CANCEL_ORDER_RSP value\n             * @property {number} SEARCH_CONTRACT_REQ=9 SEARCH_CONTRACT_REQ value\n             * @property {number} SEARCH_CONTRACT_RSP=10 SEARCH_CONTRACT_RSP value\n             * @property {number} GET_ORDER_LIST_REQ=11 GET_ORDER_LIST_REQ value\n             * @property {number} GET_ORDER_LIST_RSP=12 GET_ORDER_LIST_RSP value\n             * @property {number} GET_WORKING_ORDER_LIST_REQ=13 GET_WORKING_ORDER_LIST_REQ value\n             * @property {number} GET_WORKING_ORDER_LIST_RSP=14 GET_WORKING_ORDER_LIST_RSP value\n             * @property {number} QUERY_ORDER_BY_ORDER_ID_REQ=15 QUERY_ORDER_BY_ORDER_ID_REQ value\n             * @property {number} QUERY_ORDER_BY_ORDER_ID_RSP=16 QUERY_ORDER_BY_ORDER_ID_RSP value\n             * @property {number} QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ=17 QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ value\n             * @property {number} QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP=18 QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP value\n             * @property {number} QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ=19 QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP=20 QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_ORDER_LIST_BY_UNIFORM_SYMBOL_REQ=21 QUERY_ORDER_LIST_BY_UNIFORM_SYMBOL_REQ value\n             * @property {number} QUERY_ORDER_LIST_BY_UNIFORM_SYMBOL_RSP=22 QUERY_ORDER_LIST_BY_UNIFORM_SYMBOL_RSP value\n             * @property {number} GET_TRADE_LIST_REQ=23 GET_TRADE_LIST_REQ value\n             * @property {number} GET_TRADE_LIST_RSP=24 GET_TRADE_LIST_RSP value\n             * @property {number} QUERY_TRADE_BY_TRADE_ID_REQ=25 QUERY_TRADE_BY_TRADE_ID_REQ value\n             * @property {number} QUERY_TRADE_BY_TRADE_ID_RSP=26 QUERY_TRADE_BY_TRADE_ID_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_UNIFORM_SYMBOL_REQ=27 QUERY_TRADE_LIST_BY_UNIFORM_SYMBOL_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_UNIFORM_SYMBOL_RSP=28 QUERY_TRADE_LIST_BY_UNIFORM_SYMBOL_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ=29 QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP=30 QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_ORDER_ID_REQ=31 QUERY_TRADE_LIST_BY_ORDER_ID_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_ORDER_ID_RSP=32 QUERY_TRADE_LIST_BY_ORDER_ID_RSP value\n             * @property {number} QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ=33 QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ value\n             * @property {number} QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP=34 QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP value\n             * @property {number} GET_POSITION_LIST_REQ=35 GET_POSITION_LIST_REQ value\n             * @property {number} GET_POSITION_LIST_RSP=36 GET_POSITION_LIST_RSP value\n             * @property {number} QUERY_POSITION_BY_POSITION_ID_REQ=37 QUERY_POSITION_BY_POSITION_ID_REQ value\n             * @property {number} QUERY_POSITION_BY_POSITION_ID_RSP=38 QUERY_POSITION_BY_POSITION_ID_RSP value\n             * @property {number} QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ=39 QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP=40 QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_POSITION_LIST_BY_UNIFORM_SYMBOL_REQ=41 QUERY_POSITION_LIST_BY_UNIFORM_SYMBOL_REQ value\n             * @property {number} QUERY_POSITION_LIST_BY_UNIFORM_SYMBOL_RSP=42 QUERY_POSITION_LIST_BY_UNIFORM_SYMBOL_RSP value\n             * @property {number} GET_ACCOUNT_LIST_REQ=43 GET_ACCOUNT_LIST_REQ value\n             * @property {number} GET_ACCOUNT_LIST_RSP=44 GET_ACCOUNT_LIST_RSP value\n             * @property {number} QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ=45 QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ value\n             * @property {number} QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP=46 QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP value\n             * @property {number} QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ=47 QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ value\n             * @property {number} QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP=48 QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP value\n             * @property {number} GET_CONTRACT_LIST_REQ=49 GET_CONTRACT_LIST_REQ value\n             * @property {number} GET_CONTRACT_LIST_RSP=50 GET_CONTRACT_LIST_RSP value\n             * @property {number} QUERY_CONTRACT_BY_UNIFORM_SYMBOL_REQ=51 QUERY_CONTRACT_BY_UNIFORM_SYMBOL_REQ value\n             * @property {number} QUERY_CONTRACT_BY_UNIFORM_SYMBOL_RSP=52 QUERY_CONTRACT_BY_UNIFORM_SYMBOL_RSP value\n             * @property {number} SYNC_SLAVE_NODE_RUNTIME_DATA_REQ=53 SYNC_SLAVE_NODE_RUNTIME_DATA_REQ value\n             * @property {number} SYNC_SLAVE_NODE_RUNTIME_DATA_RSP=54 SYNC_SLAVE_NODE_RUNTIME_DATA_RSP value\n             * @property {number} GET_TICK_LIST_REQ=55 GET_TICK_LIST_REQ value\n             * @property {number} GET_TICK_LIST_RSP=56 GET_TICK_LIST_RSP value\n             * @property {number} QUERY_DB_BAR_LIST_REQ=57 QUERY_DB_BAR_LIST_REQ value\n             * @property {number} QUERY_DB_BAR_LIST_RSP=58 QUERY_DB_BAR_LIST_RSP value\n             * @property {number} QUERY_DB_TICK_LIST_REQ=59 QUERY_DB_TICK_LIST_REQ value\n             * @property {number} QUERY_DB_TICK_LIST_RSP=60 QUERY_DB_TICK_LIST_RSP value\n             * @property {number} QUERY_VOLUME_BAR_LIST_REQ=61 QUERY_VOLUME_BAR_LIST_REQ value\n             * @property {number} QUERY_VOLUME_BAR_LIST_RSP=62 QUERY_VOLUME_BAR_LIST_RSP value\n             * @property {number} EXCEPTION_RSP=999999 EXCEPTION_RSP value\n             * @property {number} ORDER_RTN=1001 ORDER_RTN value\n             * @property {number} TRADE_RTN=1002 TRADE_RTN value\n             * @property {number} CONTRACT_RTN=1003 CONTRACT_RTN value\n             * @property {number} POSITION_RTN=1004 POSITION_RTN value\n             * @property {number} ACCOUNT_RTN=1005 ACCOUNT_RTN value\n             * @property {number} TICK_RTN=1006 TICK_RTN value\n             * @property {number} ORDER_LIST_RTN=1007 ORDER_LIST_RTN value\n             * @property {number} TRADE_LIST_RTN=1008 TRADE_LIST_RTN value\n             * @property {number} CONTRACT_LIST_RTN=1009 CONTRACT_LIST_RTN value\n             * @property {number} POSITION_LIST_RTN=1010 POSITION_LIST_RTN value\n             * @property {number} ACCOUNT_LIST_RTN=1011 ACCOUNT_LIST_RTN value\n             * @property {number} TICK_LIST_RTN=1012 TICK_LIST_RTN value\n             * @property {number} NOTICE_RTN=1013 NOTICE_RTN value\n             */\n            pb.RpcId = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UNKNOWN_RPC_ID\"] = 0;\n                values[valuesById[1] = \"SUBSCRIBE_REQ\"] = 1;\n                values[valuesById[2] = \"SUBSCRIBE_RSP\"] = 2;\n                values[valuesById[3] = \"UNSUBSCRIBE_REQ\"] = 3;\n                values[valuesById[4] = \"UNSUBSCRIBE_RSP\"] = 4;\n                values[valuesById[5] = \"SUBMIT_ORDER_REQ\"] = 5;\n                values[valuesById[6] = \"SUBMIT_ORDER_RSP\"] = 6;\n                values[valuesById[7] = \"CANCEL_ORDER_REQ\"] = 7;\n                values[valuesById[8] = \"CANCEL_ORDER_RSP\"] = 8;\n                values[valuesById[9] = \"SEARCH_CONTRACT_REQ\"] = 9;\n                values[valuesById[10] = \"SEARCH_CONTRACT_RSP\"] = 10;\n                values[valuesById[11] = \"GET_ORDER_LIST_REQ\"] = 11;\n                values[valuesById[12] = \"GET_ORDER_LIST_RSP\"] = 12;\n                values[valuesById[13] = \"GET_WORKING_ORDER_LIST_REQ\"] = 13;\n                values[valuesById[14] = \"GET_WORKING_ORDER_LIST_RSP\"] = 14;\n                values[valuesById[15] = \"QUERY_ORDER_BY_ORDER_ID_REQ\"] = 15;\n                values[valuesById[16] = \"QUERY_ORDER_BY_ORDER_ID_RSP\"] = 16;\n                values[valuesById[17] = \"QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ\"] = 17;\n                values[valuesById[18] = \"QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP\"] = 18;\n                values[valuesById[19] = \"QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ\"] = 19;\n                values[valuesById[20] = \"QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP\"] = 20;\n                values[valuesById[21] = \"QUERY_ORDER_LIST_BY_UNIFORM_SYMBOL_REQ\"] = 21;\n                values[valuesById[22] = \"QUERY_ORDER_LIST_BY_UNIFORM_SYMBOL_RSP\"] = 22;\n                values[valuesById[23] = \"GET_TRADE_LIST_REQ\"] = 23;\n                values[valuesById[24] = \"GET_TRADE_LIST_RSP\"] = 24;\n                values[valuesById[25] = \"QUERY_TRADE_BY_TRADE_ID_REQ\"] = 25;\n                values[valuesById[26] = \"QUERY_TRADE_BY_TRADE_ID_RSP\"] = 26;\n                values[valuesById[27] = \"QUERY_TRADE_LIST_BY_UNIFORM_SYMBOL_REQ\"] = 27;\n                values[valuesById[28] = \"QUERY_TRADE_LIST_BY_UNIFORM_SYMBOL_RSP\"] = 28;\n                values[valuesById[29] = \"QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ\"] = 29;\n                values[valuesById[30] = \"QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP\"] = 30;\n                values[valuesById[31] = \"QUERY_TRADE_LIST_BY_ORDER_ID_REQ\"] = 31;\n                values[valuesById[32] = \"QUERY_TRADE_LIST_BY_ORDER_ID_RSP\"] = 32;\n                values[valuesById[33] = \"QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ\"] = 33;\n                values[valuesById[34] = \"QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP\"] = 34;\n                values[valuesById[35] = \"GET_POSITION_LIST_REQ\"] = 35;\n                values[valuesById[36] = \"GET_POSITION_LIST_RSP\"] = 36;\n                values[valuesById[37] = \"QUERY_POSITION_BY_POSITION_ID_REQ\"] = 37;\n                values[valuesById[38] = \"QUERY_POSITION_BY_POSITION_ID_RSP\"] = 38;\n                values[valuesById[39] = \"QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ\"] = 39;\n                values[valuesById[40] = \"QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP\"] = 40;\n                values[valuesById[41] = \"QUERY_POSITION_LIST_BY_UNIFORM_SYMBOL_REQ\"] = 41;\n                values[valuesById[42] = \"QUERY_POSITION_LIST_BY_UNIFORM_SYMBOL_RSP\"] = 42;\n                values[valuesById[43] = \"GET_ACCOUNT_LIST_REQ\"] = 43;\n                values[valuesById[44] = \"GET_ACCOUNT_LIST_RSP\"] = 44;\n                values[valuesById[45] = \"QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ\"] = 45;\n                values[valuesById[46] = \"QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP\"] = 46;\n                values[valuesById[47] = \"QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ\"] = 47;\n                values[valuesById[48] = \"QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP\"] = 48;\n                values[valuesById[49] = \"GET_CONTRACT_LIST_REQ\"] = 49;\n                values[valuesById[50] = \"GET_CONTRACT_LIST_RSP\"] = 50;\n                values[valuesById[51] = \"QUERY_CONTRACT_BY_UNIFORM_SYMBOL_REQ\"] = 51;\n                values[valuesById[52] = \"QUERY_CONTRACT_BY_UNIFORM_SYMBOL_RSP\"] = 52;\n                values[valuesById[53] = \"SYNC_SLAVE_NODE_RUNTIME_DATA_REQ\"] = 53;\n                values[valuesById[54] = \"SYNC_SLAVE_NODE_RUNTIME_DATA_RSP\"] = 54;\n                values[valuesById[55] = \"GET_TICK_LIST_REQ\"] = 55;\n                values[valuesById[56] = \"GET_TICK_LIST_RSP\"] = 56;\n                values[valuesById[57] = \"QUERY_DB_BAR_LIST_REQ\"] = 57;\n                values[valuesById[58] = \"QUERY_DB_BAR_LIST_RSP\"] = 58;\n                values[valuesById[59] = \"QUERY_DB_TICK_LIST_REQ\"] = 59;\n                values[valuesById[60] = \"QUERY_DB_TICK_LIST_RSP\"] = 60;\n                values[valuesById[61] = \"QUERY_VOLUME_BAR_LIST_REQ\"] = 61;\n                values[valuesById[62] = \"QUERY_VOLUME_BAR_LIST_RSP\"] = 62;\n                values[valuesById[999999] = \"EXCEPTION_RSP\"] = 999999;\n                values[valuesById[1001] = \"ORDER_RTN\"] = 1001;\n                values[valuesById[1002] = \"TRADE_RTN\"] = 1002;\n                values[valuesById[1003] = \"CONTRACT_RTN\"] = 1003;\n                values[valuesById[1004] = \"POSITION_RTN\"] = 1004;\n                values[valuesById[1005] = \"ACCOUNT_RTN\"] = 1005;\n                values[valuesById[1006] = \"TICK_RTN\"] = 1006;\n                values[valuesById[1007] = \"ORDER_LIST_RTN\"] = 1007;\n                values[valuesById[1008] = \"TRADE_LIST_RTN\"] = 1008;\n                values[valuesById[1009] = \"CONTRACT_LIST_RTN\"] = 1009;\n                values[valuesById[1010] = \"POSITION_LIST_RTN\"] = 1010;\n                values[valuesById[1011] = \"ACCOUNT_LIST_RTN\"] = 1011;\n                values[valuesById[1012] = \"TICK_LIST_RTN\"] = 1012;\n                values[valuesById[1013] = \"NOTICE_RTN\"] = 1013;\n                return values;\n            })();\n\n            pb.DataExchangeProtocol = (function() {\n\n                /**\n                 * Properties of a DataExchangeProtocol.\n                 * @memberof xyz.redtorch.pb\n                 * @interface IDataExchangeProtocol\n                 * @property {xyz.redtorch.pb.DataExchangeProtocol.ContentType|null} [contentType] DataExchangeProtocol contentType\n                 * @property {number|null} [rpcId] DataExchangeProtocol rpcId\n                 * @property {Uint8Array|null} [contentBytes] DataExchangeProtocol contentBytes\n                 * @property {number|Long|null} [timestamp] DataExchangeProtocol timestamp\n                 */\n\n                /**\n                 * Constructs a new DataExchangeProtocol.\n                 * @memberof xyz.redtorch.pb\n                 * @classdesc Represents a DataExchangeProtocol.\n                 * @implements IDataExchangeProtocol\n                 * @constructor\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol=} [properties] Properties to set\n                 */\n                function DataExchangeProtocol(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * DataExchangeProtocol contentType.\n                 * @member {xyz.redtorch.pb.DataExchangeProtocol.ContentType} contentType\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.contentType = 0;\n\n                /**\n                 * DataExchangeProtocol rpcId.\n                 * @member {number} rpcId\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.rpcId = 0;\n\n                /**\n                 * DataExchangeProtocol contentBytes.\n                 * @member {Uint8Array} contentBytes\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.contentBytes = $util.newBuffer([]);\n\n                /**\n                 * DataExchangeProtocol timestamp.\n                 * @member {number|Long} timestamp\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 */\n                DataExchangeProtocol.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new DataExchangeProtocol instance using the specified properties.\n                 * @function create\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol=} [properties] Properties to set\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol instance\n                 */\n                DataExchangeProtocol.create = function create(properties) {\n                    return new DataExchangeProtocol(properties);\n                };\n\n                /**\n                 * Encodes the specified DataExchangeProtocol message. Does not implicitly {@link xyz.redtorch.pb.DataExchangeProtocol.verify|verify} messages.\n                 * @function encode\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol} message DataExchangeProtocol message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                DataExchangeProtocol.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentType);\n                    if (message.rpcId != null && message.hasOwnProperty(\"rpcId\"))\n                        writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.rpcId);\n                    if (message.contentBytes != null && message.hasOwnProperty(\"contentBytes\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.contentBytes);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.timestamp);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified DataExchangeProtocol message, length delimited. Does not implicitly {@link xyz.redtorch.pb.DataExchangeProtocol.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.IDataExchangeProtocol} message DataExchangeProtocol message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                DataExchangeProtocol.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a DataExchangeProtocol message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                DataExchangeProtocol.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.DataExchangeProtocol();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.contentType = reader.int32();\n                            break;\n                        case 2:\n                            message.rpcId = reader.fixed32();\n                            break;\n                        case 3:\n                            message.contentBytes = reader.bytes();\n                            break;\n                        case 4:\n                            message.timestamp = reader.fixed64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a DataExchangeProtocol message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                DataExchangeProtocol.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a DataExchangeProtocol message.\n                 * @function verify\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                DataExchangeProtocol.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        switch (message.contentType) {\n                        default:\n                            return \"contentType: enum value expected\";\n                        case 0:\n                        case 1:\n                            break;\n                        }\n                    if (message.rpcId != null && message.hasOwnProperty(\"rpcId\"))\n                        if (!$util.isInteger(message.rpcId))\n                            return \"rpcId: integer expected\";\n                    if (message.contentBytes != null && message.hasOwnProperty(\"contentBytes\"))\n                        if (!(message.contentBytes && typeof message.contentBytes.length === \"number\" || $util.isString(message.contentBytes)))\n                            return \"contentBytes: buffer expected\";\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                            return \"timestamp: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a DataExchangeProtocol message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol\n                 */\n                DataExchangeProtocol.fromObject = function fromObject(object) {\n                    if (object instanceof $root.xyz.redtorch.pb.DataExchangeProtocol)\n                        return object;\n                    var message = new $root.xyz.redtorch.pb.DataExchangeProtocol();\n                    switch (object.contentType) {\n                    case \"ROUTINE\":\n                    case 0:\n                        message.contentType = 0;\n                        break;\n                    case \"COMPRESSED_LZ4\":\n                    case 1:\n                        message.contentType = 1;\n                        break;\n                    }\n                    if (object.rpcId != null)\n                        message.rpcId = object.rpcId >>> 0;\n                    if (object.contentBytes != null)\n                        if (typeof object.contentBytes === \"string\")\n                            $util.base64.decode(object.contentBytes, message.contentBytes = $util.newBuffer($util.base64.length(object.contentBytes)), 0);\n                        else if (object.contentBytes.length)\n                            message.contentBytes = object.contentBytes;\n                    if (object.timestamp != null)\n                        if ($util.Long)\n                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                        else if (typeof object.timestamp === \"string\")\n                            message.timestamp = parseInt(object.timestamp, 10);\n                        else if (typeof object.timestamp === \"number\")\n                            message.timestamp = object.timestamp;\n                        else if (typeof object.timestamp === \"object\")\n                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a DataExchangeProtocol message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @static\n                 * @param {xyz.redtorch.pb.DataExchangeProtocol} message DataExchangeProtocol\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                DataExchangeProtocol.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.contentType = options.enums === String ? \"ROUTINE\" : 0;\n                        object.rpcId = 0;\n                        if (options.bytes === String)\n                            object.contentBytes = \"\";\n                        else {\n                            object.contentBytes = [];\n                            if (options.bytes !== Array)\n                                object.contentBytes = $util.newBuffer(object.contentBytes);\n                        }\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.timestamp = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        object.contentType = options.enums === String ? $root.xyz.redtorch.pb.DataExchangeProtocol.ContentType[message.contentType] : message.contentType;\n                    if (message.rpcId != null && message.hasOwnProperty(\"rpcId\"))\n                        object.rpcId = message.rpcId;\n                    if (message.contentBytes != null && message.hasOwnProperty(\"contentBytes\"))\n                        object.contentBytes = options.bytes === String ? $util.base64.encode(message.contentBytes, 0, message.contentBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.contentBytes) : message.contentBytes;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        if (typeof message.timestamp === \"number\")\n                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                        else\n                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n                    return object;\n                };\n\n                /**\n                 * Converts this DataExchangeProtocol to JSON.\n                 * @function toJSON\n                 * @memberof xyz.redtorch.pb.DataExchangeProtocol\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                DataExchangeProtocol.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * ContentType enum.\n                 * @name xyz.redtorch.pb.DataExchangeProtocol.ContentType\n                 * @enum {string}\n                 * @property {number} ROUTINE=0 ROUTINE value\n                 * @property {number} COMPRESSED_LZ4=1 COMPRESSED_LZ4 value\n                 */\n                DataExchangeProtocol.ContentType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"ROUTINE\"] = 0;\n                    values[valuesById[1] = \"COMPRESSED_LZ4\"] = 1;\n                    return values;\n                })();\n\n                return DataExchangeProtocol;\n            })();\n\n            return pb;\n        })();\n\n        return redtorch;\n    })();\n\n    return xyz;\n})();\n\nmodule.exports = $root;\n","import { xyz } from \"../../pb/pb\";\r\nimport { rpcClientProcess } from './rpcClientProcess';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { authenticationStore } from \"../../../stores/storesIndex\";\r\n\r\nconst {\r\n    RpcId,\r\n    RpcSubscribeReq,\r\n    RpcUnsubscribeReq,\r\n    RpcSubmitOrderReq,\r\n    RpcCancelOrderReq,\r\n    RpcSearchContractReq,\r\n    RpcGetAccountListReq,\r\n    RpcGetContractListReq,\r\n    RpcGetPositionListReq,\r\n    RpcGetOrderListReq,\r\n    RpcGetTradeListReq,\r\n    RpcGetTickListReq,\r\n    CommonReqField,\r\n    CancelOrderReqField,\r\n} = xyz.redtorch.pb\r\n\r\nclass RpcClientApi {\r\n    public static getInstance = (): RpcClientApi => {\r\n        if (!RpcClientApi.instance) {\r\n            RpcClientApi.instance = new RpcClientApi();\r\n        }\r\n        return RpcClientApi.instance;\r\n    }\r\n\r\n    private static instance: RpcClientApi;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    private generateCommonReq = (transactionId: string) => {\r\n        const operatorId = authenticationStore.operatorId;\r\n        const commonReq = new CommonReqField()\r\n        commonReq.operatorId = operatorId;\r\n        commonReq.transactionId = transactionId;\r\n\r\n        return commonReq\r\n    }\r\n\r\n    public asyncSubscribe = (contract: xyz.redtorch.pb.ContractField): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcSubscribeReq = new RpcSubscribeReq();\r\n        rpcSubscribeReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcSubscribeReq.contract = contract;\r\n        rpcSubscribeReq.contract.gatewayId = \"\";\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.SUBSCRIBE_REQ, transactionId, RpcSubscribeReq.encode(rpcSubscribeReq).finish());\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncUnsubscribe = (contract: xyz.redtorch.pb.ContractField, gatewayId: string): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcUnsubscribeReq = new RpcUnsubscribeReq();\r\n\r\n        rpcUnsubscribeReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcUnsubscribeReq.contract = contract;\r\n        rpcUnsubscribeReq.gatewayId = gatewayId;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.UNSUBSCRIBE_REQ, transactionId, RpcUnsubscribeReq.encode(rpcUnsubscribeReq).finish());\r\n\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncSubmitOrder = (submitOrderReq: xyz.redtorch.pb.SubmitOrderReqField): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcSubmitOrderReq = new RpcSubmitOrderReq();\r\n\r\n        rpcSubmitOrderReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcSubmitOrderReq.submitOrderReq = submitOrderReq;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.SUBMIT_ORDER_REQ, transactionId, RpcSubmitOrderReq.encode(rpcSubmitOrderReq).finish());\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncCancelOrder = (orderId: string, originOrderId?: string): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const cancelOrderReq = new CancelOrderReqField()\r\n        cancelOrderReq.orderId = orderId;\r\n        if (originOrderId) {\r\n            cancelOrderReq.originOrderId = originOrderId;\r\n        }\r\n\r\n        const rpcCancelOrderReq = new RpcCancelOrderReq();\r\n        rpcCancelOrderReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcCancelOrderReq.cancelOrderReq = cancelOrderReq;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.CANCEL_ORDER_REQ, transactionId, RpcCancelOrderReq.encode(rpcCancelOrderReq).finish());\r\n\r\n    }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    public asyncSearchContract = (contract: xyz.redtorch.pb.ContractField): boolean => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcSearchContractReq = new RpcSearchContractReq();\r\n\r\n        rpcSearchContractReq.commonReq = this.generateCommonReq(transactionId);\r\n        rpcSearchContractReq.contract = contract;\r\n\r\n        return rpcClientProcess.sendRpc(RpcId.SEARCH_CONTRACT_REQ, transactionId, RpcSearchContractReq.encode(rpcSearchContractReq).finish());\r\n\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetAccountList = () => {\r\n        const transactionId = uuidv4()\r\n        const rpcGetAccountListReq = new RpcGetAccountListReq();\r\n\r\n        rpcGetAccountListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_ACCOUNT_LIST_REQ, transactionId, RpcGetAccountListReq.encode(rpcGetAccountListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetContractList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetContractListReq = new RpcGetContractListReq();\r\n\r\n        rpcGetContractListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_CONTRACT_LIST_REQ, transactionId, RpcGetContractListReq.encode(rpcGetContractListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetPositionList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetPositionListReq = new RpcGetPositionListReq();\r\n\r\n        rpcGetPositionListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_POSITION_LIST_REQ, transactionId, RpcGetPositionListReq.encode(rpcGetPositionListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetOrderList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetOrderListReq = new RpcGetOrderListReq();\r\n\r\n        rpcGetOrderListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_ORDER_LIST_REQ, transactionId, RpcGetOrderListReq.encode(rpcGetOrderListReq).finish());\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetTradeList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetTradeListReq = new RpcGetTradeListReq();\r\n\r\n        rpcGetTradeListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_TRADE_LIST_REQ, transactionId, RpcGetTradeListReq.encode(rpcGetTradeListReq).finish());\r\n    }\r\n    // -------------------------------------------------------------------------------------\r\n    public asyncGetTickList = () => {\r\n        const transactionId = uuidv4()\r\n\r\n        const rpcGetTickListReq = new RpcGetTickListReq();\r\n\r\n        rpcGetTickListReq.commonReq = this.generateCommonReq(transactionId);\r\n\r\n        return rpcClientProcess.sendAsyncHttpRpc(RpcId.GET_TICK_LIST_REQ, transactionId, RpcGetTickListReq.encode(rpcGetTickListReq).finish());\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst rpcClientApi = RpcClientApi.getInstance()\r\n\r\nexport { rpcClientApi };","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\nimport './ManagementPage.css';\r\nimport { withRouter } from 'react-router';\r\nimport { RouteWithSubRoutes } from '../../router'\r\n\r\nexport const ManagementPage = inject('routingStore')(observer(class ManagementPage extends React.Component<any> {\r\n\r\n  public state = { selectedKey: 'Settings' };\r\n\r\n  public render() {\r\n    const { routes, location } = this.props;\r\n\r\n    let defaultSelectedKey = '';\r\n    routes.map((route: any, i: any) => {\r\n      if (location.pathname.startsWith(route.path)) {\r\n        defaultSelectedKey = route.path;\r\n      }\r\n    })\r\n\r\n    return (\r\n      <Pivot\r\n        defaultSelectedKey={defaultSelectedKey}\r\n        onLinkClick={this.onLinkClick}\r\n        styles={{ linkIsSelected: { height: 24 }, link: { height: 24 }, linkContent: { height: 24 }, root: { height: 24 }, text: { lineHeight: 24 } }}\r\n      >\r\n        {routes.map((route: any, i: any) => (\r\n          <PivotItem key={`PivotItemKey_${route.name}`} itemKey={route.path} headerText={route.name}>\r\n            <RouteWithSubRoutes {...route} />\r\n          </PivotItem>\r\n        ))}\r\n      </Pivot>\r\n    );\r\n  }\r\n\r\n  onLinkClick = (item: PivotItem | undefined): void => {\r\n    const { history } = this.props;\r\n    if (item) {\r\n      history.push(item.props.itemKey)\r\n    }\r\n  };\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(ManagementPage)","import * as React from 'react';\r\n// import * as ReactDOM from 'react-dom';\r\nimport { inject, observer } from 'mobx-react';\r\n// import { counterStore, routingStore } from '../stores'\r\n// import { TextField, MaskedTextField } from '@fluentui/react/lib/TextField';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\r\nimport { withRouter } from 'react-router';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, IColumn, IDetailsHeaderProps, ConstrainMode, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { PrimaryButton, DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const NodePage = inject('nodeStore')(observer(class NodePage extends React.Component<any> {\r\n\r\n  public state = {\r\n    showTokenModal: false,\r\n    tokenForShow: '',\r\n    nodeIdForTokenShow: '',\r\n    hiddenDeleteNodeDialog: true,\r\n    nodeIdForDelete: null,\r\n    hiddenResetNodeTokenDialog: true,\r\n    nodeIdForReset: null,\r\n    editNodeDescription: '',\r\n    editNodeId: null,\r\n    showUpdateNodeDescriptionModal: false,\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n    const { nodeStore } = this.props\r\n\r\n    nodeStore.getNodeList()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n\r\n  public render() {\r\n\r\n    // const { routes, location } = this.props;\r\n\r\n    const columns: IColumn[] = [{\r\n      key: \"nodeId\",\r\n      name: \"ID\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.nodeId}</span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: \"status\",\r\n      name: \"状态\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        if (item.status === 0) {\r\n          return (\r\n            <span style={{ color: 'red' }}>已经断开</span>\r\n          );\r\n        } else if (item.status === 1) {\r\n          return (\r\n            <span style={{ color: 'green' }}>已经连接</span>\r\n          );\r\n        }\r\n        return (\r\n          <span style={{ color: 'aqua' }}>{item.status}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"description\",\r\n      name: \"描述\",\r\n      minWidth: 200,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.description}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlySessionId\",\r\n      name: \"最近的会话ID\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlySessionId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyIpAddress\",\r\n      name: \"最近的IP地址\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyIpAddress}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyPort\",\r\n      name: \"最近的端口\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyPort}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLoginTime\",\r\n      name: \"最近的登录时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLoginTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLogoutTime\",\r\n      name: \"最近的断开时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLogoutTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"action\",\r\n      name: \"操作\",\r\n      minWidth: 30,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      onRender: (item) => {\r\n        return (\r\n          <IconButton\r\n            menuIconProps={{ iconName: 'MoreVertical' }}\r\n            role=\"button\"\r\n            aria-haspopup={true}\r\n            aria-label=\"Show actions\"\r\n            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n            menuProps={{\r\n              items: [\r\n                {\r\n                  key: 'showToken',\r\n                  text: '查看令牌',\r\n                  iconProps: {\r\n                    iconName: \"EntryView\"\r\n                  },\r\n                  onClick: () => this.openShowTokenModal(item.nodeId, item.token)\r\n                },\r\n                {\r\n                  key: 'resetToken',\r\n                  text: '重置令牌',\r\n                  iconProps: {\r\n                    iconName: \"SingleColumnEdit\"\r\n                  },\r\n                  onClick: () => this.openResetNodeTokenDialog(item.nodeId)\r\n                },\r\n                {\r\n                  key: 'updateDescription',\r\n                  text: '更新描述',\r\n                  iconProps: {\r\n                    iconName: \"EditNote\"\r\n                  },\r\n                  onClick: () => this.openUpdateNodeDescriptionModal(item.nodeId, item.description)\r\n                },\r\n                {\r\n                  key: 'delete',\r\n                  text: '删除',\r\n                  iconProps: {\r\n                    iconName: \"DeleteRows\"\r\n                  },\r\n                  onClick: () => this.openDeleteNodeDialog(item.nodeId)\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    ]\r\n\r\n\r\n    const { nodeStore } = this.props\r\n\r\n    const classNames = mergeStyleSets({\r\n      wrapper: {\r\n        height: `${this.state.windowInnerHeight - 81}px`,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Stack>\r\n        <Stack>\r\n          <CommandBar\r\n            items={this.getCommandBarItems()}\r\n          // 以下功能可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n          // overflowItems={this.getOverlflowItems()}\r\n          // overflowButtonProps={{ ariaLabel: 'More commands' }}\r\n          // farItems={this.getFarItems()}\r\n          // ariaLabel={'Use left and right arrow keys to navigate between commands'}\r\n          />\r\n          <div className={classNames.wrapper}>\r\n            <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n              <DetailsList\r\n                // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                items={nodeStore.nodeList}\r\n                compact={true}\r\n                columns={columns}\r\n                selectionMode={SelectionMode.none}\r\n                setKey=\"id\"\r\n                layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                constrainMode={ConstrainMode.unconstrained}\r\n                // data-is-scrollable={true}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsHeader={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                      <DetailsHeader\r\n                        {...detailsHeaderProps}\r\n                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                      />\r\n                      {/* {defaultRender(detailsHeaderProps)} */}\r\n                    </Sticky>\r\n                  )}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsFooter={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                      {defaultRender(detailsFooterProps)}\r\n                    </Sticky>\r\n                  )}\r\n              />\r\n            </ScrollablePane>\r\n          </div>\r\n        </Stack>\r\n        <Modal\r\n          isOpen={this.state.showTokenModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeShowTokenModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"节点ID\" defaultValue={this.state.nodeIdForTokenShow} disabled={true} />\r\n                  <TextField label=\"令牌\" defaultValue={this.state.tokenForShow} readOnly={true} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteNodeDialog}\r\n          onDismiss={() => this.closeDeleteNodeDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除提示',\r\n            subText: `确认删除节点？ID:${this.state.nodeIdForDelete},此操作将断开当前ID存在的会话`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteNodeByNodeId()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteNodeDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenResetNodeTokenDialog}\r\n          onDismiss={this.closeResetNodeTokenDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '重置节点令牌提示',\r\n            subText: `确认重置节点令牌？ID:${this.state.nodeIdForReset},此操作将断开当前ID存在的会话`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.resetNodeTokenByNodeId()} text=\"重置\" />\r\n            <DefaultButton onClick={() => this.closeResetNodeTokenDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateNodeDescriptionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateNodeDescriptionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >节点ID: {this.state.editNodeId}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"节点描述\" multiline={true} resizable={true} defaultValue={this.state.editNodeDescription ? this.state.editNodeDescription : \"\"} onChange={(event: any, newValue?: string) => this.editNodeDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateNodeDescriptionByNodeId()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateNodeDescriptionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private openShowTokenModal = (nodeId: number, token: string) => {\r\n    this.setState({ tokenForShow: token, nodeIdForTokenShow: nodeId, showTokenModal: true });\r\n  }\r\n\r\n  private closeShowTokenModal = () => {\r\n    this.setState({ showTokenModal: false, tokenForShow: '', nodeIdForTokenShow: '' });\r\n  }\r\n\r\n  private openDeleteNodeDialog = (nodeId: number) => {\r\n    this.setState({ nodeIdForDelete: nodeId, hiddenDeleteNodeDialog: false });\r\n  }\r\n\r\n  private closeDeleteNodeDialog = () => {\r\n    this.setState({ hiddenDeleteNodeDialog: true, nodeIdForDelete: null });\r\n  }\r\n\r\n  private deleteNodeByNodeId = () => {\r\n    const { nodeStore } = this.props\r\n    nodeStore.deleteNodeByNodeId(this.state.nodeIdForDelete)\r\n    this.closeDeleteNodeDialog();\r\n  }\r\n\r\n  private openResetNodeTokenDialog = (nodeId: number) => {\r\n    this.setState({ nodeIdForReset: nodeId, hiddenResetNodeTokenDialog: false });\r\n  }\r\n\r\n  private closeResetNodeTokenDialog = () => {\r\n    this.setState({ hiddenResetNodeTokenDialog: true, nodeIdForReset: null });\r\n  }\r\n\r\n  private resetNodeTokenByNodeId = () => {\r\n    const { nodeStore } = this.props\r\n    nodeStore.resetNodeTokenByNodeId(this.state.nodeIdForReset)\r\n    this.closeResetNodeTokenDialog();\r\n  }\r\n\r\n  private openUpdateNodeDescriptionModal = (nodeId: number, description: string) => {\r\n    this.setState({ editNodeId: nodeId, editNodeDescription: description, showUpdateNodeDescriptionModal: true });\r\n  }\r\n\r\n  private closeUpdateNodeDescriptionModal = () => {\r\n    this.setState({ showUpdateNodeDescriptionModal: false, editNodeId: null, editNodeDescription: '' });\r\n  }\r\n\r\n  private updateNodeDescriptionByNodeId = () => {\r\n    this.props.nodeStore.updateNodeDescriptionByNodeId(this.state.editNodeId, this.state.editNodeDescription)\r\n    this.closeUpdateNodeDescriptionModal();\r\n  }\r\n\r\n  private editNodeDescriptionOnChange(event: any) {\r\n    this.setState({ editNodeDescription: event.target.value })\r\n  }\r\n\r\n  private getCommandBarItems = () => {\r\n\r\n    const { nodeStore } = this.props\r\n    return [\r\n      {\r\n        key: 'add',\r\n        name: '新增',\r\n        iconProps: {\r\n          iconName: 'Add'\r\n        },\r\n        onClick: () => nodeStore.createNode()\r\n      },\r\n      {\r\n        key: 'refresh',\r\n        name: '刷新',\r\n        iconProps: {\r\n          iconName: 'Refresh'\r\n        },\r\n        onClick: () => nodeStore.getNodeList()\r\n      }\r\n    ];\r\n  };\r\n\r\n  // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 以下可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\r\n  // private getOverlflowItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'blocked',\r\n  //       name: '禁用',\r\n  //       iconProps: {\r\n  //         iconName: 'Blocked'\r\n  //       },\r\n  //       onClick: () => console.log('禁用')\r\n  //     },\r\n  //     {\r\n  //       key: 'delete',\r\n  //       name: '删除',\r\n  //       iconProps: {\r\n  //         iconName: 'DeleteTable'\r\n  //       },\r\n  //       onClick: () => console.log('Share')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // private getFarItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'sort',\r\n  //       name: 'Sort',\r\n  //       ariaLabel: 'Sort',\r\n  //       iconProps: {\r\n  //         iconName: 'SortLines'\r\n  //       },\r\n  //       subMenuProps: {\r\n  //         items: [\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据ID',\r\n  //           },\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据状态',\r\n  //           }\r\n  //         ]\r\n  //       },\r\n  //       onClick: () => console.log('Sort')\r\n  //     },\r\n  //     {\r\n  //       key: 'info',\r\n  //       name: 'Info',\r\n  //       ariaLabel: 'Info',\r\n  //       iconProps: {\r\n  //         iconName: 'Info'\r\n  //       },\r\n  //       iconOnly: true,\r\n  //       onClick: () => console.log('Info')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\r\n\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(NodePage);","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\r\nimport { withRouter } from 'react-router';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, IColumn, IDetailsHeaderProps, ConstrainMode, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { ActionButton, PrimaryButton, DefaultButton, IButtonStyles, IconButton } from '@fluentui/react/lib/Button';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { Dropdown, IDropdownStyles, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\nimport { ComboBox, IComboBoxOption } from '@fluentui/react/lib/ComboBox';\r\nimport { hostNamePattern, ipv4PattenPattern, portPattern, normalIntegerPattern } from '../../utils';\r\nimport { toast } from 'react-toastify';\r\nimport { createTheme, ITheme, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { xyz } from \"../../node/pb/pb\";\r\n\r\nconst { GatewayTypeEnum, GatewayAdapterTypeEnum, ConnectStatusEnum } = xyz.redtorch.pb\r\n\r\n\r\nconst theme: ITheme = createTheme({\r\n  fonts: {\r\n    medium: {\r\n      fontFamily: 'Monaco, Menlo, Consolas',\r\n      fontSize: '30px'\r\n    }\r\n  }\r\n});\r\n\r\nconst actionButtonStyles: IButtonStyles = {\r\n  root: {\r\n    fontSize: '12px',\r\n    height: 16\r\n  }\r\n}\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: { width: 300 }\r\n};\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nconst gatewayTypeOptions: IDropdownOption[] = [\r\n  { key: 0, text: '行情和交易' },\r\n  { key: 1, text: '行情' },\r\n  { key: 2, text: '交易' },\r\n];\r\n\r\nconst gatewayAdapterTypeOptions: IDropdownOption[] = [\r\n  { key: 0, text: 'CTP' },\r\n  { key: 1, text: 'IB' },\r\n  { key: 2, text: 'COMMON' }\r\n];\r\n\r\nconst gatewayImplementClassNameOptions: IComboBoxOption[] = [\r\n  { key: 'xyz.redtorch.gateway.ctp.x64v6v3v19p1v.CtpGatewayImpl', text: 'xyz.redtorch.gateway.ctp.x64v6v3v19p1v.CtpGatewayImpl' },\r\n  { key: 'xyz.redtorch.gateway.ctp.x64v6v3v19t1v.CtpGatewayImpl', text: 'xyz.redtorch.gateway.ctp.x64v6v3v19t1v.CtpGatewayImpl' }\r\n];\r\n\r\n\r\nexport const GatewayPage = inject('gatewayStore')(observer(class GatewayPage extends React.Component<any> {\r\n\r\n  public state = {\r\n    hiddenDisconnectGatewayDialog: true,\r\n    gatewayIdForDisconnect: '',\r\n    // -----------------------------------------\r\n    hiddenDeleteGatewayDialog: true,\r\n    gatewayIdForDelete: null,\r\n    // -----------------------------------------\r\n    hiddenConnectAllGatewaysDialog: true,\r\n    hiddenDisconnectAllGatewaysDialog: true,\r\n    // -----------------------------------------\r\n    showEditGatewayModal: false,\r\n    // -----------------------------------------\r\n    editGatewayId: '',\r\n    editGatewayName: '',\r\n    editGatewayNameErrorMessage: '',\r\n    editGatewayDescription: '',\r\n    editGatewayTargetNodeId: 10000,\r\n    editGatewayTargetNodeIdErrorMessage: '',\r\n    editGatewayImplementClassName: '',\r\n    editGatewayImplementClassNameErrorMessage: '',\r\n    editGatewayType: 0,\r\n    editGatewayAdapterType: 0,\r\n    editAutoConnectTimeRanges: \"\",\r\n    editGatewayCtpSettingUserId: '',\r\n    editGatewayCtpSettingUserIdErrorMessage: '',\r\n    editGatewayCtpSettingPassword: '',\r\n    editGatewayCtpSettingPasswordErrorMessage: '',\r\n    editGatewayCtpSettingMdHost: '',\r\n    editGatewayCtpSettingMdHostErrorMessage: '',\r\n    editGatewayCtpSettingMdPort: 0,\r\n    editGatewayCtpSettingMdPortErrorMessage: '',\r\n    editGatewayCtpSettingTdHost: '',\r\n    editGatewayCtpSettingTdHostErrorMessage: '',\r\n    editGatewayCtpSettingTdPort: 0,\r\n    editGatewayCtpSettingTdPortErrorMessage: '',\r\n    editGatewayCtpSettingUserProductInfo: '',\r\n    editGatewayCtpSettingAuthCode: '',\r\n    editGatewayCtpSettingBrokerId: '',\r\n    editGatewayCtpSettingBrokerIdErrorMessage: '',\r\n    editGatewayCtpSettingAppId: '',\r\n    editGatewayIbSettingClientId: 0,\r\n    editGatewayIbSettingHost: '127.0.0.1',\r\n    editGatewayIbSettingHostErrorMessage: '',\r\n    editGatewayIbSettingPort: 7496,\r\n    editGatewayIbSettingPortErrorMessage: '',\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n    const { gatewayStore } = this.props\r\n\r\n    gatewayStore.getGatewayList()\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n  public render() {\r\n\r\n    // const { routes, location } = this.props;\r\n\r\n    const columns: IColumn[] = [{\r\n      key: \"gatewayId\",\r\n      name: \"ID\",\r\n      minWidth: 250,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.gatewayId}</span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: \"status\",\r\n      name: \"连接状态\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'boolean',\r\n      onRender: (item) => {\r\n        if (item.status === ConnectStatusEnum.CS_Disconnected) {\r\n          return (\r\n            <span style={{ color: 'red' }}>已经断开</span>\r\n          );\r\n        } else if (item.status === ConnectStatusEnum.CS_Connected) {\r\n          return (\r\n            <span style={{ color: 'green' }}>已经连接</span>\r\n          );\r\n        } else if (item.status === ConnectStatusEnum.CS_Disconnecting) {\r\n          return (\r\n            <span style={{ color: 'orange' }}>正在断开</span>\r\n          );\r\n        } else if (item.status === ConnectStatusEnum.CS_Connecting) {\r\n          return (\r\n            <span style={{ color: 'orange' }}>正在连接</span>\r\n          );\r\n        }\r\n        return (\r\n          <span style={{ color: 'aqua' }}>{item.status}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"autoConnectTimeRanges\",\r\n      name: \"自动连接时间段\",\r\n      minWidth: 120,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.autoConnectTimeRanges}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"gatewayName\",\r\n      name: \"网关名称\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.gatewayName}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"gatewayDescription\",\r\n      name: \"网关描述\",\r\n      minWidth: 120,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.gatewayDescription}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"implementClassName\",\r\n      name: \"网关实现类\",\r\n      minWidth: 120,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.implementClassName}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"gatewayType\",\r\n      name: \"网关类型\",\r\n      minWidth: 80,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        if (item.gatewayType === GatewayTypeEnum.GTE_TradeAndMarketData) {\r\n          return (\r\n            <span>行情和交易</span>\r\n          );\r\n        } else if (item.gatewayType === GatewayTypeEnum.GTE_MarketData) {\r\n          return (\r\n            <span>行情</span>\r\n          );\r\n        } else if (item.gatewayType === GatewayTypeEnum.GTE_Trade) {\r\n          return (\r\n            <span>交易</span>\r\n          );\r\n        }\r\n        return (\r\n          <span>{item.gatewayType}</span>\r\n        );\r\n\r\n      }\r\n    }, {\r\n      key: \"gatewayAdapterType\",\r\n      name: \"网关适配器类型\",\r\n      minWidth: 80,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        if (item.gatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP) {\r\n          return (\r\n            <span>CTP</span>\r\n          );\r\n        } else if (item.gatewayAdapterType === GatewayAdapterTypeEnum.GAT_IB) {\r\n          return (\r\n            <span>IB</span>\r\n          );\r\n        } else if (item.gatewayAdapterType === GatewayAdapterTypeEnum.GAT_COMMON) {\r\n          return (\r\n            <span>COMMON</span>\r\n          );\r\n        }\r\n        return (\r\n          <span>{item.gatewayAdapterType}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"targetNodeId\",\r\n      name: \"目标节点ID\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.targetNodeId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"action\",\r\n      name: \"操作\",\r\n      minWidth: 110,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      onRender: (item) => {\r\n        return (\r\n          <span>\r\n            {\r\n              (item.status === ConnectStatusEnum.CS_Connected || item.status === ConnectStatusEnum.CS_Connecting) ?\r\n                <ActionButton\r\n                  iconProps={{ iconName: 'PlugConnected' }}\r\n                  allowDisabledFocus={true}\r\n                  disabled={false}\r\n                  checked={false}\r\n                  onClick={() => this.openDisconnectGatewayDialog(item.gatewayId)}\r\n                  styles={actionButtonStyles}\r\n                >\r\n                  断开\r\n            </ActionButton> :\r\n                <ActionButton\r\n                  iconProps={{ iconName: 'PlugDisconnected' }}\r\n                  allowDisabledFocus={true}\r\n                  disabled={false}\r\n                  checked={false}\r\n                  onClick={() => this.props.gatewayStore.connectGatewayByGatewayId(item.gatewayId)}\r\n                  styles={actionButtonStyles}\r\n                >\r\n                  连接\r\n              </ActionButton>\r\n            }\r\n\r\n            <IconButton\r\n              menuIconProps={{ iconName: 'MoreVertical' }}\r\n              role=\"button\"\r\n              aria-haspopup={true}\r\n              aria-label=\"Show actions\"\r\n              styles={{ root: { float: 'right', height: 'inherit' } }}\r\n              menuProps={{\r\n                items: [\r\n                  {\r\n                    key: 'edit',\r\n                    text: '编辑',\r\n                    iconProps: {\r\n                      iconName: \"PageEdit\"\r\n                    },\r\n                    onClick: () => this.openEditGatewayModal(item)\r\n                  },\r\n                  {\r\n                    key: 'delete',\r\n                    text: '删除',\r\n                    iconProps: {\r\n                      iconName: \"DeleteRows\"\r\n                    },\r\n                    onClick: () => this.openDeleteGatewayDialog(item.gatewayId)\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n    ]\r\n\r\n\r\n    const { gatewayStore } = this.props\r\n    const classNames = mergeStyleSets({\r\n      wrapper: {\r\n        height: `${this.state.windowInnerHeight - 81}px`,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Stack>\r\n        <Stack>\r\n          <CommandBar\r\n            items={this.getCommandBarItems()}\r\n          />\r\n          <div className={classNames.wrapper}>\r\n            <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n              <DetailsList\r\n                // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                items={gatewayStore.gatewayList}\r\n                compact={true}\r\n                columns={columns}\r\n                selectionMode={SelectionMode.none}\r\n                setKey=\"id\"\r\n                layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                constrainMode={ConstrainMode.unconstrained}\r\n                // data-is-scrollable={true}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsHeader={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                      <DetailsHeader\r\n                        {...detailsHeaderProps}\r\n                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                      />\r\n                      {/* {defaultRender(detailsHeaderProps)} */}\r\n                    </Sticky>\r\n                  )}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsFooter={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                      {defaultRender(detailsFooterProps)}\r\n                    </Sticky>\r\n                  )}\r\n              />\r\n            </ScrollablePane>\r\n          </div>\r\n\r\n        </Stack>\r\n        <Modal\r\n          isOpen={this.state.showEditGatewayModal}\r\n          isBlocking={true}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >基本配置</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"网关ID\" id='editGatewayId' disabled={true} defaultValue={this.state.editGatewayId} />\r\n                  <TextField label=\"网关名称\" id='editGatewayName' defaultValue={this.state.editGatewayName} errorMessage={this.state.editGatewayNameErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  <TextField label=\"网关描述\" id='editGatewayDescription' defaultValue={this.state.editGatewayDescription} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  <TextField label=\"目标节点\" id='editGatewayTargetNodeId' type='number' defaultValue={`${this.state.editGatewayTargetNodeId}`} errorMessage={this.state.editGatewayTargetNodeIdErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  {/* <TextField label=\"网关实现类\"  id={'editGatewayImplementClassName'}   defaultValue={this.state.editGatewayImplementClassName}/> */}\r\n                  <ComboBox\r\n                    label=\"网关实现类\"\r\n                    id=\"editGatewayImplementClassName\"\r\n                    allowFreeform={true}\r\n                    autoComplete={'off'}\r\n                    options={gatewayImplementClassNameOptions}\r\n                    onChange={(event: any, option?: IComboBoxOption, index?: number, value?: string) => {\r\n                      if (option !== undefined) {\r\n                        this.commonHandleFieldChange(\"editGatewayImplementClassName\", option.text)\r\n                      }\r\n                    }}\r\n                    onPendingValueChanged={(option?: IComboBoxOption, index?: number, value?: string) => {\r\n                      if (value !== undefined) {\r\n                        this.commonHandleFieldChange(\"editGatewayImplementClassName\", value)\r\n                      }\r\n                    }}\r\n                    errorMessage={this.state.editGatewayImplementClassNameErrorMessage}\r\n                    text={this.state.editGatewayImplementClassName}\r\n                  />\r\n\r\n                  <Dropdown\r\n                    id='editGatewayType'\r\n                    label=\"网关类型\"\r\n                    defaultSelectedKey={this.state.editGatewayType}\r\n                    options={gatewayTypeOptions}\r\n                    styles={dropdownStyles}\r\n                    onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => this.commonHandleFieldChange(event.target.id, index)}\r\n                  />\r\n\r\n                  <Dropdown\r\n                    id='editGatewayAdapterType'\r\n                    label=\"网关适配器类型\"\r\n                    defaultSelectedKey={this.state.editGatewayAdapterType}\r\n                    options={gatewayAdapterTypeOptions}\r\n                    styles={dropdownStyles}\r\n                    onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => this.commonHandleFieldChange(event.target.id, index)}\r\n                  />\r\n\r\n                  <TextField label=\"自动连接时间段(t1-t2#tm-tn#...)\" id='editAutoConnectTimeRanges' type='string' defaultValue={`${this.state.editAutoConnectTimeRanges}`} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP ?\r\n              <Stack.Item align=\"center\">\r\n                <Separator><div style={{ fontSize: FontSizes.xxLarge }} >CTP配置</div></Separator>\r\n              </Stack.Item> : null\r\n            }\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP ?\r\n              <Stack.Item align=\"center\">\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                  <Stack {...columnProps}>\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_MarketData) ?\r\n                      <TextField label=\"行情主机\" id={'editGatewayCtpSettingMdHost'} defaultValue={this.state.editGatewayCtpSettingMdHost} errorMessage={this.state.editGatewayCtpSettingMdHostErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_Trade) ?\r\n                      <TextField label=\"交易主机\" id={'editGatewayCtpSettingTdHost'} defaultValue={this.state.editGatewayCtpSettingTdHost} errorMessage={this.state.editGatewayCtpSettingTdHostErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    <TextField label=\"用户名\" id={'editGatewayCtpSettingUserId'} defaultValue={this.state.editGatewayCtpSettingUserId} errorMessage={this.state.editGatewayCtpSettingUserIdErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"UserProductInfo\" id={'editGatewayCtpSettingUserProductInfo'} defaultValue={this.state.editGatewayCtpSettingUserProductInfo} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"AppID\" id='editGatewayCtpSettingAppId' defaultValue={this.state.editGatewayCtpSettingAppId} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  </Stack>\r\n                  <Stack {...columnProps}>\r\n\r\n                    {/* 弃用,样式有偏差\r\n                    <SpinButton\r\n                      defaultValue ={`${this.state.editGatewayCtpSettingMdPort}`}\r\n                      label={'行情端口'}\r\n                      labelPosition={Position.top}\r\n                      min={0}\r\n                      max={65535}\r\n                      step={1}\r\n                      incrementButtonAriaLabel={'Increase value by 1'}\r\n                      decrementButtonAriaLabel={'Decrease value by 1'}\r\n                    /> */}\r\n\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_MarketData) ?\r\n                      <TextField label=\"行情端口\" id='editGatewayCtpSettingMdPort' type='number' defaultValue={`${this.state.editGatewayCtpSettingMdPort}`} errorMessage={this.state.editGatewayCtpSettingMdPortErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    {(this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_Trade) ?\r\n                      <TextField label=\"交易端口\" id='editGatewayCtpSettingTdPort' type='number' defaultValue={`${this.state.editGatewayCtpSettingTdPort}`} errorMessage={this.state.editGatewayCtpSettingTdPortErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} /> : null\r\n                    }\r\n                    <TextField label=\"密码\" id='editGatewayCtpSettingPassword' type='password' defaultValue={this.state.editGatewayCtpSettingPassword} errorMessage={this.state.editGatewayCtpSettingPasswordErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"AuthCode\" id='editGatewayCtpSettingAuthCode' defaultValue={this.state.editGatewayCtpSettingAuthCode} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                    <TextField label=\"BrokerID\" id='editGatewayCtpSettingBrokerId' defaultValue={this.state.editGatewayCtpSettingBrokerId} errorMessage={this.state.editGatewayCtpSettingBrokerIdErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item> : null\r\n            }\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_IB ?\r\n              <Stack.Item align=\"center\">\r\n                <Separator theme={theme}>IB配置</Separator>\r\n              </Stack.Item> : null\r\n            }\r\n\r\n            {this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_IB ?\r\n              <Stack.Item align=\"center\">\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                  <Stack {...columnProps}>\r\n                    <TextField label=\"主机\" id='editGatewayIbSettingHost' defaultValue={this.state.editGatewayIbSettingHost} errorMessage={this.state.editGatewayIbSettingHostErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                    <TextField label=\"客户端ID\" id='editGatewayIbSettingClientId' type='number' defaultValue={`${this.state.editGatewayIbSettingClientId}`} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  </Stack>\r\n                  <Stack {...columnProps}>\r\n                    <TextField label=\"端口\" id='editGatewayIbSettingPort' type='number' defaultValue={`${this.state.editGatewayIbSettingPort}`} errorMessage={this.state.editGatewayIbSettingPortErrorMessage} onChange={(event: any, newValue?: string) => this.commonHandleFieldChange(event.target.id, newValue)} />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item> : null\r\n            }\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.saveEditGateway()} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeEditGatewayModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDisconnectGatewayDialog}\r\n          onDismiss={() => this.closeDisconnectGatewayDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '断开提示',\r\n            subText: `确认断开网关？ID:${this.state.gatewayIdForDisconnect}`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.disconnectGatewayByGatewayId()} text=\"断开\" />\r\n            <DefaultButton onClick={() => this.closeDisconnectGatewayDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteGatewayDialog}\r\n          onDismiss={this.closeDeleteGatewayDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除提示',\r\n            subText: `确认删除网关？ID:${this.state.gatewayIdForDelete},此操作将同时断开当前网关ID存在的连接`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteGatewayByGatewayId()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteGatewayDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenConnectAllGatewaysDialog}\r\n          onDismiss={this.closeConnectAllGatewaysDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '连接提示',\r\n            subText: \"确认连接全部网关?\"\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.connectAllGateways()} text=\"连接全部\" />\r\n            <DefaultButton onClick={() => this.closeConnectAllGatewaysDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDisconnectAllGatewaysDialog}\r\n          onDismiss={this.closeDisconnectAllGatewaysDialog}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '断开提示',\r\n            subText: \"确认断开全部网关?\"\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.disconnectAllGateways()} text=\"断开全部\" />\r\n            <DefaultButton onClick={() => this.closeDisconnectAllGatewaysDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private openConnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenConnectAllGatewaysDialog: false, });\r\n  }\r\n\r\n  private closeConnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenConnectAllGatewaysDialog: true });\r\n  }\r\n  private connectAllGateways = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.connectAllGateways()\r\n    this.closeConnectAllGatewaysDialog();\r\n  }\r\n\r\n  private openDisconnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenDisconnectAllGatewaysDialog: false, });\r\n  }\r\n\r\n  private closeDisconnectAllGatewaysDialog = () => {\r\n    this.setState({ hiddenDisconnectAllGatewaysDialog: true });\r\n  }\r\n  private disconnectAllGateways = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.disconnectAllGateways()\r\n    this.closeDisconnectAllGatewaysDialog();\r\n  }\r\n\r\n  private openDisconnectGatewayDialog = (gatewayId: string) => {\r\n    this.setState({ gatewayIdForDisconnect: gatewayId, hiddenDisconnectGatewayDialog: false, });\r\n  }\r\n\r\n  private closeDisconnectGatewayDialog = () => {\r\n    this.setState({ hiddenDisconnectGatewayDialog: true, gatewayIdForDisconnect: '' });\r\n  }\r\n  private disconnectGatewayByGatewayId = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.disconnectGatewayByGatewayId(this.state.gatewayIdForDisconnect)\r\n    this.closeDisconnectGatewayDialog();\r\n  }\r\n\r\n  private openDeleteGatewayDialog = (gatewayId: number) => {\r\n    this.setState({ gatewayIdForDelete: gatewayId, hiddenDeleteGatewayDialog: false });\r\n  }\r\n\r\n  private closeDeleteGatewayDialog = () => {\r\n    this.setState({ hiddenDeleteGatewayDialog: true, gatewayIdForDelete: null });\r\n  }\r\n\r\n  private deleteGatewayByGatewayId = () => {\r\n    const { gatewayStore } = this.props\r\n    gatewayStore.deleteGatewayByGatewayId(this.state.gatewayIdForDelete)\r\n    this.closeDeleteGatewayDialog();\r\n  }\r\n\r\n  private getCommandBarItems = () => {\r\n\r\n    const { gatewayStore } = this.props\r\n    return [\r\n      {\r\n        key: 'add',\r\n        name: '新增',\r\n        iconProps: {\r\n          iconName: 'Add'\r\n        },\r\n        onClick: () => this.openEditGatewayModal(null)\r\n      },\r\n      {\r\n        key: 'refresh',\r\n        name: '刷新',\r\n        iconProps: {\r\n          iconName: 'Refresh'\r\n        },\r\n        onClick: () => gatewayStore.getGatewayList()\r\n      },\r\n      {\r\n        key: 'connectAll',\r\n        name: '全部连接',\r\n        iconProps: {\r\n          iconName: 'PlugConnected'\r\n        },\r\n        onClick: () => this.openConnectAllGatewaysDialog()\r\n      },\r\n      {\r\n        key: 'disconnectAll',\r\n        name: '全部断开',\r\n        iconProps: {\r\n          iconName: 'PlugDisconnected'\r\n        },\r\n        onClick: () => this.openDisconnectAllGatewaysDialog()\r\n      }\r\n    ];\r\n  }\r\n\r\n  private commonHandleFieldChange(id: string, value: any) {\r\n    this.setState({ [id]: value }, () => this.validateAllField())\r\n  }\r\n\r\n\r\n\r\n  private validateEditGatewayName() {\r\n    if (!this.state.editGatewayName || this.state.editGatewayName === '') {\r\n      return { status: false, message: { \"editGatewayNameErrorMessage\": '名称不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayNameErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayTargetNodeId() {\r\n    if (!this.state.editGatewayTargetNodeId || !normalIntegerPattern.test(`${this.state.editGatewayTargetNodeId}`)) {\r\n      return { status: false, message: { \"editGatewayTargetNodeIdErrorMessage\": '目标节点为数字且不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayTargetNodeIdErrorMessage\": '' } }\r\n  }\r\n\r\n\r\n  private validateEditGatewayImplementClassName() {\r\n    if (!this.state.editGatewayImplementClassName || this.state.editGatewayImplementClassName === '') {\r\n      return { status: false, message: { \"editGatewayImplementClassNameErrorMessage\": '实现类不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayImplementClassNameErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingUserId() {\r\n    if (!this.state.editGatewayCtpSettingUserId || this.state.editGatewayCtpSettingUserId === '') {\r\n      return { status: false, message: { \"editGatewayCtpSettingUserIdErrorMessage\": '用户名不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingUserIdErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingBrokerId() {\r\n    if (!this.state.editGatewayCtpSettingBrokerId || this.state.editGatewayCtpSettingBrokerId === '') {\r\n      return { status: false, message: { \"editGatewayCtpSettingBrokerIdErrorMessage\": '用户名不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingBrokerIdErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingPassword() {\r\n    if (!this.state.editGatewayCtpSettingPassword || this.state.editGatewayCtpSettingPassword === '') {\r\n      return { status: false, message: { \"editGatewayCtpSettingPasswordErrorMessage\": '密码不可为空' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingPasswordErrorMessage\": '' } }\r\n  }\r\n\r\n\r\n  private validateEditGatewayCtpSettingMdHost() {\r\n    if (!hostNamePattern.test(this.state.editGatewayCtpSettingMdHost) && !ipv4PattenPattern.test(this.state.editGatewayCtpSettingMdHost)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingMdHostErrorMessage\": '错误的主机' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingMdHostErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingMdPort() {\r\n    if (!portPattern.test(`${this.state.editGatewayCtpSettingMdPort}`)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingMdPortErrorMessage\": '错误的端口' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingMdPortErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingTdHost() {\r\n    if (!hostNamePattern.test(this.state.editGatewayCtpSettingTdHost) && !ipv4PattenPattern.test(this.state.editGatewayCtpSettingTdHost)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingTdHostErrorMessage\": '错误的主机' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingTdHostErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayCtpSettingTdPort() {\r\n    if (!portPattern.test(`${this.state.editGatewayCtpSettingTdPort}`)) {\r\n      return { status: false, message: { \"editGatewayCtpSettingTdPortErrorMessage\": '错误的端口' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayCtpSettingTdPortErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayIbSettingHost() {\r\n    if (!hostNamePattern.test(this.state.editGatewayIbSettingHost) && !ipv4PattenPattern.test(this.state.editGatewayIbSettingHost)) {\r\n      return { status: false, message: { \"editGatewayIbSettingHostErrorMessage\": '错误的主机' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayIbSettingHostErrorMessage\": '' } }\r\n  }\r\n\r\n  private validateEditGatewayIbSettingPort() {\r\n    if (!portPattern.test(`${this.state.editGatewayIbSettingPort}`)) {\r\n      return { status: false, message: { \"editGatewayIbSettingPortErrorMessage\": '错误的端口' } }\r\n    }\r\n    return { status: true, message: { \"editGatewayIbSettingPortErrorMessage\": '' } }\r\n  }\r\n\r\n\r\n\r\n  private validateAllField() {\r\n    let errorMessateState = {}\r\n\r\n    let isValidated = true;\r\n\r\n    let result;\r\n\r\n    result = this.validateEditGatewayName();\r\n    isValidated = isValidated && result.status\r\n    errorMessateState = {\r\n      ...errorMessateState,\r\n      ...result.message\r\n    }\r\n\r\n    result = this.validateEditGatewayTargetNodeId();\r\n    isValidated = isValidated && result.status\r\n    errorMessateState = {\r\n      ...errorMessateState,\r\n      ...result.message\r\n    }\r\n\r\n    result = this.validateEditGatewayImplementClassName();\r\n    isValidated = isValidated && result.status\r\n    errorMessateState = {\r\n      ...errorMessateState,\r\n      ...result.message\r\n    }\r\n\r\n\r\n    // 验证CTP字段\r\n    if (this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_CTP) {\r\n      result = this.validateEditGatewayCtpSettingUserId();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n\r\n      result = this.validateEditGatewayCtpSettingPassword();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n\r\n      result = this.validateEditGatewayCtpSettingBrokerId();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n\r\n\r\n      if (this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_MarketData) {\r\n        result = this.validateEditGatewayCtpSettingMdHost();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n        result = this.validateEditGatewayCtpSettingMdPort();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n      }\r\n\r\n\r\n      if (this.state.editGatewayType === GatewayTypeEnum.GTE_TradeAndMarketData || this.state.editGatewayType === GatewayTypeEnum.GTE_Trade) {\r\n        result = this.validateEditGatewayCtpSettingTdHost();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n        result = this.validateEditGatewayCtpSettingTdPort();\r\n        isValidated = isValidated && result.status\r\n        errorMessateState = {\r\n          ...errorMessateState,\r\n          ...result.message\r\n        }\r\n      }\r\n\r\n      // 验证IB字段\r\n    } else if (this.state.editGatewayAdapterType === GatewayAdapterTypeEnum.GAT_COMMON) {\r\n      result = this.validateEditGatewayIbSettingHost();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n      result = this.validateEditGatewayIbSettingPort();\r\n      isValidated = isValidated && result.status\r\n      errorMessateState = {\r\n        ...errorMessateState,\r\n        ...result.message\r\n      }\r\n    }\r\n\r\n\r\n    this.setState(errorMessateState)\r\n    return isValidated;\r\n  }\r\n\r\n  private openEditGatewayModal(gateway: any) {\r\n    let newState = {}\r\n\r\n\r\n    if (gateway !== undefined && gateway !== null) {\r\n\r\n      newState = {\r\n        ...newState,\r\n        \"editGatewayId\": gateway.gatewayId,\r\n        \"editGatewayName\": gateway.gatewayName,\r\n        \"editGatewayTargetNodeId\": gateway.targetNodeId,\r\n        \"editGatewayDescription\": gateway.gatewayDescription,\r\n        \"editGatewayImplementClassName\": gateway.implementClassName,\r\n        \"editGatewayType\": gateway.gatewayType,\r\n        \"editGatewayAdapterType\": gateway.gatewayAdapterType,\r\n        \"editAutoConnectTimeRanges\": gateway.autoConnectTimeRanges\r\n      }\r\n\r\n      if (gateway.ctpSetting !== undefined && gateway.ctpSetting !== null) {\r\n        newState = {\r\n          ...newState,\r\n          \"editGatewayCtpSettingUserId\": gateway.ctpSetting.userId,\r\n          \"editGatewayCtpSettingPassword\": gateway.ctpSetting.password,\r\n          \"editGatewayCtpSettingMdHost\": gateway.ctpSetting.mdHost,\r\n          \"editGatewayCtpSettingMdPort\": gateway.ctpSetting.mdPort,\r\n          \"editGatewayCtpSettingTdHost\": gateway.ctpSetting.tdHost,\r\n          \"editGatewayCtpSettingTdPort\": gateway.ctpSetting.tdPort,\r\n          \"editGatewayCtpSettingUserProductInfo\": gateway.ctpSetting.userProductInfo,\r\n          \"editGatewayCtpSettingAuthCode\": gateway.ctpSetting.authCode,\r\n          \"editGatewayCtpSettingAppId\": gateway.ctpSetting.appId,\r\n          \"editGatewayCtpSettingBrokerId\": gateway.ctpSetting.brokerId,\r\n        }\r\n      }\r\n\r\n      if (gateway.ibSetting !== undefined && gateway.ibSetting !== null) {\r\n        newState = {\r\n          ...newState,\r\n          \"editGatewayIbSettingClientId\": gateway.ibSetting.clientId,\r\n          \"editGatewayIbSettingHost\": gateway.ibSetting.host,\r\n          \"editGatewayIbSettingPort\": gateway.ibSetting.port,\r\n        }\r\n      }\r\n    }\r\n    newState = {\r\n      ...newState,\r\n      \"showEditGatewayModal\": true,\r\n    }\r\n    this.setState(newState)\r\n\r\n  }\r\n\r\n  private closeEditGatewayModal() {\r\n    this.setState({\r\n      \"showEditGatewayModal\": false,\r\n      // -----------------------------------------\r\n      \"editGatewayId\": '',\r\n      \"editGatewayName\": '',\r\n      \"editGatewayNameErrorMessage\": '',\r\n      \"editGatewayDescription\": '',\r\n      \"editGatewayTargetNodeId\": 10000,\r\n      \"editGatewayTargetNodeIdErrorMessage\": '',\r\n      \"editGatewayImplementClassName\": '',\r\n      \"editGatewayImplementClassNameErrorMessage\": '',\r\n      \"editGatewayType\": 0,\r\n      \"editGatewayAdapterType\": 0,\r\n      \"editAutoConnectTimeRanges\": '',\r\n      \"editGatewayCtpSettingUserId\": '',\r\n      \"editGatewayCtpSettingUserIdErrorMessage\": '',\r\n      \"editGatewayCtpSettingPassword\": '',\r\n      \"editGatewayCtpSettingPasswordErrorMessage\": '',\r\n      \"editGatewayCtpSettingMdHost\": '',\r\n      \"editGatewayCtpSettingMdHostErrorMessage\": '',\r\n      \"editGatewayCtpSettingMdPort\": 0,\r\n      \"editGatewayCtpSettingMdPortErrorMessage\": '',\r\n      \"editGatewayCtpSettingTdHost\": '',\r\n      \"editGatewayCtpSettingTdHostErrorMessage\": '',\r\n      \"editGatewayCtpSettingTdPort\": 0,\r\n      \"editGatewayCtpSettingTdPortErrorMessage\": '',\r\n      \"editGatewayCtpSettingUserProductInfo\": '',\r\n      \"editGatewayCtpSettingAuthCode\": '',\r\n      \"editGatewayCtpSettingAppId\": '',\r\n      \"editGatewayCtpSettingBrokerId\": '',\r\n      'editGatewayCtpSettingBrokerIdErrorMessage': '',\r\n      \"editGatewayIbSettingClientId\": 0,\r\n      \"editGatewayIbSettingHost\": '127.0.0.1',\r\n      \"editGatewayIbSettingHostErrorMessage\": '',\r\n      \"editGatewayIbSettingPort\": 7496,\r\n      \"editGatewayIbSettingPortErrorMessage\": ''\r\n    })\r\n  }\r\n\r\n  private saveEditGateway() {\r\n    if (this.validateAllField()) {\r\n      const gateway = {\r\n        \"gatewayId\": this.state.editGatewayId,\r\n        \"gatewayName\": this.state.editGatewayName,\r\n        \"targetNodeId\": parseInt(`${this.state.editGatewayTargetNodeId}`, 0),\r\n        \"gatewayDescription\": this.state.editGatewayDescription,\r\n        \"implementClassName\": this.state.editGatewayImplementClassName,\r\n        \"gatewayType\": parseInt(`${this.state.editGatewayType}`, 0),\r\n        \"gatewayAdapterType\": parseInt(`${this.state.editGatewayAdapterType}`, 0),\r\n        \"autoConnectTimeRanges\": this.state.editAutoConnectTimeRanges,\r\n        \"ctpSetting\": {\r\n          \"userId\": this.state.editGatewayCtpSettingUserId,\r\n          \"password\": this.state.editGatewayCtpSettingPassword,\r\n          \"mdHost\": this.state.editGatewayCtpSettingMdHost,\r\n          \"mdPort\": parseInt(`${this.state.editGatewayCtpSettingMdPort}`, 0),\r\n          \"tdHost\": this.state.editGatewayCtpSettingTdHost,\r\n          \"tdPort\": parseInt(`${this.state.editGatewayCtpSettingTdPort}`, 0),\r\n          \"userProductInfo\": this.state.editGatewayCtpSettingUserProductInfo,\r\n          \"authCode\": this.state.editGatewayCtpSettingAuthCode,\r\n          \"appId\": this.state.editGatewayCtpSettingAppId,\r\n          \"brokerId\": this.state.editGatewayCtpSettingBrokerId\r\n        },\r\n        \"ibSetting\": {\r\n          \"clientId\": parseInt(`${this.state.editGatewayIbSettingClientId}`, 0),\r\n          \"host\": this.state.editGatewayIbSettingHost,\r\n          \"port\": parseInt(`${this.state.editGatewayIbSettingPort}`, 0),\r\n        }\r\n      }\r\n      this.props.gatewayStore.saveOrUpdateGateway(gateway)\r\n      this.closeEditGatewayModal()\r\n    } else {\r\n      toast.warn(\"请将表单中标红的字段修正后提交\")\r\n    }\r\n  }\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(GatewayPage);","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\r\nimport { withRouter } from 'react-router';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\n\r\n\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const SettingPage = inject('authenticationStore')(observer(class SettingPage extends React.Component<any> {\r\n\r\n  public state = { password: '', newPassword: '' };\r\n\r\n  public render() {\r\n    return (\r\n      <Stack tokens={{ childrenGap: 12 }}>\r\n        <Stack.Item align=\"center\">\r\n          <Separator><div style={{ fontSize: FontSizes.xxLarge }} >退出登录</div></Separator>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnProps}>\r\n              <PrimaryButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"注销\"\r\n                onClick={() => {\r\n                  this.props.authenticationStore.deleteLoginInfo();\r\n                  this.props.authenticationStore.logout()\r\n                  this.props.history.push('/login')\r\n                }}\r\n              />\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Separator><div style={{ fontSize: FontSizes.xxLarge }} >修改密码</div></Separator>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnProps}>\r\n              <TextField label=\"旧密码\" type='password' onChange={this.handlePasswordChange} defaultValue={this.state.password} />\r\n              <TextField label=\"新密码\" type='password' onChange={this.handleNewPasswordChange} defaultValue={this.state.newPassword} />\r\n              <PrimaryButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"修改\"\r\n                onClick={() => {\r\n                  this.props.authenticationStore.changePassword(this.state.password, this.state.newPassword)\r\n                  this.setState({ 'password': '', 'newPassword': '' })\r\n                }}\r\n              />\r\n\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private handlePasswordChange = (event: any) => {\r\n    this.setState({ 'password': event.target.value })\r\n  }\r\n\r\n  private handleNewPasswordChange = (event: any) => {\r\n    this.setState({ 'newPassword': event.target.value })\r\n  }\r\n\r\n}));\r\n\r\nexport default withRouter(SettingPage)\r\n","import * as React from 'react';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { PrimaryButton, ActionButton, DefaultButton } from '@fluentui/react/lib/Button';\r\nimport { withRouter, Redirect } from 'react-router';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const LoginPage = inject('authenticationStore')(observer(class LoginPage extends React.Component<any> {\r\n\r\n  public state = {\r\n    redirectToPah: \"/trade/home\"\r\n  }\r\n\r\n  public render() {\r\n    const { authenticationStore } = this.props;\r\n\r\n    if (authenticationStore.isAuthenticated) {\r\n      return (\r\n        <Redirect to={this.state.redirectToPah} />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Stack tokens={{ childrenGap: 12 }}>\r\n\r\n        <Stack.Item align=\"center\">\r\n          <Separator><div style={{ fontSize: FontSizes.xxLarge }} >RedTorch</div></Separator>\r\n        </Stack.Item>\r\n        <Stack.Item align=\"center\">\r\n          <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnProps}>\r\n              <TextField label=\"用户名\" id=\"useranme\" value={authenticationStore.username} onChange={this.handleUsernameChange} />\r\n              <TextField label=\"密码\" type='password' id=\"password\" value={authenticationStore.password} onChange={this.handlePasswordChange} />\r\n              <Checkbox label=\"保存登录信息(非常不安全)\" checked={authenticationStore.saveLoginInfoState} onChange={this.handleSaveLoginInfoChange} />\r\n              <PrimaryButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"登录交易(PC)\"\r\n                onClick={() => {\r\n                  this.props.authenticationStore.login()\r\n                }}\r\n              />\r\n              <DefaultButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"登录交易(移动端)\"\r\n                onClick={() => {\r\n                  this.setState({ \"redirectToPah\": \"/tradeMobile/home\" })\r\n                  this.props.authenticationStore.login()\r\n                }}\r\n              />\r\n              <DefaultButton\r\n                allowDisabledFocus={true}\r\n                disabled={false}\r\n                checked={false}\r\n                text=\"登录管理\"\r\n                onClick={() => {\r\n                  this.setState({ \"redirectToPah\": \"/management/gateway\" })\r\n                  this.props.authenticationStore.login()\r\n                }}\r\n              />\r\n              <div>\r\n                <ActionButton\r\n                  style={{ float: \"left\" }}\r\n                  iconProps={{ iconName: 'Delete' }}\r\n                  allowDisabledFocus={true}\r\n                  disabled={false}\r\n                  checked={false}\r\n                  onClick={() => {\r\n                    authenticationStore.deleteLoginInfo()\r\n                  }}\r\n                >\r\n                  清除登录信息\r\n                </ActionButton>\r\n              </div>\r\n\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private handleUsernameChange = (event: any) => {\r\n    const { authenticationStore } = this.props\r\n    authenticationStore.setUsername(event.target.value)\r\n  }\r\n\r\n  private handlePasswordChange = (event: any) => {\r\n    const { authenticationStore } = this.props\r\n    authenticationStore.setPassword(event.target.value)\r\n  }\r\n\r\n  private handleSaveLoginInfoChange = (event: any) => {\r\n    const { authenticationStore } = this.props\r\n    authenticationStore.setSaveLoginInfoState(event.currentTarget.checked)\r\n  }\r\n\r\n\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(LoginPage)\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { createTheme, ITheme } from '@fluentui/react/lib/Styling';\r\nimport { mergeStyleSets, DefaultPalette } from '@fluentui/react/lib/Styling';\r\nimport { Redirect } from 'react-router-dom';\r\nconst theme: ITheme = createTheme({\r\n  fonts: {\r\n    medium: {\r\n      fontFamily: 'Monaco, Menlo, Consolas',\r\n      fontSize: '30px'\r\n    }\r\n  }\r\n});\r\n\r\nconst styles = mergeStyleSets({\r\n  root: {\r\n    background: DefaultPalette.themeTertiary\r\n  },\r\n\r\n  item: {\r\n    color: DefaultPalette.white,\r\n    background: DefaultPalette.themePrimary,\r\n    padding: 5\r\n  }\r\n});\r\n\r\nconst NotFoundPage = observer((synchronizedHistory:any) => {\r\n  console.log(synchronizedHistory)\r\n  const { history } =  synchronizedHistory;\r\n  console.log(history)\r\n\r\n  if (history.location.pathname === '/') {\r\n    return (<Redirect to={{\r\n      pathname: '/trade/home',\r\n    }} />)\r\n  }\r\n\r\n  return (\r\n    <Stack tokens={{ childrenGap: 12 }}>\r\n      <Separator theme={theme}>404 所请求的页面不存在或已被删除!</Separator>\r\n      <Stack.Item align=\"center\" className={styles.item}>\r\n        <PrimaryButton\r\n          allowDisabledFocus={true}\r\n          disabled={false}\r\n          checked={false}\r\n          text=\"返回主页\"\r\n          onClick={() => { history.push('/trade/home') }}\r\n        />\r\n      </Stack.Item>\r\n    </Stack>\r\n  )\r\n})\r\n\r\nexport default NotFoundPage","import * as React from 'react';\r\n// import * as ReactDOM from 'react-dom';\r\nimport { inject, observer } from 'mobx-react';\r\n// import { counterStore, routingStore } from '../stores'\r\n// import { TextField, MaskedTextField } from '@fluentui/react/lib/TextField';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\r\nimport { withRouter } from 'react-router';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, IColumn, IDetailsHeaderProps, ConstrainMode, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { PrimaryButton, DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { Separator } from '@fluentui/react/lib/Separator';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { toast } from 'react-toastify';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nexport const UserPage = inject('userStore')(observer(class UserPage extends React.Component<any> {\r\n\r\n  public state = {\r\n    hiddenDeleteUserDialog: true,\r\n    usernameForDelete: null,\r\n    editUserDescription: '',\r\n    editUsername: \"\",\r\n    editUserPassword: null,\r\n    editCanReadGateway: false,\r\n    editCanChangeGatewayStatus: false,\r\n    editCanWriteGateway: false,\r\n    editCanReadUser: false,\r\n    editCanChangeUserStatus: false,\r\n    editCanWriteUser: false,\r\n    editCanReadOperator: false,\r\n    editCanChangeOperatorStatus: false,\r\n    editCanWriteOperator: false,\r\n    editCanReadNode: false,\r\n    editCanChangeNodeToken: false,\r\n    editCanWriteNode: false,\r\n    editCanReadLog: false,\r\n    editCanReadMarketDataRecording: false,\r\n    editCanWriteMarketDataRecording: false,\r\n    showUpdateUserDescriptionModal: false,\r\n    showUpdateUserPasswordModal: false,\r\n    showEditPermissionModal: false,\r\n    showAddUserModal: false,\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n\r\n    const { userStore } = this.props\r\n\r\n    userStore.getUserList()\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n\r\n  public render() {\r\n\r\n    // const { routes, location } = this.props;\r\n\r\n    const columns: IColumn[] = [{\r\n      key: \"username\",\r\n      name: \"用户名\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.username}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"operatorId\",\r\n      name: \"操作者ID\",\r\n      minWidth: 250,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.operatorId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"description\",\r\n      name: \"描述\",\r\n      minWidth: 200,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.description}</span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: \"loginTimes\",\r\n      name: \"登录次数\",\r\n      minWidth: 50,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.loginTimes}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyNodeId\",\r\n      name: \"最近的节点ID\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyNodeId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlySessionId\",\r\n      name: \"最近的会话ID\",\r\n      minWidth: 250,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlySessionId}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyIpAddress\",\r\n      name: \"最近的IP地址\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyIpAddress}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyPort\",\r\n      name: \"最近的端口\",\r\n      minWidth: 60,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'number',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyPort}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLoginTime\",\r\n      name: \"最近的登录时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLoginTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"recentlyLogoutTime\",\r\n      name: \"最近的断开时间\",\r\n      minWidth: 100,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      data: 'string',\r\n      onRender: (item) => {\r\n        return (\r\n          <span>{item.recentlyLogoutTime}</span>\r\n        );\r\n      }\r\n    }, {\r\n      key: \"action\",\r\n      name: \"操作\",\r\n      minWidth: 30,\r\n      isResizable: true,\r\n      isCollapsible: true,\r\n      onRender: (item) => {\r\n        return (\r\n          <IconButton\r\n            menuIconProps={{ iconName: 'MoreVertical' }}\r\n            role=\"button\"\r\n            aria-haspopup={true}\r\n            aria-label=\"Show actions\"\r\n            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n            menuProps={{\r\n              items: [\r\n                {\r\n                  key: 'editPermission',\r\n                  text: '更新权限',\r\n                  iconProps: {\r\n                    iconName: \"Shield\"\r\n                  },\r\n                  onClick: () => this.openEditPermissionModal(item)\r\n                },\r\n                {\r\n                  key: 'updateUserPassword',\r\n                  text: '更新密码',\r\n                  iconProps: {\r\n                    iconName: \"AzureKeyVault\"\r\n                  },\r\n                  onClick: () => this.openUpdateUserPasswordModal(item.username)\r\n                },\r\n                {\r\n                  key: 'updateDescription',\r\n                  text: '更新描述',\r\n                  iconProps: {\r\n                    iconName: \"EditNote\"\r\n                  },\r\n                  onClick: () => this.openUpdateUserDescriptionModal(item.username, item.description)\r\n                },\r\n                {\r\n                  key: 'delete',\r\n                  text: '删除',\r\n                  iconProps: {\r\n                    iconName: \"DeleteRows\"\r\n                  },\r\n                  onClick: () => this.openDeleteUserDialog(item.username)\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    ]\r\n\r\n    const { userStore } = this.props\r\n    const classNames = mergeStyleSets({\r\n      wrapper: {\r\n        height: `${this.state.windowInnerHeight - 81}px`,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Stack>\r\n        <Stack>\r\n          <CommandBar\r\n            items={this.getCommandBarItems()}\r\n          // 以下功能可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n          // overflowItems={this.getOverlflowItems()}\r\n          // overflowButtonProps={{ ariaLabel: 'More commands' }}\r\n          // farItems={this.getFarItems()}\r\n          // ariaLabel={'Use left and right arrow keys to navigate between commands'}\r\n          />\r\n          <div className={classNames.wrapper}>\r\n            <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n              <DetailsList\r\n                // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                items={userStore.userList}\r\n                compact={true}\r\n                columns={columns}\r\n                selectionMode={SelectionMode.none}\r\n                setKey=\"id\"\r\n                layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                constrainMode={ConstrainMode.unconstrained}\r\n                // data-is-scrollable={true}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsHeader={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                      <DetailsHeader\r\n                        {...detailsHeaderProps}\r\n                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                      />\r\n                      {/* {defaultRender(detailsHeaderProps)} */}\r\n                    </Sticky>\r\n                  )}\r\n\r\n                // @ts-ignore\r\n                onRenderDetailsFooter={\r\n                  // tslint:disable-next-line:jsx-no-lambda\r\n                  (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                      {defaultRender(detailsFooterProps)}\r\n                    </Sticky>\r\n                  )}\r\n              />\r\n            </ScrollablePane>\r\n          </div>\r\n        </Stack>\r\n\r\n        <Modal\r\n          isOpen={this.state.showAddUserModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeAddUserModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >新增用户</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Separator><div style={{ fontSize: FontSizes.medium }} >基本信息</div></Separator>\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"用户名\" onChange={(event: any) => { this.commonHandleFieldChange(\"editUsername\", event.target.value) }} />\r\n                  <TextField label=\"密码\" type=\"password\" onChange={(event: any, newValue?: string) => this.editUserPasswordOnChange(event)} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"用户描述\" multiline={true} resizable={true} onChange={(event: any, newValue?: string) => this.editUserDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Separator><div style={{ fontSize: FontSizes.medium }} >用户权限</div></Separator>\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"读取网关\" checked={this.state.editCanReadGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入网关\" checked={this.state.editCanWriteGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入用户\" checked={this.state.editCanWriteUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入操作者\" checked={this.state.editCanWriteOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"更改节点令牌\" checked={this.state.editCanChangeNodeToken} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeNodeToken\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取日志\" checked={this.state.editCanReadLog} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadLog\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入行情记录列表\" checked={this.state.editCanWriteMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"更改网关状态\" checked={this.state.editCanChangeGatewayStatus} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeGatewayStatus\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取用户\" checked={this.state.editCanReadUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取操作者\" checked={this.state.editCanReadOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取节点\" checked={this.state.editCanReadNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入节点\" checked={this.state.editCanWriteNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取行情记录列表\" checked={this.state.editCanReadMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.addUser()} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeAddUserModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Modal\r\n          isOpen={this.state.showEditPermissionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeEditPermissionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >更新用户权限</div></Separator>\r\n              <Separator><div style={{ fontSize: FontSizes.medium }} >{this.state.editUsername}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"读取网关\" checked={this.state.editCanReadGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入网关\" checked={this.state.editCanWriteGateway} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteGateway\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入用户\" checked={this.state.editCanWriteUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入操作者\" checked={this.state.editCanWriteOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"更改节点令牌\" checked={this.state.editCanChangeNodeToken} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeNodeToken\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取日志\" checked={this.state.editCanReadLog} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadLog\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入行情记录列表\" checked={this.state.editCanWriteMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <Checkbox label=\"更改网关状态\" checked={this.state.editCanChangeGatewayStatus} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanChangeGatewayStatus\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取用户\" checked={this.state.editCanReadUser} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadUser\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取操作者\" checked={this.state.editCanReadOperator} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadOperator\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取节点\" checked={this.state.editCanReadNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"写入节点\" checked={this.state.editCanWriteNode} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanWriteNode\", event.currentTarget.checked) }} />\r\n                  <Checkbox label=\"读取行情记录列表\" checked={this.state.editCanReadMarketDataRecording} onChange={(event: any) => { this.commonHandleFieldChange(\"editCanReadMarketDataRecording\", event.currentTarget.checked) }} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateUserPermissionByUsername()} />\r\n                </Stack>\r\n                <Stack {...columnProps}>\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeEditPermissionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteUserDialog}\r\n          onDismiss={() => this.closeDeleteUserDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除用户提示',\r\n            subText: `确认删除用户？ID:${this.state.usernameForDelete},此操作将断开当前ID存在的会话`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 450 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteUserByUsername()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteUserDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateUserDescriptionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateUserDescriptionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >更新用户描述</div></Separator>\r\n              <Separator><div style={{ fontSize: FontSizes.medium }} >{this.state.editUsername}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"用户描述\" multiline={true} resizable={true} defaultValue={this.state.editUserDescription ? this.state.editUserDescription : \"\"} onChange={(event: any, newValue?: string) => this.editUserDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateUserDescriptionByUsername()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateUserDescriptionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateUserPasswordModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateUserPasswordModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Separator><div style={{ fontSize: FontSizes.xxLarge }} >更新用户密码</div></Separator>\r\n              <Separator><div style={{ fontSize: FontSizes.medium }} >{this.state.editUsername}</div></Separator>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"新密码\" type=\"password\" onChange={(event: any, newValue?: string) => this.editUserPasswordOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateUserPasswordByUsername()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateUserPasswordModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n\r\n  private commonHandleFieldChange(id: string, value: any) {\r\n    this.setState({ [id]: value })\r\n  }\r\n\r\n  private openAddUserModal = () => {\r\n    this.setState({\r\n      showAddUserModal: true,\r\n      editUsername: '',\r\n      editUserPassword: \"\",\r\n      editUserDescription: \"\",\r\n      editCanReadGateway: false,\r\n      editCanChangeGatewayStatus: false,\r\n      editCanWriteGateway: false,\r\n      editCanReadUser: false,\r\n      editCanChangeUserStatus: false,\r\n      editCanWriteUser: false,\r\n      editCanReadOperator: false,\r\n      editCanChangeOperatorStatus: false,\r\n      editCanWriteOperator: false,\r\n      editCanReadNode: false,\r\n      editCanChangeNodeToken: false,\r\n      editCanWriteNode: false,\r\n      editCanReadLog: false,\r\n      editCanReadMarketDataRecording: false,\r\n      editCanWriteMarketDataRecording: false\r\n    });\r\n  }\r\n\r\n  private closeAddUserModal = () => {\r\n    this.setState({\r\n      showAddUserModal: false,\r\n      editUsername: '',\r\n      editUserPassword: \"\",\r\n      editUserDescription: \"\",\r\n      editCanReadGateway: false,\r\n      editCanChangeGatewayStatus: false,\r\n      editCanWriteGateway: false,\r\n      editCanReadUser: false,\r\n      editCanChangeUserStatus: false,\r\n      editCanWriteUser: false,\r\n      editCanReadOperator: false,\r\n      editCanChangeOperatorStatus: false,\r\n      editCanWriteOperator: false,\r\n      editCanReadNode: false,\r\n      editCanChangeNodeToken: false,\r\n      editCanWriteNode: false,\r\n      editCanReadLog: false,\r\n      editCanReadMarketDataRecording: false,\r\n      editCanWriteMarketDataRecording: false\r\n    });\r\n  }\r\n\r\n  private addUser = () => {\r\n\r\n    const { userStore } = this.props;\r\n\r\n    if (!this.state.editUsername || this.state.editUsername === \"\") {\r\n      toast.error(\"用户名不可为空\");\r\n      return;\r\n    }\r\n\r\n    if (!this.state.editUserPassword || this.state.editUserPassword === \"\") {\r\n      toast.error(\"密码不可为空\");\r\n      return;\r\n    }\r\n\r\n    let checked = true;\r\n    if (userStore.userList) {\r\n      userStore.userList.forEach((element: any) => {\r\n        if (element.username === this.state.editUsername) {\r\n          checked = false;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!checked) {\r\n      toast.error(\"用户名不可重复\");\r\n      return;\r\n    }\r\n\r\n    const user = {\r\n      username: this.state.editUsername,\r\n      newPassword: this.state.editUserPassword,\r\n      description: this.state.editUserDescription,\r\n      canReadGateway: this.state.editCanReadGateway,\r\n      canChangeGatewayStatus: this.state.editCanChangeGatewayStatus,\r\n      canWriteGateway: this.state.editCanWriteGateway,\r\n      canReadUser: this.state.editCanReadUser,\r\n      canChangeUserStatus: this.state.editCanChangeUserStatus,\r\n      canWriteUser: this.state.editCanWriteUser,\r\n      canReadOperator: this.state.editCanReadOperator,\r\n      canChangeOperatorStatus: this.state.editCanChangeOperatorStatus,\r\n      canWriteOperator: this.state.editCanWriteOperator,\r\n      canReadNode: this.state.editCanReadNode,\r\n      canChangeNodeToken: this.state.editCanChangeNodeToken,\r\n      canWriteNode: this.state.editCanWriteNode,\r\n      canReadLog: this.state.editCanReadLog,\r\n      canReadMarketDataRecording: this.state.editCanReadMarketDataRecording,\r\n      canWriteMarketDataRecording: this.state.editCanWriteMarketDataRecording\r\n    }\r\n\r\n    userStore.addUser(user)\r\n    this.closeAddUserModal()\r\n  }\r\n\r\n\r\n  private openEditPermissionModal = (user: any) => {\r\n    this.setState({\r\n      showEditPermissionModal: true,\r\n      editUsername: user.username,\r\n      editCanReadGateway: user.canReadGateway ? true : false,\r\n      editCanChangeGatewayStatus: user.canChangeGatewayStatus ? true : false,\r\n      editCanWriteGateway: user.canWriteGateway ? true : false,\r\n      editCanReadUser: user.canReadUser ? true : false,\r\n      editCanChangeUserStatus: user.canChangeUserStatus ? true : false,\r\n      editCanWriteUser: user.canWriteUser ? true : false,\r\n      editCanReadOperator: user.canReadOperator ? true : false,\r\n      editCanChangeOperatorStatus: user.canChangeOperatorStatus ? true : false,\r\n      editCanWriteOperator: user.canWriteOperator ? true : false,\r\n      editCanReadNode: user.canReadNode ? true : false,\r\n      editCanChangeNodeToken: user.canChangeNodeToken ? true : false,\r\n      editCanWriteNode: user.canWriteNode ? true : false,\r\n      editCanReadLog: user.canReadLog ? true : false,\r\n      editCanReadMarketDataRecording: user.canReadMarketDataRecording ? true : false,\r\n      editCanWriteMarketDataRecording: user.canWriteMarketDataRecording ? true : false\r\n    });\r\n  }\r\n\r\n  private closeEditPermissionModal = () => {\r\n    this.setState({\r\n      showEditPermissionModal: false,\r\n      editUsername: '',\r\n      editCanReadGateway: false,\r\n      editCanChangeGatewayStatus: false,\r\n      editCanWriteGateway: false,\r\n      editCanReadUser: false,\r\n      editCanChangeUserStatus: false,\r\n      editCanWriteUser: false,\r\n      editCanReadOperator: false,\r\n      editCanChangeOperatorStatus: false,\r\n      editCanWriteOperator: false,\r\n      editCanReadNode: false,\r\n      editCanChangeNodeToken: false,\r\n      editCanWriteNode: false,\r\n      editCanReadLog: false,\r\n      editCanReadMarketDataRecording: false,\r\n      editCanWriteMarketDataRecording: false\r\n    });\r\n  }\r\n\r\n  private updateUserPermissionByUsername = () => {\r\n    const user = {\r\n      username: this.state.editUsername,\r\n      canReadGateway: this.state.editCanReadGateway,\r\n      canChangeGatewayStatus: this.state.editCanChangeGatewayStatus,\r\n      canWriteGateway: this.state.editCanWriteGateway,\r\n      canReadUser: this.state.editCanReadUser,\r\n      canChangeUserStatus: this.state.editCanChangeUserStatus,\r\n      canWriteUser: this.state.editCanWriteUser,\r\n      canReadOperator: this.state.editCanReadOperator,\r\n      canChangeOperatorStatus: this.state.editCanChangeOperatorStatus,\r\n      canWriteOperator: this.state.editCanWriteOperator,\r\n      canReadNode: this.state.editCanReadNode,\r\n      canChangeNodeToken: this.state.editCanChangeNodeToken,\r\n      canWriteNode: this.state.editCanWriteNode,\r\n      canReadLog: this.state.editCanReadLog,\r\n      canReadMarketDataRecording: this.state.editCanReadMarketDataRecording,\r\n      canWriteMarketDataRecording: this.state.editCanWriteMarketDataRecording\r\n    }\r\n    this.props.userStore.updateUserPermissionByUsername(user)\r\n    this.closeEditPermissionModal()\r\n  }\r\n\r\n  private openDeleteUserDialog = (username: number) => {\r\n    this.setState({ usernameForDelete: username, hiddenDeleteUserDialog: false });\r\n  }\r\n\r\n  private closeDeleteUserDialog = () => {\r\n    this.setState({ hiddenDeleteUserDialog: true, usernameForDelete: null });\r\n  }\r\n\r\n  private deleteUserByUsername = () => {\r\n    const { userStore } = this.props\r\n    userStore.deleteUserByUsername(this.state.usernameForDelete)\r\n    this.closeDeleteUserDialog();\r\n  }\r\n\r\n  private openUpdateUserPasswordModal = (username: string) => {\r\n    this.setState({ editUsername: username, showUpdateUserPasswordModal: true });\r\n  }\r\n\r\n  private closeUpdateUserPasswordModal = () => {\r\n    this.setState({ showUpdateUserPasswordModal: false, editUsername: null, editUserPassword: '' });\r\n  }\r\n\r\n  private updateUserPasswordByUsername = () => {\r\n    this.props.userStore.updateUserPasswordByUsername(this.state.editUsername, this.state.editUserPassword)\r\n    this.closeUpdateUserPasswordModal();\r\n  }\r\n\r\n  private openUpdateUserDescriptionModal = (username: string, description: string) => {\r\n    this.setState({ editUsername: username, editUserDescription: description, showUpdateUserDescriptionModal: true });\r\n  }\r\n\r\n  private closeUpdateUserDescriptionModal = () => {\r\n    this.setState({ showUpdateUserDescriptionModal: false, editUsername: null, editUserDescription: '' });\r\n  }\r\n\r\n  private updateUserDescriptionByUsername = () => {\r\n    this.props.userStore.updateUserDescriptionByUsername(this.state.editUsername, this.state.editUserDescription)\r\n    this.closeUpdateUserDescriptionModal();\r\n  }\r\n\r\n  private editUserDescriptionOnChange(event: any) {\r\n    this.setState({ editUserDescription: event.target.value })\r\n  }\r\n\r\n  private editUserPasswordOnChange(event: any) {\r\n    this.setState({ editUserPassword: event.target.value })\r\n  }\r\n\r\n  private getCommandBarItems = () => {\r\n\r\n    const { userStore } = this.props\r\n    return [\r\n      {\r\n        key: 'add',\r\n        name: '新增',\r\n        iconProps: {\r\n          iconName: 'Add'\r\n        },\r\n        onClick: () => this.openAddUserModal()\r\n      },\r\n      {\r\n        key: 'refresh',\r\n        name: '刷新',\r\n        iconProps: {\r\n          iconName: 'Refresh'\r\n        },\r\n        onClick: () => userStore.getUserList()\r\n      }\r\n    ];\r\n  };\r\n\r\n  // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 以下可扩展开发 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\r\n  // private getOverlflowItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'blocked',\r\n  //       name: '禁用',\r\n  //       iconProps: {\r\n  //         iconName: 'Blocked'\r\n  //       },\r\n  //       onClick: () => console.log('禁用')\r\n  //     },\r\n  //     {\r\n  //       key: 'delete',\r\n  //       name: '删除',\r\n  //       iconProps: {\r\n  //         iconName: 'DeleteTable'\r\n  //       },\r\n  //       onClick: () => console.log('Share')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // private getFarItems = () => {\r\n  //   return [\r\n  //     {\r\n  //       key: 'sort',\r\n  //       name: 'Sort',\r\n  //       ariaLabel: 'Sort',\r\n  //       iconProps: {\r\n  //         iconName: 'SortLines'\r\n  //       },\r\n  //       subMenuProps: {\r\n  //         items: [\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据ID',\r\n  //           },\r\n  //           {\r\n  //             key: 'sortById',\r\n  //             name: '根据状态',\r\n  //           }\r\n  //         ]\r\n  //       },\r\n  //       onClick: () => console.log('Sort')\r\n  //     },\r\n  //     {\r\n  //       key: 'info',\r\n  //       name: 'Info',\r\n  //       ariaLabel: 'Info',\r\n  //       iconProps: {\r\n  //         iconName: 'Info'\r\n  //       },\r\n  //       iconOnly: true,\r\n  //       onClick: () => console.log('Info')\r\n  //     }\r\n  //   ];\r\n  // };\r\n\r\n  // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\r\n\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(UserPage);","import * as React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\n\r\nconst RedirectToManagementPage = observer(() => (\r\n  <Redirect to=\"/management/gateway\" />\r\n))\r\n\r\nexport default RedirectToManagementPage\r\n\r\nexport { RedirectToManagementPage }","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst RedirectToTradeMobilePage = observer(() => (\r\n  <Redirect to=\"/tradeMobile/home\" />\r\n))\r\n\r\nexport default RedirectToTradeMobilePage\r\n\r\nexport { RedirectToTradeMobilePage }","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst RedirectToTradePage = observer(() => (\r\n  <Redirect to=\"/trade/home\" />\r\n))\r\n\r\nexport default RedirectToTradePage\r\n\r\nexport { RedirectToTradePage }","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, Selection, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { MarqueeSelection } from '@fluentui/react/lib/MarqueeSelection';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { numberFormat } from '../../../utils';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { CurrencyEnum } = xyz.redtorch.pb\r\n\r\nexport const AccountDetailsPage = inject('authenticationStore', 'tradeAccountStore', 'tradePositionStore')(observer(class AccountDetailsPage extends React.Component<any> {\r\n\r\n    public componentDidMount = () => {\r\n        const { tradeAccountStore } = this.props;\r\n        tradeAccountStore.setSelectedAccountIdSet(new Set());\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { tradeAccountStore, tradePositionStore } = this.props;\r\n\r\n        const {\r\n            allBalance,\r\n            allPreBalance,\r\n            allCloseProfit,\r\n            allTodayProfit,\r\n            allPositionProfit,\r\n            allMargin,\r\n            allCommission,\r\n            allDepositAndWithdraw\r\n        } = tradeAccountStore.summaryMap.get(\"CNY\")\r\n\r\n        const {\r\n            allContractValue,\r\n            allOpenPositionProfit\r\n        } = tradePositionStore.summaryMap.get(\"CNY\")\r\n\r\n        let accountList: any[] = []\r\n        if (tradeAccountStore.accountList) {\r\n            accountList = tradeAccountStore.accountList\r\n        }\r\n\r\n        const handleAccountSelectionChange = (pAccountSelection: Selection) => {\r\n            const selectedAccountIdSet = new Set();\r\n\r\n            const selectionList: any[] = pAccountSelection.getSelection();\r\n            for (let i = 0; i < selectionList.length; i++) {\r\n                selectedAccountIdSet.add(selectionList[i].accountId);\r\n            }\r\n\r\n            tradeAccountStore.setSelectedAccountIdSet(selectedAccountIdSet);\r\n        }\r\n\r\n        const accountSelection: Selection = new Selection({\r\n            onSelectionChanged: () => {\r\n                handleAccountSelectionChange(accountSelection)\r\n            }\r\n        });\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 71}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [{\r\n            key: \"code\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                return (\r\n                    <TooltipHost\r\n                        calloutProps={{ gapSpace: 20 }}\r\n                        tooltipProps={{\r\n                            onRenderContent: () => {                                                  \r\n                                return (\r\n                                    <div>\r\n                                        <ul style={{ margin: 0, padding: 0 }}>\r\n                                            <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                        </ul>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        }}\r\n                        delay={TooltipDelay.long}\r\n                        directionalHint={DirectionalHint.bottomCenter}\r\n                    >\r\n                        <span>{item.code}</span>\r\n                    </TooltipHost>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"holder\",\r\n            name: \"持有人\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.holder}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"currency\",\r\n            name: \"币种\",\r\n            minWidth: 40,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{CurrencyEnum[item.currency]}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"balance\",\r\n            name: \"权益\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let styleClasses = \"\"\r\n                const todayProfit = item.balance - item.preBalance + item.withdraw - item.deposit;\r\n                if (todayProfit !== 0) {\r\n                    if (todayProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n                return (\r\n                    <span className={styleClasses}>{numberFormat(item.balance, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"available\",\r\n            name: \"可用\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.available, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"marginRate\",\r\n            name: \"使用率\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let marginRate = \"0.00\";\r\n                if (item.margin && item.balance && item.balance !== 0) {\r\n                    marginRate = numberFormat(item.margin / item.balance * 100, 2, true)\r\n                }\r\n\r\n                return (\r\n                    <span>{marginRate}%</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"todayProfit\",\r\n            name: \"今日盈亏\",\r\n            minWidth: 95,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                const todayProfit = (item.balance - item.preBalance + item.withdraw - item.deposit);\r\n                let styleClasses = \"\";\r\n                if (todayProfit && todayProfit !== 0) {\r\n                    if (todayProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    <div><span className={styleClasses} >{numberFormat(todayProfit, 2, true)}</span>  ({numberFormat(todayProfit / item.preBalance * 100, 2, true)}%)</div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"closeProfit\",\r\n            name: \"平仓盈亏\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let styleClasses = \"\"\r\n                if (item.closeProfit !== 0) {\r\n                    if (item.closeProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    <span className={styleClasses} >{numberFormat(item.closeProfit, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"positionProfit\",\r\n            name: \"持仓盈亏\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let styleClasses = \"\"\r\n                if (item.positionProfit !== 0) {\r\n                    if (item.positionProfit > 0) {\r\n                        styleClasses = \"trade-long-color\"\r\n                    } else {\r\n                        styleClasses = \"trade-short-color\"\r\n                    }\r\n                }\r\n                return (\r\n                    <span className={styleClasses}>{numberFormat(item.positionProfit, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"margin\",\r\n            name: \"保证金\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.margin, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"preBalance\",\r\n            name: \"昨日权益\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.preBalance, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"commission\",\r\n            name: \"佣金\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.commission, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"deposit\",\r\n            name: \"入金\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.deposit, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"withdraw\",\r\n            name: \"出金\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.withdraw, 2, true)}</span>\r\n                );\r\n            }\r\n        }\r\n\r\n        ]\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 69, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\" } }}>\r\n                                        今日盈亏(率)：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allTodayProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allTodayProfit, 2, true)} ({numberFormat(allTodayProfit / allPreBalance * 100, 2, true)}%)</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allTodayProfit, 2, true)} ({numberFormat(allTodayProfit / allPreBalance * 100, 2, true)}%)</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit === 0 ?\r\n                                                <span>{numberFormat(allTodayProfit, 2, true)} ({numberFormat(allTodayProfit / allPreBalance * 100, 2, true)}%)</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        盯市持仓盈亏：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allPositionProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allPositionProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allPositionProfit === 0 ?\r\n                                                <span>{numberFormat(allPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        盯市平仓盈亏：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allCloseProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allCloseProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allCloseProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allCloseProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allCloseProfit === 0 ?\r\n                                                <span>{numberFormat(allCloseProfit, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\" } }}>\r\n                                        资金：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allTodayProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allBalance, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allBalance, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allTodayProfit === 0 ?\r\n                                                <span>{numberFormat(allBalance, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        保证金(率)：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allMargin, 2, true)} ({numberFormat(allMargin / allBalance * 100, 2, true)}%)\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        合约价值：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allContractValue, 2, true)}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\" } }}>\r\n                                        持仓盈亏：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {\r\n                                            allOpenPositionProfit > 0 ?\r\n                                                <span className=\"trade-long-color\">{numberFormat(allOpenPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allOpenPositionProfit < 0 ?\r\n                                                <span className=\"trade-short-color\">{numberFormat(allOpenPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                        {\r\n                                            allOpenPositionProfit === 0 ?\r\n                                                <span>{numberFormat(allOpenPositionProfit, 2, true)}</span> : null\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        佣金：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allCommission, 2, true)}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\", textAlign: \"right\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        出入金：\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"16%\", whiteSpace: \"nowrap\" } }}>\r\n                                        {numberFormat(allDepositAndWithdraw, 2, true)}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <MarqueeSelection selection={accountSelection}>\r\n                                        <DetailsList\r\n                                            items={accountList}\r\n                                            compact={true}\r\n                                            columns={columns}\r\n                                            selectionMode={SelectionMode.multiple}\r\n                                            setKey=\"accountId\"\r\n                                            layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                            constrainMode={ConstrainMode.unconstrained}\r\n                                            selection={accountSelection}\r\n                                            selectionPreservedOnEmptyClick={true}\r\n                               \r\n                                            // data-is-scrollable={true}\r\n\r\n                                            // @ts-ignore\r\n                                            onRenderDetailsHeader={\r\n                                                // tslint:disable-next-line:jsx-no-lambda\r\n                                                (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                        <DetailsHeader\r\n                                                            {...detailsHeaderProps}\r\n                                                            styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                            // onRenderDetailsCheckbox={\r\n                                                            //     ()=> {\r\n                                                            //         const styles = {\r\n                                                            //             checkbox: {\r\n                                                            //                 width: \"16px\",\r\n                                                            //                 height: \"16px\"\r\n                                                            //             }\r\n                                                            //         }\r\n                                                            //         return <Checkbox styles={styles}/>\r\n                                                            //     }\r\n                                                            // }\r\n                                                        />\r\n                                                        {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                    </Sticky>\r\n                                                )}\r\n                                                \r\n                                            // @ts-ignore\r\n                                            onRenderDetailsFooter={\r\n                                                // tslint:disable-next-line:jsx-no-lambda\r\n                                                (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                    <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                        {defaultRender(detailsFooterProps)}\r\n                                                    </Sticky>\r\n                                                )}\r\n                                        />\r\n                                    </MarqueeSelection>\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(AccountDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, SelectionMode, IColumn, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { numberFormat, deepCopy } from '../../../utils';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { IconButton } from '@fluentui/react/lib/Button';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { isNumber } from 'util';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { PositionDirectionEnum, ExchangeEnum, ProductClassEnum, CurrencyEnum, HedgeFlagEnum} = xyz.redtorch.pb\r\n\r\n\r\nconst tableLabelStyls: React.CSSProperties = { display: 'inline-block', width: 27, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\nexport const PositionDetailsPage = inject('authenticationStore', \"tradeAccountStore\", \"tradePositionStore\", \"tradeActionStore\")(observer(class PositionDetailsPage extends React.Component<any> {\r\n\r\n    public state = { showMerged: false, showEmpty: true };\r\n\r\n    public render() {\r\n\r\n        const { componentHeight, tradePositionStore, tradeAccountStore, tradeActionStore } = this.props;\r\n\r\n        const { accountMap } = tradeAccountStore;\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let positionList: any[] = []\r\n        const tradePositionStorePositionList = tradePositionStore.positionList\r\n\r\n        for (let i = 0; i < tradePositionStorePositionList.length; i++) {\r\n            const position = tradePositionStorePositionList[i]\r\n            if (tradeAccountStore.selectedAccountIdSet.has(position.accountId)) {\r\n                if (position.position !== 0 || this.state.showEmpty) {\r\n                    positionList.push(position)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.state.showMerged) {\r\n            const mergedPositionMap = new Map();\r\n\r\n            for (let i = 0; i < positionList.length; i++) {\r\n                const position = positionList[i]\r\n                try {\r\n                    const tmpKey = `${position.contract.uniformSymbol}@${position.positionDirection}`\r\n                    let tmpPosition;\r\n                    if (mergedPositionMap.has(tmpKey)) {\r\n                        tmpPosition = mergedPositionMap.get(tmpKey)\r\n                        tmpPosition.contractValue += position.contractValue\r\n                        tmpPosition.exchangeMargin += position.exchangeMargin\r\n                        tmpPosition.frozen += position.frozen\r\n                        tmpPosition.openPositionProfit += position.openPositionProfit\r\n                        tmpPosition.position += position.position\r\n                        tmpPosition.positionProfit += position.positionProfit\r\n                        tmpPosition.tdFrozen += position.tdFrozen\r\n                        tmpPosition.tdPosition += position.tdPosition\r\n                        tmpPosition.useMargin += position.useMargin\r\n                        tmpPosition.ydFrozen += position.ydFrozen\r\n                        tmpPosition.ydPosition += position.ydPosition\r\n                    } else {\r\n                        const tmpGateway = {\r\n                            description: \"\",\r\n                            gatewayAdapterType: \"\",\r\n                            gatewayId: \"\",\r\n                            gatewayType: \"\",\r\n                            name: \"\",\r\n                            status: \"\",\r\n                        }\r\n\r\n                        tmpPosition = {\r\n                            accountId: \"\",\r\n                            contract: deepCopy(position.contract),\r\n                            contractValue: position.contractValue,\r\n                            positionDirection: position.positionDirection,\r\n                            exchangeMargin: position.exchangeMargin,\r\n                            frozen: position.frozen,\r\n                            gateway: tmpGateway,\r\n                            lastPrice: position.lastPrice,\r\n                            openPositionProfit: position.openPositionProfit,\r\n                            openPositionProfitRatio: 0,\r\n                            openPrice: 0,\r\n                            openPriceDiff: 0,\r\n                            position: position.position,\r\n                            positionId: uuidv4().replace(\"-\", \"\"),\r\n                            positionProfit: position.positionProfit,\r\n                            positionProfitRatio: 0,\r\n                            price: 0,\r\n                            priceDiff: 0,\r\n                            tdFrozen: position.tdFrozen,\r\n                            tdPosition: position.tdPosition,\r\n                            useMargin: position.useMargin,\r\n                            ydFrozen: position.ydFrozen,\r\n                            ydPosition: position.ydPosition,\r\n                        }\r\n\r\n\r\n                        tmpPosition.contract.gateway = tmpGateway;\r\n                        // tmpPosition.contract.contractId = \"\"\r\n\r\n                    }\r\n\r\n                    if (isNumber(position.useMargin) && position.useMargin !== 0) {\r\n                        tmpPosition.positionProfitRatio = position.positionProfit / position.useMargin;\r\n                        tmpPosition.openPositionProfitRatio = position.openPositionProfit / position.useMargin;\r\n                    }\r\n\r\n                    mergedPositionMap.set(tmpKey, tmpPosition)\r\n                } catch (error) {\r\n                    console.error(\"合并计算仓位错误\", error)\r\n                }\r\n\r\n            }\r\n            // positionList = Array.from(mergedPositionMap.values())\r\n            positionList = [...mergedPositionMap.values()]\r\n        }\r\n\r\n        const columns: IColumn[] = [{\r\n            key: \"contract\",\r\n            name: \"合约\",\r\n            minWidth: 150,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contract) {\r\n                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.contract.uniformSymbol === selectedContract.uniformSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={tooltipLabelStyls}>合约代码:</span><span>{item.contract.symbol}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>简称:</span><span>{item.contract.name}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>完整名称:</span><span>{item.contract.fullName}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[item.contract.exchange]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[item.contract.productClass]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{item.contract.thirdPartyId}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[item.contract.currency]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{item.contract.multiplier}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{item.contract.priceTick}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{item.contract.lastTradeDateOrContractMonth}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div style={{ cursor: \"pointer\" }} className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item.contract)\r\n                                }\r\n                            }>\r\n                                <div>{item.contract.uniformSymbol}</div>\r\n                                <div>{item.contract.name}</div>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>无有效合约信息</span>\r\n                    )\r\n                }\r\n\r\n            }\r\n\r\n        }, {\r\n            key: \"direction\",\r\n            name: \"方向\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.positionDirection === PositionDirectionEnum.PD_Long) {\r\n                    return (\r\n                        <span className=\"trade-long-color\">多</span>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Short) {\r\n                    return (\r\n                        <span className=\"trade-short-color\">空</span>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Net) {\r\n                    return (\r\n                        <span>净</span>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                }  else {\r\n                    return (\r\n                        <span>{item.positionDirection}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"hedgeFlag\",\r\n            name: \"投机套保\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                    return (\r\n                        <span>投机</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                    return (\r\n                        <span>套利</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                    return (\r\n                        <span>套保</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                    return (\r\n                        <span>做市商</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                    return (\r\n                        <span>第一条腿套保第二条腿投机 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                    return (\r\n                        <span>第一条腿投机第二条腿套保 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.hedgeFlag}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"position\",\r\n            name: \"持仓\",\r\n            minWidth: 75,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                if (item.positionDirection === PositionDirectionEnum.PD_Long) {\r\n                    return (\r\n                        <div>\r\n                            <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-long-color\">{item.position}</span></div>\r\n                            <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                        </div>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Short) {\r\n                    return (\r\n                        <div>\r\n                            <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-short-color\">{item.position}</span></div>\r\n                            <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                        </div>\r\n                    );\r\n                } else if (item.positionDirection === PositionDirectionEnum.PD_Net) {\r\n                    if (item.position > 0) {\r\n                        return (\r\n                            <div>\r\n                                <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-long-color\">{item.position}</span></div>\r\n                                <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                            </div>\r\n                        );\r\n                    } else if (item.position < 0) {\r\n                        return (\r\n                            <div>\r\n                                <div><span style={tableLabelStyls}>持仓:</span><span className=\"trade-short-color\">{item.position}</span></div>\r\n                                <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{item.position}</span></div>\r\n                        <div><span style={tableLabelStyls}>冻结:</span><span>{item.frozen}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"tdPosition\",\r\n            name: \"今仓\",\r\n            minWidth: 75,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{item.tdPosition}</span></div>\r\n                        <div><span style={tableLabelStyls}>冻结:</span><span>{item.tdFrozen}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"action\",\r\n            name: \"操作\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            onRender: (item) => {\r\n                if (this.state.showMerged) {\r\n                    return <span />\r\n                }\r\n                return (\r\n                    <IconButton\r\n                        menuIconProps={{ iconName: 'MoreVertical' }}\r\n                        role=\"button\"\r\n                        aria-haspopup={true}\r\n                        aria-label=\"Show actions\"\r\n                        styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                        menuProps={{\r\n                            items: [\r\n                                {\r\n                                    key: 'CLOSE',\r\n                                    text: '对价平仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Blocked2\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"close\") }\r\n                                },\r\n                                {\r\n                                    key: 'CLOSE_TODAY',\r\n                                    text: '对价平今仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Blocked2\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"closeToday\") }\r\n                                },\r\n                                {\r\n                                    key: 'CLOSE_YESTERDAY',\r\n                                    text: '对价平昨仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Blocked2\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"closeYesterday\") }\r\n                                }, {\r\n                                    key: 'LOCK',\r\n                                    text: '对价锁仓(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"Lock\"\r\n                                    },\r\n                                    onClick: () => { console.log(\"lock\") }\r\n                                },\r\n\r\n                            ]\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        }, {\r\n            key: \"price\",\r\n            name: \"均价\",\r\n            minWidth: 90,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let decimalsLen = 4;\r\n                try {\r\n                    const prictTickStringArray = item.contract.priceTick.toString().split(\".\")\r\n                    if (prictTickStringArray.length === 1) {\r\n                        decimalsLen = 0\r\n                    } else {\r\n                        decimalsLen = [1].length\r\n                    }\r\n                } catch (error) {\r\n                    console.log(\"均价获取合约小数点位数错误\", error)\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{numberFormat(item.price, decimalsLen)}</span></div>\r\n                        <div><span style={tableLabelStyls}>开仓:</span><span>{numberFormat(item.openPrice, decimalsLen)}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"priceDiff\",\r\n            name: \"盈利价差\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>持仓:</span><span>{numberFormat(item.priceDiff, 4)}</span></div>\r\n                        <div><span style={tableLabelStyls}>开仓:</span><span>{numberFormat(item.openPriceDiff, 4)}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"openPositionProfit\",\r\n            name: \"逐笔浮盈\",\r\n            minWidth: 80,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                if (item.openPositionProfit > 0) {\r\n                    return (\r\n                        <div className=\"trade-long-color\">\r\n                            <div><span>{numberFormat(item.openPositionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.openPositionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                } else if (item.openPositionProfit < 0) {\r\n                    return (\r\n                        <div className=\"trade-short-color\">\r\n                            <div><span>{numberFormat(item.openPositionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.openPositionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span>{numberFormat(item.openPositionProfit, 2, true)}</span></div>\r\n                        <div><span>{numberFormat(item.openPositionProfitRatio * 100, 2, true)}%</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"positionProfit\",\r\n            name: \"盯市浮盈\",\r\n            minWidth: 80,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                if (item.positionProfit > 0) {\r\n                    return (\r\n                        <div className=\"trade-long-color\">\r\n                            <div><span>{numberFormat(item.positionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.positionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                } else if (item.positionProfit < 0) {\r\n                    return (\r\n                        <div className=\"trade-short-color\">\r\n                            <div><span>{numberFormat(item.positionProfit, 2, true)}</span></div>\r\n                            <div><span>{numberFormat(item.positionProfitRatio * 100, 2, true)}%</span></div>\r\n                        </div>\r\n                    )\r\n                }\r\n                return (\r\n                    <div>\r\n                        <div><span>{numberFormat(item.positionProfit, 2, true)}</span></div>\r\n                        <div><span>{numberFormat(item.positionProfitRatio * 100, 2, true)}%</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"marginRatio\",\r\n            name: \"资金占比\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                let marginRatio = \"无效值\"\r\n\r\n                try {\r\n                    if (this.state.showMerged) {\r\n                        const {\r\n                            allBalance\r\n                        } = tradeAccountStore.summaryMap.get(\"CNY\")\r\n\r\n                        marginRatio = numberFormat(item.useMargin / allBalance * 100, 2, true) + \"%\"\r\n                    } else {\r\n                        const account = accountMap.get(item.accountId)\r\n                        if (account) {\r\n                            marginRatio = numberFormat(item.useMargin / account.balance * 100, 2, true) + \"%\"\r\n                        } else {\r\n                            console.info(\"账户不存在,无法计算资金占比\")\r\n                        }\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.log(\"计算保证金占比错误\", error)\r\n                }\r\n\r\n\r\n                return (\r\n                    <div>\r\n                        {marginRatio}\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"margin\",\r\n            name: \"保证金\",\r\n            minWidth: 100,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={{ ...tableLabelStyls, width: 40 }}>经纪商:</span><span>{numberFormat(item.useMargin, 2, true)}</span></div>\r\n                        <div><span style={{ ...tableLabelStyls, width: 40 }}>交易所:</span><span>{numberFormat(item.exchangeMargin, 2, true)}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"contractValue\",\r\n            name: \"合约价值\",\r\n            minWidth: 100,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{numberFormat(item.contractValue, 2, true)}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"accountCode\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                let account: any;\r\n\r\n                try {\r\n                    account = accountMap.get(item.accountId)\r\n                } catch (error) {\r\n                    console.log(\"获取账户代码错误\", error)\r\n                }\r\n\r\n                if (account && account.code) {\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{account.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <span>{account.code}</span>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <span>无账户信息</span>\r\n                )\r\n\r\n\r\n\r\n            }\r\n        },\r\n\r\n        ]\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 30}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit'\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                                        items={positionList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"id\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                            \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    // onItemInvoked={\r\n                                    //     (item: any, index: number | undefined): void => {\r\n                                    //         alert(`Item ${item.positionId} at index ${index} has been invoked.`);\r\n                                    //       }\r\n                                    // }\r\n\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox label=\"合并显示\" styles={{ root: { marginTop: 3 } }} onChange={(event: any) => {\r\n                                this.setState({ \"showMerged\": event.currentTarget.checked })\r\n                            }} />\r\n                        </Stack>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox label=\"显示空仓\" styles={{ root: { marginTop: 3 } }} checked={this.state.showEmpty} onChange={(event: any) => {\r\n                                this.setState({ \"showEmpty\": event.currentTarget.checked })\r\n                            }} />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(PositionDetailsPage)\r\n\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, SelectionMode, IColumn, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { IconButton } from '@fluentui/react/lib/Button';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { OrderStatusEnum, DirectionEnum, OffsetFlagEnum, TimeConditionEnum, ProductClassEnum, ExchangeEnum, CurrencyEnum, OrderPriceTypeEnum, HedgeFlagEnum, VolumeConditionEnum, ContingentConditionEnum} = xyz.redtorch.pb\r\n\r\n\r\nconst tableLabelStyls: React.CSSProperties = { display: 'inline-block', width: 27, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\nexport const OrderDetailsPage = inject('authenticationStore', \"tradeOrderStore\", \"tradeAccountStore\", \"tradeActionStore\")(observer(class OrderDetailsPage extends React.Component<any> {\r\n\r\n    public state = { statusChoice: 'ALL', showRejected: false };\r\n\r\n    public render() {\r\n\r\n        const { componentHeight, tradeOrderStore, tradeAccountStore, tradeActionStore } = this.props;\r\n\r\n        const { accountMap } = tradeAccountStore;\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        const orderList: any[] = []\r\n        const tradeAccountStoreOrderList = tradeOrderStore.orderList\r\n\r\n        for (let i = 0; i < tradeAccountStoreOrderList.length; i++) {\r\n            const order = tradeAccountStoreOrderList[i]\r\n\r\n            if (tradeAccountStore.selectedAccountIdSet.has(order.accountId)) {\r\n                if (this.state.statusChoice === \"ALL\"\r\n                    || (order.orderStatus !== OrderStatusEnum.OS_AllTraded && order.orderStatus !== OrderStatusEnum.OS_Canceled && order.orderStatus !== OrderStatusEnum.OS_Rejected && this.state.statusChoice === \"CANCELABLE\")\r\n                    || (order.orderStatus === OrderStatusEnum.OS_Canceled && this.state.statusChoice === \"CANCELLED\")\r\n                ) {\r\n                    if ((order.orderStatus === OrderStatusEnum.OS_Rejected && this.state.showRejected)\r\n                        || order.orderStatus !== OrderStatusEnum.OS_Rejected\r\n                    ) {\r\n                        orderList.push(order)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const columns: IColumn[] = [{\r\n            key: \"contract\",\r\n            name: \"合约\",\r\n            minWidth: 150,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contract) {\r\n                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.contract.uniformSymbol === selectedContract.uniformSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={tooltipLabelStyls}>合约代码:</span><span>{item.contract.symbol}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>简称:</span><span>{item.contract.name}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>完整名称:</span><span>{item.contract.fullName}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[item.contract.exchange]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[item.contract.productClass]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{item.contract.thirdPartyId}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[item.contract.currency]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{item.contract.multiplier}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{item.contract.priceTick}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{item.contract.lastTradeDateOrContractMonth}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div style={{ cursor: \"pointer\" }} className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item.contract)\r\n                                }\r\n                            }>\r\n                                <div>{item.contract.uniformSymbol}</div>\r\n                                <div>{item.contract.name}</div>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>无有效合约信息</span>\r\n                    )\r\n                }\r\n\r\n            }\r\n        }, {\r\n            key: \"direction\",\r\n            name: \"方向\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.direction === DirectionEnum.D_Buy) {\r\n                    return (\r\n                        <span className=\"trade-long-color\">多</span>\r\n                    );\r\n                } else if (item.direction === DirectionEnum.D_Sell) {\r\n                    return (\r\n                        <span className=\"trade-short-color\">空</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.direction}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"offsetFlag\",\r\n            name: \"开平\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.offsetFlag === OffsetFlagEnum.OF_Open) {\r\n                    return (\r\n                        <span>开仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Close) {\r\n                    return (\r\n                        <span>平仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseYesterday) {\r\n                    return (\r\n                        <span>平昨</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseToday) {\r\n                    return (\r\n                        <span>平今</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.offsetFlag} </span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"hedgeFlag\",\r\n            name: \"投机套保\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                    return (\r\n                        <span>投机</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                    return (\r\n                        <span>套利</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                    return (\r\n                        <span>套保</span>\r\n                    );\r\n                }  else if (item.hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                    return (\r\n                        <span>做市商</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                    return (\r\n                        <span>第一条腿套保第二条腿投机 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                    return (\r\n                        <span>第一条腿投机第二条腿套保 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.hedgeFlag}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"orderPriceType\",\r\n            name: \"价格类型\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.orderPriceType === OrderPriceTypeEnum.OPT_LimitPrice) {\r\n                    return (\r\n                        <span>限价</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_AnyPrice) {\r\n                    return (\r\n                        <span>市价</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_BestPrice) {\r\n                    return (\r\n                        <span>最优价</span>\r\n                    );\r\n                }  else if (item.orderPriceType === OrderPriceTypeEnum.OPT_LastPrice) {\r\n                    return (\r\n                        <span>最新价</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusOneTicks) {\r\n                    return (\r\n                        <span>新价浮动上浮1个ticks</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks) {\r\n                    return (\r\n                        <span>新价浮动上浮3个ticks</span>\r\n                    );\r\n                } else if (item.orderPriceType === OrderPriceTypeEnum.OPT_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.orderPriceType}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"price\",\r\n            name: \"价格\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span className=\"trade-info-color\">{item.price}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"volume\",\r\n            name: \"量\",\r\n            minWidth: 75,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div><span style={tableLabelStyls}>总量:</span><span className=\"trade-info-color\">{item.totalVolume}</span></div>\r\n                        <div><span style={tableLabelStyls}>成交:</span><span className=\"trade-info-color\">{item.tradedVolume}</span></div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"action\",\r\n            name: \"操作\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            onRender: (item) => {\r\n                return (\r\n                    <IconButton\r\n                        menuIconProps={{ iconName: 'MoreVertical' }}\r\n                        role=\"button\"\r\n                        aria-haspopup={true}\r\n                        aria-label=\"Show actions\"\r\n                        styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                        menuProps={{\r\n                            items: [\r\n                                {\r\n                                    key: 'cancel',\r\n                                    text: '撤销',\r\n                                    iconProps: {\r\n                                        iconName: \"RevToggleKey\"\r\n                                    },\r\n                                    onClick: () => {\r\n                                        tradeActionStore.cancelOrder(item.orderId)\r\n                                    }\r\n                                },\r\n\r\n                                {\r\n                                    key: 'followUpWithActivePrice',\r\n                                    text: '对价追(开发中)',\r\n                                    disabled: true,\r\n                                    iconProps: {\r\n                                        iconName: \"DoubleChevronRight8\"\r\n                                    },\r\n                                    onClick: () => {\r\n                                        console.error(\"对价追\")\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n        }, {\r\n            key: \"status\",\r\n            name: \"状态\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.orderStatus === OrderStatusEnum.OS_AllTraded) {\r\n                    return (\r\n                        <span>全部成交</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Canceled) {\r\n                    return (\r\n                        <span>已撤销</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Rejected) {\r\n                    return (\r\n                        <span>已拒绝</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_PartTradedQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">部分成交还在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_PartTradedNotQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">部分成交不在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_NoTradeQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">未成交还在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_NoTradeNotQueueing) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">未成交不在队列中</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Touched) {\r\n                    return (\r\n                        <span>已触发</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_NotTouched) {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">尚未触发</span>\r\n                    );\r\n                } else if (item.orderStatus === OrderStatusEnum.OS_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span className=\"trade-remind-color\">{item.orderStatus}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"statusMsg\",\r\n            name: \"状态信息\",\r\n            minWidth: 80,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.statusMsg}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"time\",\r\n            name: \"时间\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div>{item.orderDate}</div>\r\n                        <div>{item.orderTime}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"timeCondition\",\r\n            name: \"时效\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_GTC) {\r\n                    return (\r\n                        <div>\r\n                            <div>撤销前有效(GTC)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_GFD) {\r\n                    return (\r\n                        <div>\r\n                            <div>当日有效(GFD)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_GFA) {\r\n                    return (\r\n                        <div>\r\n                            <div>集合竞价有效(GFA)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                \r\n                if (item.timeCondition === TimeConditionEnum.TC_GFS) {\r\n                    return (\r\n                        <div>\r\n                            <div>本节有效(GFS)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                \r\n                if (item.timeCondition === TimeConditionEnum.TC_GTD) {\r\n                    return (\r\n                        <div>\r\n                            <div>指定日期前有效(GTD)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_IOC) {\r\n                    return (\r\n                        <div>\r\n                            <div>立即完成，否则撤销(IOC)</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (item.timeCondition === TimeConditionEnum.TC_Unknown) {\r\n                    return (\r\n                        <div>\r\n                            <div>未知</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <div>\r\n                        <div>{item.timeCondition}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"volumeCondition\",\r\n            name: \"成交量类型\",\r\n            minWidth: 60,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.volumeCondition === VolumeConditionEnum.VC_AV) {\r\n                    return (\r\n                        <span>任何数量</span>\r\n                    );\r\n                } else if (item.volumeCondition === VolumeConditionEnum.VC_MV) {\r\n                    return (\r\n                        <span>最小数量</span>\r\n                    );\r\n                } else if (item.volumeCondition === VolumeConditionEnum.VC_CV) {\r\n                    return (\r\n                        <span>全部数量</span>\r\n                    );\r\n                } else if (item.volumeCondition === VolumeConditionEnum.VC_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                }  else {\r\n                    return (\r\n                        <span>{item.volumeCondition}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"minVolume\",\r\n            name: \"最小数量\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.minVolume}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"contingentCondition\",\r\n            name: \"触发条件\",\r\n            minWidth: 100,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contingentCondition === ContingentConditionEnum.CC_Immediately) {\r\n                    return (\r\n                        <span>立即</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice) {\r\n                    return (\r\n                        <span>最新价大于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice) {\r\n                    return (\r\n                        <span>最新价小于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice) {\r\n                    return (\r\n                        <span>(本地)最新价大于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice) {\r\n                    return (\r\n                        <span>(本地)最新价小于等于条件价</span>\r\n                    );\r\n                } else if (item.contingentCondition === ContingentConditionEnum.CC_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                }else {\r\n                    return (\r\n                        <span>{item.contingentCondition}</span>\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        , {\r\n            key: \"stopPrice\",\r\n            name: \"条件价格\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.stopPrice}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"adapterOrderId\",\r\n            name: \"适配器定单编号\",\r\n            minWidth: 120,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.adapterOrderId}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"accountCode\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                let account: any;\r\n\r\n                try {\r\n                    account = accountMap.get(item.accountId)\r\n                } catch (error) {\r\n                    console.log(\"获取账户代码错误\", error)\r\n                }\r\n\r\n                if (account && account.code) {\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{account.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <span>{account.code}</span>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <span>无账户信息</span>\r\n                )\r\n\r\n\r\n\r\n            }\r\n        }\r\n\r\n        ]\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 30}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit'\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                                        items={orderList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"id\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                        onItemInvoked={\r\n                                            (item: any, index: number | undefined): void => {\r\n                                                tradeActionStore.cancelOrder(item.orderId)\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <ChoiceGroup\r\n                                defaultSelectedKey=\"ALL\"\r\n                                options={[\r\n                                    {\r\n                                        key: 'ALL',\r\n                                        text: '全部',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0,\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'CANCELABLE',\r\n                                        text: '可撤销',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'CANCELLED',\r\n                                        text: '已撤销',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                onChange={(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\r\n                                    if (option) {\r\n                                        this.setState({ \"statusChoice\": option.key })\r\n                                    }\r\n                                }}\r\n                            // label=\"显示方式\"\r\n                            // required={true}\r\n                            />\r\n                        </Stack>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox\r\n                                label=\"显示拒单\"\r\n                                styles={{ root: { marginTop: 3 } }}\r\n                                onChange={(event: any) => {\r\n                                    this.setState({ \"showRejected\": event.currentTarget.checked })\r\n                                }} />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(OrderDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { PrimaryButton, DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\n\r\nimport { exchangeOptions, currencyOptions, productClassOptions } from '../../../utils'\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\n\r\nconst { CurrencyEnum, ExchangeEnum, ProductClassEnum, OptionsTypeEnum } = xyz.redtorch.pb\r\n\r\n\r\n\r\nexport const ContractDetailsPage = inject('authenticationStore', 'tradeContractStore', 'tradeActionStore', 'customizeStore', 'marketDataRecordingStore')(observer(class ContractDetailsPage extends React.Component<any> {\r\n\r\n    state = {\r\n        filterExchange: 9999,\r\n        filterProductClass: 9999,\r\n        filterCurrency: 9999,\r\n        filterSymbol: \"\",\r\n        filterUnderlyingSymbol: \"\",\r\n        filterThirdPartyId: \"\",\r\n        filterName: \"\",\r\n        filterLastTradeDateOrContractMonth: \"\"\r\n    }\r\n\r\n    public componentDidMount = () => {\r\n        this.getContractList()\r\n    }\r\n\r\n    public getContractList = () => {\r\n        const { tradeContractStore } = this.props\r\n        tradeContractStore.getContractList()\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { tradeContractStore, tradeActionStore, customizeStore, marketDataRecordingStore } = this.props;\r\n\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let mixContractList = []\r\n        if ((this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0))\r\n            && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0))\r\n            && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0))\r\n            && (this.state.filterSymbol === \"\" || !this.state.filterSymbol)\r\n            && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth)\r\n            && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId)\r\n            && (this.state.filterName === \"\" || !this.state.filterName)\r\n            && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol)) {\r\n            mixContractList = tradeContractStore.mixContractList\r\n        } else {\r\n\r\n            for (let i = 0; i <  tradeContractStore.mixContractList.length; i++) {\r\n                const contract = tradeContractStore.mixContractList[i]\r\n\r\n                let flag = false;\r\n                flag = this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0) || contract.currency === this.state.filterCurrency\r\n                flag = flag && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0) || contract.exchange === this.state.filterExchange)\r\n                flag = flag && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0) || contract.productClass === this.state.filterProductClass)\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n                flag = flag && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth || (contract.lastTradeDateOrContractMonth && `${contract.lastTradeDateOrContractMonth}`.indexOf(this.state.filterLastTradeDateOrContractMonth) !== -1))\r\n                flag = flag && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol || (contract.underlyingSymbol && `${contract.underlyingSymbol}`.indexOf(this.state.filterUnderlyingSymbol) !== -1))\r\n                flag = flag && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId || (contract.thirdPartyId && `${contract.thirdPartyId}`.indexOf(this.state.filterThirdPartyId) !== -1))\r\n                flag = flag && (this.state.filterName === \"\" || !this.state.filterName || (contract.name && `${contract.name}`.indexOf(this.state.filterName) !== -1) || (contract.fullName && `${contract.fullName}`.indexOf(this.state.filterName) !== -1))\r\n\r\n                if (flag) {\r\n                    mixContractList.push(contract)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 209}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [\r\n            {\r\n                key: \"uniformSymbol\",\r\n                name: \"统一标识\",\r\n                minWidth: 150,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.uniformSymbol === selectedContract.uniformSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item)\r\n                                }\r\n                            }>\r\n                                <span style={{ cursor: \"pointer\" }}>{item.uniformSymbol}</span>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"shortName\",\r\n                name: \"简称\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.name}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"fullName\",\r\n                name: \"完整名称\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.fullName}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"action\",\r\n                name: \"操作\",\r\n                minWidth: 30,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                onRender: (item) => {\r\n                    return (\r\n                        <IconButton\r\n                            menuIconProps={{ iconName: 'MoreVertical' }}\r\n                            role=\"button\"\r\n                            aria-haspopup={true}\r\n                            aria-label=\"Show actions\"\r\n                            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                            menuProps={{\r\n                                items: [\r\n                                    {\r\n                                        key: 'addTofavorite',\r\n                                        text: '加入常用',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            customizeStore.addFavoriteContractByUniformSymbol(item.uniformSymbol)\r\n                                        }\r\n                                    },\r\n\r\n                                    {\r\n                                        key: 'addToMarketDataRecording',\r\n                                        // disabled: true,\r\n                                        text: '加入行情记录',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            marketDataRecordingStore.addContractByUniformSymbol(item.uniformSymbol)\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"symbol\",\r\n                name: \"代码\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.symbol}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"exchange\",\r\n                name: \"交易所\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ExchangeEnum[item.exchange]}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"productClass\",\r\n                name: \"产品类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ProductClassEnum[item.productClass]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"lastTradeDateOrContractMonth\",\r\n                name: \"合约月或最后交易日\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.lastTradeDateOrContractMonth}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"currency\",\r\n                name: \"币种\",\r\n                minWidth: 40,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{CurrencyEnum[item.currency]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"thirdPartyId\",\r\n                name: \"第三方ID\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.thirdPartyId}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"multiplier\",\r\n                name: \"合约乘数\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.multiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"priceTick\",\r\n                name: \"最小变动价位\",\r\n                minWidth: 70,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.priceTick}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"optionsType\",\r\n                name: \"期权类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    if (item.optionsType === OptionsTypeEnum.O_CallOptions) {\r\n                        return (\r\n                            <span>看涨</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_PutOptions) {\r\n                        return (\r\n                            <span>看跌</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_Unknown) {\r\n                        return (\r\n                            <span>未知</span>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <span>{item.optionsType}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingSymbol\",\r\n                name: \"基础商品代码\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingSymbol}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingMultiplier\",\r\n                name: \"基础商品乘数\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingMultiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"strikePrice\",\r\n                name: \"执行价\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.strikePrice}</span>\r\n                    );\r\n                }\r\n            }\r\n\r\n        ]\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 207, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"交易所\"\r\n                                            // styles={{ root: { width: \"90%\" } }}\r\n                                            defaultSelectedKey={this.state.filterExchange}\r\n                                            options={\r\n                                                exchangeOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterExchange: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"产品类型\"\r\n                                            defaultSelectedKey={this.state.filterProductClass}\r\n                                            options={\r\n                                                productClassOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterProductClass: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"币种\"\r\n                                            defaultSelectedKey={this.state.filterCurrency}\r\n                                            options={\r\n                                                currencyOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterCurrency: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterSymbol} label=\"合约代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterLastTradeDateOrContractMonth} label=\"最后交易日或合约月\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterLastTradeDateOrContractMonth: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterThirdPartyId} label=\"第三方ID\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterThirdPartyId: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterUnderlyingSymbol} label=\"基础商品代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterUnderlyingSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterName} label=\"名称\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterName: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <PrimaryButton\r\n                                            text=\"搜寻(开发中)\"\r\n                                            onClick={() => {\r\n                                                console.log(123)\r\n                                            }}\r\n                                            disabled={true}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                        <DefaultButton\r\n                                            text=\"刷新\"\r\n                                            onClick={() => {\r\n                                                tradeContractStore.getContractList()\r\n                                            }}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        items={mixContractList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"accountId\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                        \r\n                                            // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(ContractDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\n\r\nimport { exchangeOptions, currencyOptions, productClassOptions } from '../../../utils'\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\n\r\nconst { CurrencyEnum, ExchangeEnum, ProductClassEnum, OptionsTypeEnum } = xyz.redtorch.pb\r\n\r\n\r\n\r\nexport const FavoriteContractDetailsPage = inject('authenticationStore', 'tradeContractStore', 'tradeActionStore', 'customizeStore', 'marketDataRecordingStore')(observer(class FavoriteContractDetailsPage extends React.Component<any> {\r\n\r\n    state = {\r\n        filterExchange: 9999,\r\n        filterProductClass: 9999,\r\n        filterCurrency: 9999,\r\n        filterSymbol: \"\",\r\n        filterUnderlyingSymbol: \"\",\r\n        filterThirdPartyId: \"\",\r\n        filterName: \"\",\r\n        filterLastTradeDateOrContractMonth: \"\"\r\n    }\r\n\r\n    public componentDidMount = () => {\r\n        this.getFavoriteContractList()\r\n    }\r\n\r\n    public getFavoriteContractList = () => {\r\n        const { customizeStore, tradeContractStore } = this.props\r\n        tradeContractStore.getContractList()\r\n        customizeStore.getFavoriteContractList()\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { customizeStore, tradeActionStore, marketDataRecordingStore } = this.props;\r\n\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let favoriteContractList = []\r\n        if ((this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0))\r\n            && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0))\r\n            && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0))\r\n            && (this.state.filterSymbol === \"\" || !this.state.filterSymbol)\r\n            && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth)\r\n            && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId)\r\n            && (this.state.filterName === \"\" || !this.state.filterName)\r\n            && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol)) {\r\n            favoriteContractList = customizeStore.favoriteContractList\r\n        } else {\r\n\r\n            for (let i = 0; i < customizeStore.favoriteContractList.length; i++) {\r\n                const contract = customizeStore.favoriteContractList[i]\r\n\r\n                let flag = false;\r\n                flag = this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0) || contract.currency === this.state.filterCurrency\r\n\r\n                flag = flag && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0) || contract.exchange === this.state.filterExchange)\r\n\r\n                flag = flag && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0) || contract.productClass === this.state.filterProductClass)\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth || (contract.lastTradeDateOrContractMonth && `${contract.lastTradeDateOrContractMonth}`.indexOf(this.state.filterLastTradeDateOrContractMonth) !== -1))\r\n\r\n                flag = flag && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol || (contract.underlyingSymbol && `${contract.underlyingSymbol}`.indexOf(this.state.filterUnderlyingSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId || (contract.thirdPartyId && `${contract.thirdPartyId}`.indexOf(this.state.filterThirdPartyId) !== -1))\r\n\r\n                flag = flag && (this.state.filterName === \"\" || !this.state.filterName || (contract.name && `${contract.name}`.indexOf(this.state.filterName) !== -1) || (contract.fullName && `${contract.fullName}`.indexOf(this.state.filterName) !== -1))\r\n\r\n\r\n                if (flag) {\r\n                    favoriteContractList.push(contract)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 209}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [\r\n            {\r\n                key: \"uniformSymbol\",\r\n                name: \"统一标识\",\r\n                minWidth: 150,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.uniformSymbol === selectedContract.uniformSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item)\r\n                                }\r\n                            }>\r\n                                <span style={{ cursor: \"pointer\" }}>{item.uniformSymbol}</span>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"shortName\",\r\n                name: \"简称\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.name}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"fullName\",\r\n                name: \"完整名称\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.fullName}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"action\",\r\n                name: \"操作\",\r\n                minWidth: 30,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                onRender: (item) => {\r\n                    return (\r\n                        <IconButton\r\n                            menuIconProps={{ iconName: 'MoreVertical' }}\r\n                            role=\"button\"\r\n                            aria-haspopup={true}\r\n                            aria-label=\"Show actions\"\r\n                            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                            menuProps={{\r\n                                items: [\r\n                                    {\r\n                                        key: 'deleteFavoriteContractByUniformSymbol',\r\n                                        text: '从常用中移除',\r\n                                        iconProps: {\r\n                                            iconName: \"Delete\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            customizeStore.deleteFavoriteContractByUniformSymbol(item.uniformSymbol)\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'addToMarketDataRecording',\r\n                                        // disabled: true,\r\n                                        text: '加入行情记录',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            marketDataRecordingStore.addContractByUniformSymbol(item.uniformSymbol)\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"symbol\",\r\n                name: \"代码\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.symbol}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"exchange\",\r\n                name: \"交易所\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ExchangeEnum[item.exchange]}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"productClass\",\r\n                name: \"产品类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ProductClassEnum[item.productClass]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"lastTradeDateOrContractMonth\",\r\n                name: \"合约月或最后交易日\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.lastTradeDateOrContractMonth}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"currency\",\r\n                name: \"币种\",\r\n                minWidth: 40,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{CurrencyEnum[item.currency]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"thirdPartyId\",\r\n                name: \"第三方ID\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.thirdPartyId}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"multiplier\",\r\n                name: \"合约乘数\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.multiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"priceTick\",\r\n                name: \"最小变动价位\",\r\n                minWidth: 70,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.priceTick}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"optionsType\",\r\n                name: \"期权类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    if (item.optionsType === OptionsTypeEnum.O_CallOptions) {\r\n                        return (\r\n                            <span>看涨</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_PutOptions) {\r\n                        return (\r\n                            <span>看跌</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_Unknown) {\r\n                        return (\r\n                            <span>未知</span>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <span>{item.optionsType}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingSymbol\",\r\n                name: \"基础商品代码\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingSymbol}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingMultiplier\",\r\n                name: \"基础商品乘数\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingMultiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"strikePrice\",\r\n                name: \"执行价\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.strikePrice}</span>\r\n                    );\r\n                }\r\n            }\r\n\r\n        ]\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 207, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"交易所\"\r\n                                            // styles={{ root: { width: \"90%\" } }}\r\n                                            defaultSelectedKey={this.state.filterExchange}\r\n                                            options={\r\n                                                exchangeOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterExchange: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"产品类型\"\r\n                                            defaultSelectedKey={this.state.filterProductClass}\r\n                                            options={\r\n                                                productClassOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterProductClass: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"币种\"\r\n                                            defaultSelectedKey={this.state.filterCurrency}\r\n                                            options={\r\n                                                currencyOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterCurrency: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterSymbol} label=\"合约代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterLastTradeDateOrContractMonth} label=\"最后交易日或合约月\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterLastTradeDateOrContractMonth: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterThirdPartyId} label=\"第三方ID\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterThirdPartyId: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterUnderlyingSymbol} label=\"基础商品代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterUnderlyingSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterName} label=\"名称\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterName: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"32%\", paddingLeft: 5, paddingRight: 5, paddingTop: 29 } }}>\r\n                                        <DefaultButton\r\n                                            text=\"刷新\"\r\n                                            onClick={() => {\r\n                                                this.getFavoriteContractList()\r\n                                            }}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        items={favoriteContractList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"accountId\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                            \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(FavoriteContractDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, SelectionMode, IColumn, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { deepCopy } from '../../../utils';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst { DirectionEnum, OffsetFlagEnum, ProductClassEnum, ExchangeEnum, CurrencyEnum, HedgeFlagEnum } = xyz.redtorch.pb\r\n\r\n// const tableLabelStyls: React.CSSProperties = { display: 'inline-block', width: 27, textAlign: \"right\", color: '#999',paddingRight:3 }\r\n\r\nexport const TradeDetailsPage = inject('authenticationStore', \"tradeTradeStore\", \"tradeAccountStore\", \"tradeActionStore\")(observer(class TradeDetailsPage extends React.Component<any> {\r\n    public state = { directionChoice: 'ALL', showMerged: false };\r\n    public render() {\r\n\r\n\r\n        const { componentHeight, tradeTradeStore, tradeAccountStore, tradeActionStore } = this.props;\r\n\r\n        const { accountMap } = tradeAccountStore;\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let tradeList: any[] = []\r\n        const tradeTradeStoreTradeList = tradeTradeStore.tradeList\r\n        for (let i = 0; i < tradeTradeStoreTradeList.length; i++) {\r\n            const trade = tradeTradeStoreTradeList[i]\r\n            if (tradeAccountStore.selectedAccountIdSet.has(trade.accountId)) {\r\n                if (this.state.directionChoice === \"ALL\"\r\n                    || (this.state.directionChoice === 'LONG' && trade.direction === DirectionEnum.D_Buy)\r\n                    || (this.state.directionChoice === 'SHORT' && trade.direction === DirectionEnum.D_Sell)\r\n                ) {\r\n                    tradeList.push(trade)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.state.showMerged) {\r\n\r\n            const mergedTradeMap = new Map();\r\n\r\n            for (let i = 0; i < tradeList.length; i++) {\r\n                const trade = tradeList[i]\r\n                try {\r\n                    const tmpKey = `${trade.contract.uniformSymbol}@${trade.direction}@${trade.offsetFlag}`\r\n                    let tmpTrade;\r\n                    if (mergedTradeMap.has(tmpKey)) {\r\n                        tmpTrade = mergedTradeMap.get(tmpKey)\r\n                        tmpTrade.volume += trade.volume\r\n                    } else {\r\n                        const tmpGateway = {\r\n                            description: \"\",\r\n                            gatewayAdapterType: \"\",\r\n                            gatewayId: \"\",\r\n                            gatewayType: \"\",\r\n                            name: \"\",\r\n                            status: \"\",\r\n                        }\r\n                        tmpTrade = {\r\n                            accountId: \"\",\r\n                            adapterOrderId: \"\",\r\n                            adapterTradeId: \"\",\r\n                            contract: deepCopy(trade.contract),\r\n                            direction: trade.direction,\r\n                            gateway: tmpGateway,\r\n                            offsetFlag: trade.offsetFlag,\r\n                            orderId: \"\",\r\n                            originOrderId: \"\",\r\n                            price: 0,\r\n                            tradeDate: \"\",\r\n                            tradeId: uuidv4().replace(\"-\", \"\"),\r\n                            tradeTime: \"\",\r\n                            tradeTimestamp: \"\",\r\n                            tradingDay: \"\",\r\n                            volume: trade.volume\r\n                        }\r\n                        tmpTrade.contract.gateway = tmpGateway;\r\n\r\n                    }\r\n                    mergedTradeMap.set(tmpKey, tmpTrade)\r\n                } catch (error) {\r\n                    console.error(\"合并计算成交错误\", error)\r\n                }\r\n            }\r\n\r\n            tradeList = [...mergedTradeMap.values()]\r\n\r\n        }\r\n\r\n\r\n        const columns: IColumn[] = [{\r\n            key: \"contract\",\r\n            name: \"合约\",\r\n            minWidth: 150,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.contract) {\r\n                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.contract.uniformSymbol === selectedContract.uniformSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={tooltipLabelStyls}>合约代码:</span><span>{item.contract.symbol}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>简称:</span><span>{item.contract.name}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>完整名称:</span><span>{item.contract.fullName}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[item.contract.exchange]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[item.contract.productClass]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{item.contract.thirdPartyId}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[item.contract.currency]}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{item.contract.multiplier}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{item.contract.priceTick}</span></li>\r\n                                                <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{item.contract.lastTradeDateOrContractMonth}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div style={{ cursor: \"pointer\" }} className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item.contract)\r\n                                }\r\n                            }>\r\n                                <div>{item.contract.uniformSymbol}</div>\r\n                                <div>{item.contract.name}</div>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>无有效合约信息</span>\r\n                    )\r\n                }\r\n\r\n            }\r\n        }, {\r\n            key: \"direction\",\r\n            name: \"方向\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.direction === DirectionEnum.D_Buy) {\r\n                    return (\r\n                        <span className=\"trade-long-color\">多</span>\r\n                    );\r\n                } else if (item.direction === DirectionEnum.D_Sell) {\r\n                    return (\r\n                        <span className=\"trade-short-color\">空</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.direction}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"hedgeFlag\",\r\n            name: \"投机套保\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.hedgeFlag === HedgeFlagEnum.HF_Speculation) {\r\n                    return (\r\n                        <span>投机</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Arbitrage) {\r\n                    return (\r\n                        <span>套利</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Hedge) {\r\n                    return (\r\n                        <span>套保</span>\r\n                    );\r\n                }  else if (item.hedgeFlag === HedgeFlagEnum.HF_MarketMaker) {\r\n                    return (\r\n                        <span>做市商</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_HedgeSpec) {\r\n                    return (\r\n                        <span>第一条腿套保第二条腿投机 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_SpecHedge) {\r\n                    return (\r\n                        <span>第一条腿投机第二条腿套保 大商所专用</span>\r\n                    );\r\n                } else if (item.hedgeFlag === HedgeFlagEnum.HF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.hedgeFlag}</span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"offsetFlag\",\r\n            name: \"开平\",\r\n            minWidth: 30,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                if (item.offsetFlag === OffsetFlagEnum.OF_Open) {\r\n                    return (\r\n                        <span>开仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Close) {\r\n                    return (\r\n                        <span>平仓</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseYesterday) {\r\n                    return (\r\n                        <span>平昨</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_CloseToday) {\r\n                    return (\r\n                        <span>平今</span>\r\n                    );\r\n                } else if (item.offsetFlag === OffsetFlagEnum.OF_Unknown) {\r\n                    return (\r\n                        <span>未知</span>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <span>{item.offsetFlag} </span>\r\n                    );\r\n                }\r\n            }\r\n        }, {\r\n            key: \"price\",\r\n            name: \"价格\",\r\n            minWidth: 50,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span className=\"trade-info-color\">{item.price}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"volume\",\r\n            name: \"量\",\r\n            minWidth: 40,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.volume}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"time\",\r\n            name: \"时间\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <div>\r\n                        <div>{item.tradeDate}</div>\r\n                        <div>{item.tradeTime}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"adapterOrderId\",\r\n            name: \"适配器定单编号\",\r\n            minWidth: 120,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.adapterOrderId}</span>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            key: \"adapterTradeId\",\r\n            name: \"适配器成交编号\",\r\n            minWidth: 240,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'number',\r\n            onRender: (item) => {\r\n                return (\r\n                    <span>{item.adapterTradeId}</span>\r\n                );\r\n            }\r\n        }, {\r\n            key: \"accountCode\",\r\n            name: \"账户代码\",\r\n            minWidth: 70,\r\n            isResizable: true,\r\n            isCollapsible: true,\r\n            data: 'string',\r\n            onRender: (item) => {\r\n                const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                let account: any;\r\n\r\n                try {\r\n                    account = accountMap.get(item.accountId)\r\n                } catch (error) {\r\n                    console.log(\"获取账户代码错误\", error)\r\n                }\r\n\r\n                if (account && account.code) {\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {                                                  \r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{account.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <span>{account.code}</span>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <span>无账户信息</span>\r\n                )\r\n\r\n\r\n\r\n            }\r\n        }\r\n\r\n        ]\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${componentHeight - 30}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit'\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        // styles={{ root: { height: `${this.state.windowInnerHeight-81}px`} }}\r\n                                        items={tradeList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"id\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n                                        \r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{root:{paddingTop:0,height:24,lineHeight:24},check:{height:\"24px !important\"},cellIsCheck:{height:24}}}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <ChoiceGroup\r\n                                defaultSelectedKey=\"ALL\"\r\n                                options={[\r\n                                    {\r\n                                        key: 'ALL',\r\n                                        text: '全部',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'LONG',\r\n                                        text: '做多记录',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'SHORT',\r\n                                        text: '做空记录',\r\n                                        styles: {\r\n                                            root: {\r\n                                                width: 100,\r\n                                                float: \"left\",\r\n                                                marginTop: 0\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ]}\r\n\r\n                                onChange={(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\r\n                                    if (option) {\r\n                                        this.setState({ \"directionChoice\": option.key })\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Stack>\r\n                        <Stack styles={{ root: { height: 30 } }}>\r\n                            <Checkbox label=\"合并显示\" styles={{ root: { marginTop: 3 } }} onChange={(event: any) => {\r\n                                this.setState({ \"showMerged\": event.currentTarget.checked })\r\n                            }} />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(TradeDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { DefaultButton } from '@fluentui/react/lib/Button';\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\nimport { isDevEnv } from '../../../utils';\r\nimport { toast } from 'react-toastify';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ContextualMenu } from '@fluentui/react/lib/ContextualMenu';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\n\r\nconst { \r\n    ExchangeEnum,\r\n    ProductClassEnum, \r\n    CurrencyEnum,\r\n    OrderPriceTypeEnum,\r\n    DirectionEnum,\r\n    OffsetFlagEnum,\r\n    TimeConditionEnum,\r\n    VolumeConditionEnum,\r\n    ContingentConditionEnum,\r\n    HedgeFlagEnum,\r\n } = xyz.redtorch.pb\r\n\r\n\r\nexport const TradeBoardPage = inject('authenticationStore', 'tradeActionStore', 'tradeAccountStore')(observer(class TradeBoardPage extends React.Component<any> {\r\n\r\n    public state = { showSubmitOrderModal: false, confirmPrice: null, actionType: '' };\r\n\r\n\r\n    public render() {\r\n\r\n        const { tradeActionStore, tradeAccountStore } = this.props;\r\n\r\n        let priceTick = 0.0001\r\n        let uniformSymbol = \"\"\r\n        let shortName = \"\"\r\n        if (tradeActionStore.selectedContract) {\r\n            if (tradeActionStore.selectedContract.priceTick) {\r\n                priceTick = tradeActionStore.selectedContract.priceTick\r\n            }\r\n\r\n            if (tradeActionStore.selectedContract.uniformSymbol) {\r\n                uniformSymbol = tradeActionStore.selectedContract.uniformSymbol\r\n            }\r\n\r\n            if (tradeActionStore.selectedContract.name) {\r\n                shortName = tradeActionStore.selectedContract.name\r\n            }\r\n        }\r\n\r\n        const generateAccountVolumeDom = (isFinal: any) => {\r\n\r\n            const tmpAccountVolumeDomList: any[] = []\r\n\r\n            let key = 0;\r\n            tradeAccountStore.selectedAccountIdSet.forEach((element: any) => {\r\n                key++\r\n                if (tradeAccountStore.accountMap.has(element)) {\r\n                    const account = tradeAccountStore.accountMap.get(element)\r\n                    const finalVolume = this.state[`CONFIRM_VOLUME_KEY_${account.accountId}`] ? this.state[`CONFIRM_VOLUME_KEY_${account.accountId}`] : tradeActionStore.volume\r\n                    if (!isFinal || (finalVolume && finalVolume > 0)) {\r\n                        tmpAccountVolumeDomList.push(\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }} key={key}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                        <TextField style={{ width: \"100%\" }} defaultValue={account.holder} disabled={true} />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                        <TextField style={{ width: \"100%\" }} defaultValue={account.accountId} disabled={true} />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"calc(33%)\" } }}>\r\n                                        <TextField\r\n                                            style={{ color: \"rgb(80, 255, 255)\", width: \"100%\" }}\r\n                                            className=\"trade-info-color\"\r\n                                            defaultValue={`${finalVolume}`}\r\n                                            type=\"number\"\r\n                                            step={1}\r\n                                            min={0}\r\n                                            onChange={(event: any, newValue?: any) => {\r\n                                                if (isDevEnv) {\r\n                                                    console.log(`账户${account.accountId}变更数量${newValue}`)\r\n                                                }\r\n                                                const newState = {}\r\n                                                newState[`CONFIRM_VOLUME_KEY_${account.accountId}`] = newValue\r\n                                                this.setState(newState)\r\n                                            }}\r\n                                        />\r\n\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        )\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (tmpAccountVolumeDomList.length === 0) {\r\n                if (isFinal) {\r\n\r\n                    tmpAccountVolumeDomList.push(\r\n                        <Stack.Item styles={{ root: { width: \"100%\" } }} key={key}>\r\n                            <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"请选择至少为一个账户输入数量\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"请选择至少为一个账户输入数量\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33%)\" } }}>\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\", width: \"100%\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={\"0\"}\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Stack.Item>\r\n                    )\r\n                } else {\r\n                    tmpAccountVolumeDomList.push(\r\n                        <Stack.Item styles={{ root: { width: \"100%\" } }} key={key}>\r\n                            <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"请选择\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33% - 5px)\" } }}>\r\n                                    <TextField style={{ width: \"100%\" }} defaultValue={\"至少一个账户\"} disabled={true} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(33%)\" } }}>\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\", width: \"100%\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={\"0\"}\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Stack.Item>\r\n                    )\r\n\r\n                }\r\n            }\r\n            return tmpAccountVolumeDomList;\r\n        }\r\n\r\n        const accountVolumeDomList = generateAccountVolumeDom(false)\r\n\r\n        const execOrders = (direction: number, offsetFlag: number) => {\r\n            if (tradeActionStore.orderPriceType !== \"ANY\" && !this.state.confirmPrice) {\r\n                toast.error(`发单错误,请确定价格`)\r\n                return;\r\n            }\r\n\r\n            let submitFlag = false;\r\n            tradeAccountStore.selectedAccountIdSet.forEach((accountId: any) => {\r\n                const finalVolume = this.state[`CONFIRM_VOLUME_KEY_${accountId}`] ? this.state[`CONFIRM_VOLUME_KEY_${accountId}`] : tradeActionStore.volume\r\n\r\n                if (!finalVolume || finalVolume <= 0) {\r\n                    console.warn(`发单警告,数量异常，账户ID:${accountId},数量:${finalVolume}`)\r\n                } else {\r\n                    submitFlag = true;\r\n                    tradeActionStore.submitOrder(\r\n                        tradeActionStore.selectedContract,\r\n                        direction, \r\n                        offsetFlag,\r\n                        this.state.confirmPrice,\r\n                        tradeActionStore.orderPriceType,\r\n                        finalVolume, \r\n                        tradeActionStore.timeCondition,\r\n                        tradeActionStore.volumeCondition,\r\n                        tradeActionStore.hedgeFlag,\r\n                        tradeActionStore.minVolume,\r\n                        accountId, \r\n                        tradeActionStore.stopPrice,\r\n                        tradeActionStore.contingentCondition,\r\n                        uuidv4())\r\n                }\r\n            });\r\n            if (submitFlag) {\r\n                toast(\"本地信息:提交定单操作已执行\", { autoClose: 5000, type: \"info\" })\r\n            }\r\n            this.closeSubmitOrderModal()\r\n\r\n        }\r\n\r\n        const buyButtonForModal =\r\n            <Stack.Item align=\"center\" key={\"buyButtonForModal\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_Open)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n        const coverButtonForModal = [\r\n            <Stack.Item align=\"center\" key={\"coverButtonForModal0\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平昨空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_CloseYesterday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平今空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_CloseToday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>,\r\n            <Stack.Item align=\"center\" key={\"coverButtonForModal1\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#a4373a\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Buy, OffsetFlagEnum.OF_Close)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n        ]\r\n\r\n        const shortButtonForModal =\r\n            <Stack.Item align=\"center\" key={\"shortButtonForModal\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"空\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_Open)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n\r\n        const sellButtonForModal = [\r\n\r\n            <Stack.Item align=\"center\" key={'sellButtonForModal0'}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平昨多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_CloseYesterday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平今多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_CloseToday)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>,\r\n            <Stack.Item align=\"center\" key={\"sellButtonForModal1\"}>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%', overflowX: 'auto' } }}>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60, background: \"#217346\" } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"平多\"\r\n                            onClick={\r\n                                () => execOrders(DirectionEnum.D_Sell, OffsetFlagEnum.OF_Close)\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                    <Stack styles={{ root: { width: 300 } }}>\r\n                        <DefaultButton\r\n                            styles={{ root: { height: 60 } }}\r\n                            allowDisabledFocus={true}\r\n                            text=\"取消并关闭\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.closeSubmitOrderModal()\r\n                                }\r\n                            }\r\n                        />\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack.Item>\r\n        ]\r\n\r\n        const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\", paddingLeft: 5 } }}>\r\n                <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                    <Stack horizontal={true} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 0 }} styles={{ root: { width: \"calc(33% - 2px)\", borderRight: \"solid 2px rgb(25,25,25)\" } }}>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: '100%', background: \"rgb(25,25,25)\" } }} >\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', paddingTop: 5, paddingBottom: 5 } }}>\r\n                                    选项\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: '100%' } }} >\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { height: 425, width: '100%', paddingRight: 5, overflowY: 'auto' } }}>\r\n                                    <Dropdown label=\"价格类型\"\r\n                                        defaultSelectedKey={tradeActionStore.orderPriceType}\r\n                                        options={\r\n                                            [\r\n                                                { key: OrderPriceTypeEnum.OPT_LimitPrice, text: '限价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_AnyPrice, text: '市价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_FiveLevelPrice, text: '五档' },\r\n                                                { key: OrderPriceTypeEnum.OPT_BestPrice, text: '最优价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_LastPrice, text: '最新价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_LastPricePlusOneTicks, text: '最新价浮动上浮1个ticks' },\r\n                                                { key: OrderPriceTypeEnum.OPT_LastPricePlusThreeTicks, text: '最新价浮动上浮3个ticks' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setOrderPriceType(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Dropdown label=\"自动填价\"\r\n                                        defaultSelectedKey={tradeActionStore.autoFillOrderPriceType}\r\n                                        options={\r\n                                            [\r\n                                                { key: 'LAST', text: '最新' },\r\n                                                { key: 'UPPER_LIMIT', text: '涨停' },\r\n                                                { key: 'ASK1', text: '卖一' },\r\n                                                { key: 'BID1', text: '买一' },\r\n                                                { key: 'LOWER_LIMIT', text: '跌停' },\r\n                                                { key: 'MANUAL', text: '手动' },\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setAutoFillOrderPriceType(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        label=\"价格\"\r\n                                        type=\"number\"\r\n                                        step={priceTick}\r\n                                        value={tradeActionStore.price}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setPrice(newValue)} />\r\n\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={`${tradeActionStore.volume}`}\r\n                                        label=\"数量\"\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setVolume(newValue)}\r\n                                    />\r\n                                    <Dropdown label=\"投机套保标志\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.hedgeFlag}\r\n                                        options={\r\n                                            [\r\n                                                { key: HedgeFlagEnum.HF_Speculation, text: '投机' },\r\n                                                { key: HedgeFlagEnum.HF_Arbitrage, text: '套利' },\r\n                                                { key: HedgeFlagEnum.HF_Hedge, text: '套保' },\r\n                                                { key: HedgeFlagEnum.HF_MarketMaker, text: '做市商' },\r\n                                                { key: HedgeFlagEnum.HF_SpecHedge, text: '第一腿投机第二腿套保 大商所专用' },\r\n                                                { key: HedgeFlagEnum.HF_HedgeSpec, text: '第一腿套保第二腿投机 大商所专用' }\r\n                                                \r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setHedgeFlag(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Dropdown label=\"时效类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.timeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: TimeConditionEnum.TC_GFD, text: 'GFD(当日有效)' },\r\n                                                { key: TimeConditionEnum.TC_GTC, text: 'GTC(撤销前有效)' },\r\n                                                { key: TimeConditionEnum.TC_IOC, text: 'IOC(立即成交,否则撤销)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setTimeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                    <Dropdown label=\"成交量类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.volumeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: VolumeConditionEnum.VC_AV, text: 'AV(任何数量)' },\r\n                                                { key: VolumeConditionEnum.VC_MV, text: 'MV(最小数量)' },\r\n                                                { key: VolumeConditionEnum.VC_CV, text: 'CV(全部数量)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setVolumeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        className=\"trade-info-color\"\r\n                                        defaultValue={`${tradeActionStore.minVolume}`}\r\n                                        label=\"最小成交量\"\r\n                                        type=\"number\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setMinVolume(newValue)}\r\n                                    />\r\n                                    <Dropdown label=\"触发条件\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.contingentCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: ContingentConditionEnum.CC_Immediately, text: '立即' },\r\n                                                { key: ContingentConditionEnum.CC_LastPriceGreaterEqualStopPrice, text: '最新价大于等于条件价' },\r\n                                                { key: ContingentConditionEnum.CC_LastPriceLesserEqualStopPrice, text: '最新价小于等于条件价' },\r\n                                                { key: ContingentConditionEnum.CC_LocalLastPriceGreaterEqualStopPrice, text: '(本地)最新价大于等于条件价' },\r\n                                                { key: ContingentConditionEnum.CC_LocalLastPriceLesserEqualStopPrice, text: '(本地)最新价小于等于条件价' },\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: number) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setContingentCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        label=\"条件价格\"\r\n                                        type=\"number\"\r\n                                        step={priceTick}\r\n                                        defaultValue={tradeActionStore.stopPrice}\r\n                                        onChange={(event: any, newValue?: any) => tradeActionStore.setStopPrice(newValue)} />\r\n\r\n                                    \r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n\r\n                        <Stack tokens={{ childrenGap: 5 }} styles={{ root: { width: '67%' } }}>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: '100%', background: \"rgb(25,25,25)\" } }} >\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', paddingTop: 5, paddingBottom: 5, paddingLeft: 5 } }}>\r\n                                    <Stack styles={{ root: { width: \"33%\" } }}>\r\n                                        名称\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"33%\" } }}>\r\n                                        账户ID\r\n                                    </Stack>\r\n                                    <Stack>\r\n                                        交易数量\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: '100%', height: 340, paddingLeft: 5 } }} >\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { height: '100%', width: '100%', overflowY: 'auto' } }}>\r\n                                    {accountVolumeDomList}\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 3 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"重用数量\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.reuseVolume();\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            &nbsp;\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%', paddingRight: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#a4373a\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"多\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_BUY\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n\r\n                                        <Stack styles={{ root: { width: '50%', paddingLeft: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#217346\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"空\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_SHORT\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item align=\"center\" styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 3 }} styles={{ root: { width: '100%' } }}>\r\n\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"重置数量\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.resetVolume();\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n                                        <Stack styles={{ root: { width: '50%' } }} >\r\n                                            &nbsp;\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n                                    <Stack horizontal={true} styles={{ root: { width: 'calc(50% - 3px)' } }} >\r\n                                        <Stack styles={{ root: { width: '50%', paddingRight: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#a4373a\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"平空\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_COVER\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n                                        <Stack styles={{ root: { width: '50%', paddingLeft: 2 } }} >\r\n                                            <DefaultButton\r\n                                                styles={{ root: { background: \"#217346\", paddingLeft: 0, paddingRight: 0, minWidth: 60 } }}\r\n                                                allowDisabledFocus={true}\r\n                                                text=\"平多\"\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        this.openSubmitOrderModal(\"ACTION_TYPE_SELL\", tradeActionStore.price);\r\n                                                    }\r\n                                                }\r\n                                            />\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n\r\n                </Stack.Item>\r\n\r\n                <Modal\r\n                    isOpen={this.state.showSubmitOrderModal}\r\n                    isBlocking={true}\r\n                    onDismiss={() => this.closeSubmitOrderModal()}\r\n                    dragOptions={\r\n                        {\r\n                            moveMenuItemText: 'Move',\r\n                            closeMenuItemText: 'Close',\r\n                            menu: ContextualMenu\r\n                        }\r\n                    }\r\n                >\r\n                    <Stack tokens={{ childrenGap: 5, padding:20 }}>\r\n                        <Stack.Item align=\"center\" styles={{ root: { width: '100%' } }}>\r\n                            <Stack styles={{ root: { textAlign: \"center\", fontSize: FontSizes.large } }}>\r\n                                定单确认\r\n                            </Stack>\r\n                            <Stack horizontal={true} tokens={{ childrenGap: 5 }} styles={{ root: { width: '100%' } }}>\r\n                                <Stack tokens={{ childrenGap: 0 }} styles={{ root: { width: \"calc(50% - 5px)\" } }}>\r\n                                    {\r\n                                        tradeActionStore.selectedContract ?\r\n                                            <TooltipHost\r\n                                                calloutProps={{ gapSpace: 20 }}\r\n                                                tooltipProps={{\r\n                                                    onRenderContent: () => {\r\n                                                        return (\r\n                                                            <div>\r\n                                                                <ul style={{ margin: 0, padding: 0 }}>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约代码:</span><span>{tradeActionStore.selectedContract.symbol}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>简称:</span><span>{tradeActionStore.selectedContract.name}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>完整名称:</span><span>{tradeActionStore.selectedContract.fullName}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[tradeActionStore.selectedContract.exchange]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[tradeActionStore.selectedContract.productClass]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{tradeActionStore.selectedContract.thirdPartyId}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[tradeActionStore.selectedContract.currency]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{tradeActionStore.selectedContract.multiplier}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{tradeActionStore.selectedContract.priceTick}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{tradeActionStore.selectedContract.lastTradeDateOrContractMonth}</span></li>\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                                delay={TooltipDelay.long}\r\n                                                directionalHint={DirectionalHint.bottomCenter}\r\n                                            >\r\n                                                <TextField style={{ color: \"rgb(220, 220, 10)\" }} className=\"trade-remind-color-important\" label=\"合约代码\" defaultValue={uniformSymbol} disabled={true} />\r\n                                            </TooltipHost> : null\r\n                                    }\r\n                                    {\r\n                                        tradeActionStore.selectedContract ? null :\r\n                                            <TextField label=\"合约代码\" defaultValue={uniformSymbol} disabled={true} />\r\n                                    }\r\n                                    <Dropdown label=\"价格类型\"\r\n                                        defaultSelectedKey={tradeActionStore.orderPriceType}\r\n                                        options={\r\n                                            [\r\n                                                { key: OrderPriceTypeEnum.OPT_LimitPrice, text: '限价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_AnyPrice, text: '市价' },\r\n                                                { key: OrderPriceTypeEnum.OPT_FiveLevelPrice, text: '五档' }\r\n                                            ]\r\n                                        }\r\n\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setOrderPriceType(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <TextField\r\n                                        style={{ color: \"rgb(80, 255, 255)\" }}\r\n                                        label=\"确认价格\"\r\n                                        type=\"number\"\r\n                                        step={priceTick}\r\n                                        min={0}\r\n                                        defaultValue={`${this.state.confirmPrice}`}\r\n                                        onChange={(event: any, newValue?: any) => newValue ? this.setState({ confirmPrice: newValue }) : null} />\r\n                                </Stack>\r\n                                <Stack styles={{ root: { width: \"calc(50% - 5px)\" } }}>\r\n                                    <TextField style={{ color: \"rgb(220, 220, 10)\" }} className=\"trade-remind-color-important\" label=\"合约名称\" defaultValue={shortName} disabled={true} />\r\n                                    <Dropdown label=\"时效类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.timeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: TimeConditionEnum.TC_GFD, text: 'GFD(当日有效)' },\r\n                                                { key: TimeConditionEnum.TC_GTC, text: 'GTC(撤销前有效)' },\r\n                                                { key: TimeConditionEnum.TC_IOC, text: 'IOC(立即成交,否则撤销)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setTimeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Dropdown label=\"成交量类型\"\r\n                                        styles={{ root: { marginTop: 133 } }}\r\n                                        defaultSelectedKey={tradeActionStore.volumeCondition}\r\n                                        options={\r\n                                            [\r\n                                                { key: VolumeConditionEnum.VC_AV, text: 'AV(任何数量)' },\r\n                                                { key: VolumeConditionEnum.VC_MV, text: 'MV(最小数量)' },\r\n                                                { key: VolumeConditionEnum.VC_CV, text: 'CV(全部数量)' }\r\n                                            ]\r\n                                        }\r\n                                        onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                            if (option) {\r\n                                                tradeActionStore.setVolumeCondition(option.key)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                </Stack>\r\n                            </Stack>\r\n                        </Stack.Item>\r\n                        {generateAccountVolumeDom(true)}\r\n                        {this.state.actionType === \"ACTION_TYPE_BUY\" ? buyButtonForModal : null}\r\n                        {this.state.actionType === \"ACTION_TYPE_SELL\" ? sellButtonForModal : null}\r\n                        {this.state.actionType === \"ACTION_TYPE_SHORT\" ? shortButtonForModal : null}\r\n                        {this.state.actionType === \"ACTION_TYPE_COVER\" ? coverButtonForModal : null}\r\n                    </Stack>\r\n                </Modal>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n    closeSubmitOrderModal = () => {\r\n        const newState = {}\r\n        Object.keys(this.state).forEach(\r\n            (element: any) => {\r\n                if (`${element}`.startsWith(\"CONFIRM_VOLUME_KEY_\")) {\r\n                    newState[`PRE_${element}`] = this.state[element]\r\n                    newState[element] = undefined\r\n                }\r\n            }\r\n        )\r\n        this.setState({ showSubmitOrderModal: false, confirmPrice: null, actionType: '', ...newState })\r\n    }\r\n\r\n    openSubmitOrderModal = (actionType: string, price: number|string) => {\r\n\r\n        const { tradeActionStore, tradeAccountStore } = this.props;\r\n        if (!tradeActionStore.selectedContract) {\r\n            toast.error(\"请选择合约\");\r\n            return;\r\n        }\r\n        if (!tradeAccountStore.selectedAccountIdSet || tradeAccountStore.selectedAccountIdSet.size <= 0) {\r\n            toast.error(\"请选择至少一个账户\");\r\n            return;\r\n        }\r\n\r\n        if(!price||price === \"\"){\r\n            toast.error(\"请确定价格\");\r\n            return;\r\n        }\r\n\r\n        const newState = {}\r\n        let counter = 0;\r\n        tradeAccountStore.selectedAccountIdSet.forEach((accountId: any) => {\r\n            if (this.state[`CONFIRM_VOLUME_KEY_${accountId}`] && this.state[`CONFIRM_VOLUME_KEY_${accountId}`] !== 0) {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = this.state[`CONFIRM_VOLUME_KEY_${accountId}`]\r\n                counter += 1\r\n            } else if (tradeActionStore.volume && tradeActionStore.volume !== 0) {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = tradeActionStore.volume\r\n                counter += 1\r\n            }\r\n        });\r\n        if (counter > 0) {\r\n            tradeActionStore.setVolume(0)\r\n            this.setState({ showSubmitOrderModal: true, confirmPrice: price, \"actionType\": actionType, ...newState })\r\n        } else {\r\n            toast.error(\"请至少为一个账户输入数量\")\r\n        }\r\n    }\r\n\r\n    reuseVolume = () => {\r\n\r\n        const { tradeAccountStore } = this.props;\r\n\r\n        const newState = {}\r\n\r\n        if (!tradeAccountStore.selectedAccountIdSet || tradeAccountStore.selectedAccountIdSet.size <= 0) {\r\n            toast.error(\"请选择至少一个账户\");\r\n            return;\r\n        }\r\n\r\n        let counter = 0;\r\n        tradeAccountStore.selectedAccountIdSet.forEach((accountId: any) => {\r\n            if (this.state[`PRE_CONFIRM_VOLUME_KEY_${accountId}`]) {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = this.state[`PRE_CONFIRM_VOLUME_KEY_${accountId}`]\r\n            } else {\r\n                newState[`CONFIRM_VOLUME_KEY_${accountId}`] = 0\r\n                counter += 1\r\n            }\r\n        });\r\n\r\n        if (counter > 0) {\r\n            toast.warn(\"部分账户数量输入为0\")\r\n        }\r\n\r\n        this.setState(newState)\r\n\r\n\r\n    }\r\n\r\n    resetVolume = () => {\r\n\r\n        const { tradeActionStore } = this.props\r\n        const newState = {}\r\n\r\n        Object.keys(this.state).forEach(\r\n            (element: any) => {\r\n                if (`${element}`.startsWith(\"CONFIRM_VOLUME_KEY_\")) {\r\n                    newState[element] = undefined\r\n                }\r\n            }\r\n        )\r\n        tradeActionStore.setVolume(0)\r\n\r\n        this.setState(newState)\r\n\r\n    }\r\n\r\n}));\r\n\r\nexport default withRouter(TradeBoardPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { getNumberOfDecimalDigits, numberFormat, checkEffectiveNumber, timestampFormat } from '../../../utils';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { isNumber } from 'util';\r\nimport { xyz } from \"../../../node/pb/pb\";\r\n\r\nconst {ProductClassEnum, ExchangeEnum, CurrencyEnum} = xyz.redtorch.pb\r\n\r\n\r\n\r\nexport const MarketDetailsPage = inject('authenticationStore', 'tradeActionStore', 'tradeTickStore')(observer(class MarketDetailsPage extends React.Component<any> {\r\n\r\n    public state = { password: '', newPassword: '' };\r\n\r\n\r\n    public render() {\r\n\r\n        const { tradeActionStore, tradeTickStore } = this.props\r\n\r\n        const { selectedTick } = tradeTickStore\r\n\r\n        let askPrice1: number | string = \"--\";\r\n        let askPrice1ClassName = \"\";\r\n        let askVolume1 = \"--\";\r\n        let askPrice2: number | string = \"--\";\r\n        let askPrice2ClassName = \"\";\r\n        let askVolume2 = \"--\";\r\n        let askPrice3: number | string = \"--\";\r\n        let askPrice3ClassName = \"\";\r\n        let askVolume3 = \"--\";\r\n        let askPrice4: number | string = \"--\";\r\n        let askPrice4ClassName = \"\";\r\n        let askVolume4 = \"--\";\r\n        let askPrice5: number | string = \"--\";\r\n        let askPrice5ClassName = \"\";\r\n        let askVolume5 = \"--\";\r\n\r\n        let bidPrice1: number | string = \"--\";\r\n        let bidPrice1ClassName = \"\";\r\n        let bidVolume1 = \"--\";\r\n        let bidPrice2: number | string = \"--\";\r\n        let bidPrice2ClassName = \"\";\r\n        let bidVolume2 = \"--\";\r\n        let bidPrice3: number | string = \"--\";\r\n        let bidPrice3ClassName = \"\";\r\n        let bidVolume3 = \"--\";\r\n        let bidPrice4: number | string = \"--\";\r\n        let bidPrice4ClassName = \"\";\r\n        let bidVolume4 = \"--\";\r\n        let bidPrice5: number | string = \"--\";\r\n        let bidPrice5ClassName = \"\";\r\n        let bidVolume5 = \"--\"\r\n\r\n        // ------------------------\r\n\r\n        let lastPrice: number | string = \"--\";\r\n        let lastPriceClassName = \"\";\r\n        let priceDiff: number | string = \"--\";\r\n        let pctChange: number | string = \"--\";\r\n        let openPrice: number | string = \"--\";\r\n        let openPriceClassName = \"\";\r\n        let highPrice: number | string = \"--\";\r\n        let highPriceClassName = \"\";\r\n        let lowPrice: number | string = \"--\";\r\n        let lowPriceClassName = \"\";\r\n        let upperLimit: number | string = \"--\";\r\n        let lowerLimit: number | string = \"--\";\r\n        let preClosePrice: number | string = \"--\";\r\n        let preSettlePrice: number | string = \"--\";\r\n        let settlePrice: number | string = \"--\";\r\n        let settlePriceClassName = \"\";\r\n        let volume = \"--\"\r\n        let volumeDelta = \"--\"\r\n        let openInterest = \"--\"\r\n        let dayOpenInterestChange = \"--\"\r\n        let time = \"--\"\r\n\r\n        if (selectedTick) {\r\n            try {\r\n                let numberOfDecimalDigits = 6\r\n                if (tradeActionStore.selectedContract && tradeActionStore.selectedContract.priceTick && tradeActionStore.selectedContract.priceTick > 0) {\r\n                    const tmpNumberOfDecimalDigits = getNumberOfDecimalDigits(tradeActionStore.selectedContract.priceTick)\r\n                    if (tmpNumberOfDecimalDigits || tmpNumberOfDecimalDigits === 0) {\r\n                        numberOfDecimalDigits = tmpNumberOfDecimalDigits\r\n                    }\r\n                }\r\n\r\n                let preReferencePrice;\r\n                if (selectedTick.preSettlePrice && selectedTick.preSettlePrice !== 0 && selectedTick.preSettlePrice !== Number.MAX_VALUE) {\r\n                    preReferencePrice = selectedTick.preSettlePrice\r\n                } else if (selectedTick.preClosePrice && selectedTick.preClosePrice !== 0 && selectedTick.preClosePrice !== Number.MAX_VALUE) {\r\n                    preReferencePrice = selectedTick.preClosePrice\r\n                }\r\n\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 1 && selectedTick.askPrice[0] !== Number.MAX_VALUE) {\r\n                    askPrice1 = selectedTick.askPrice[0]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice1 > preReferencePrice) {\r\n                            askPrice1ClassName = \"trade-long-color\"\r\n                        } else if (askPrice1 < preReferencePrice) {\r\n                            askPrice1ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice1 = numberFormat(Number(askPrice1), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 1 && selectedTick.askVolume[0] !== Number.MAX_VALUE) {\r\n                    askVolume1 = selectedTick.askVolume[0]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 2 && selectedTick.askPrice[1] !== Number.MAX_VALUE) {\r\n                    askPrice2 = selectedTick.askPrice[1]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice2 > preReferencePrice) {\r\n                            askPrice2ClassName = \"trade-long-color\"\r\n                        } else if (askPrice2 < preReferencePrice) {\r\n                            askPrice2ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice2 = numberFormat(Number(askPrice2), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 2 && selectedTick.askVolume[1] !== Number.MAX_VALUE) {\r\n                    askVolume2 = selectedTick.askVolume[1]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 3 && selectedTick.askPrice[2] !== Number.MAX_VALUE) {\r\n                    askPrice3 = selectedTick.askPrice[2]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice3 > preReferencePrice) {\r\n                            askPrice3ClassName = \"trade-long-color\"\r\n                        } else if (askPrice3 < preReferencePrice) {\r\n                            askPrice3ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice3 = numberFormat(Number(askPrice3), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 3 && selectedTick.askVolume[2] !== Number.MAX_VALUE) {\r\n                    askVolume3 = selectedTick.askVolume[2]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 4 && selectedTick.askPrice[3] !== Number.MAX_VALUE) {\r\n                    askPrice4 = selectedTick.askPrice[3]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice4 > preReferencePrice) {\r\n                            askPrice4ClassName = \"trade-long-color\"\r\n                        } else if (askPrice4 < preReferencePrice) {\r\n                            askPrice4ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice4 = numberFormat(Number(askPrice4), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 4 && selectedTick.askVolume[3] !== Number.MAX_VALUE) {\r\n                    askVolume4 = selectedTick.askVolume[3]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.askPrice && selectedTick.askPrice.length >= 5 && selectedTick.askPrice[4] !== Number.MAX_VALUE) {\r\n                    askPrice5 = selectedTick.askPrice[4]\r\n                    if (preReferencePrice) {\r\n                        if (askPrice5 > preReferencePrice) {\r\n                            askPrice5ClassName = \"trade-long-color\"\r\n                        } else if (askPrice5 < preReferencePrice) {\r\n                            askPrice5ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    askPrice5 = numberFormat(Number(askPrice5), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.askVolume && selectedTick.askVolume.length >= 5 && selectedTick.askVolume[4] !== Number.MAX_VALUE) {\r\n                    askVolume5 = selectedTick.askVolume[4]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 1 && selectedTick.bidPrice[0] !== Number.MAX_VALUE) {\r\n                    bidPrice1 = selectedTick.bidPrice[0]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice1 > preReferencePrice) {\r\n                            bidPrice1ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice1 < preReferencePrice) {\r\n                            bidPrice1ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice1 = numberFormat(Number(bidPrice1), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 1 && selectedTick.bidVolume[0] !== Number.MAX_VALUE) {\r\n                    bidVolume1 = selectedTick.bidVolume[0]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 2 && selectedTick.bidPrice[1] !== Number.MAX_VALUE) {\r\n                    bidPrice2 = selectedTick.bidPrice[1]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice2 > preReferencePrice) {\r\n                            bidPrice2ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice2 < preReferencePrice) {\r\n                            bidPrice2ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice2 = numberFormat(Number(bidPrice2), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 2 && selectedTick.bidVolume[1] !== Number.MAX_VALUE) {\r\n                    bidVolume2 = selectedTick.bidVolume[1]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 3 && selectedTick.bidPrice[2] !== Number.MAX_VALUE) {\r\n                    bidPrice3 = selectedTick.bidPrice[2]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice3 > preReferencePrice) {\r\n                            bidPrice3ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice3 < preReferencePrice) {\r\n                            bidPrice3ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice3 = numberFormat(Number(bidPrice3), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 3 && selectedTick.bidVolume[2] !== Number.MAX_VALUE) {\r\n                    bidVolume3 = selectedTick.bidVolume[2]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 4 && selectedTick.bidPrice[3] !== Number.MAX_VALUE) {\r\n                    bidPrice4 = selectedTick.bidPrice[3]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice4 > preReferencePrice) {\r\n                            bidPrice4ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice4 < preReferencePrice) {\r\n                            bidPrice4ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice4 = numberFormat(Number(bidPrice4), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 4 && selectedTick.bidVolume[3] !== Number.MAX_VALUE) {\r\n                    bidVolume4 = selectedTick.bidVolume[3]\r\n                }\r\n                //\r\n                if (selectedTick && selectedTick.bidPrice && selectedTick.bidPrice.length >= 5 && selectedTick.bidPrice[4] !== Number.MAX_VALUE) {\r\n                    bidPrice5 = selectedTick.bidPrice[4]\r\n                    if (preReferencePrice) {\r\n                        if (bidPrice5 > preReferencePrice) {\r\n                            bidPrice5ClassName = \"trade-long-color\"\r\n                        } else if (bidPrice5 < preReferencePrice) {\r\n                            bidPrice5ClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    bidPrice5 = numberFormat(Number(bidPrice5), numberOfDecimalDigits)\r\n                }\r\n                if (selectedTick && selectedTick.bidVolume && selectedTick.bidVolume.length >= 5 && selectedTick.bidVolume[4] !== Number.MAX_VALUE) {\r\n                    bidVolume5 = selectedTick.bidVolume[4]\r\n                }\r\n                // -----------------------------\r\n\r\n\r\n                if (checkEffectiveNumber(selectedTick.lastPrice)) {\r\n                    lastPrice = selectedTick.lastPrice\r\n                    if (preReferencePrice) {\r\n                        if (lastPrice > preReferencePrice) {\r\n                            lastPriceClassName = \"trade-long-color\"\r\n                        } else if (lastPrice < preReferencePrice) {\r\n                            lastPriceClassName = \"trade-short-color\"\r\n                        }\r\n                        priceDiff = Number(lastPrice) - preReferencePrice\r\n                        pctChange = numberFormat(priceDiff / preReferencePrice * 100, 2)\r\n                        priceDiff = numberFormat(Number(priceDiff), numberOfDecimalDigits)\r\n                    }\r\n                    lastPrice = numberFormat(Number(lastPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.openPrice)) {\r\n                    openPrice = selectedTick.openPrice\r\n                    if (preReferencePrice) {\r\n                        if (openPrice > preReferencePrice) {\r\n                            openPriceClassName = \"trade-long-color\"\r\n                        } else if (openPrice < preReferencePrice) {\r\n                            openPriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    openPrice = numberFormat(Number(openPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.highPrice)) {\r\n                    highPrice = selectedTick.highPrice\r\n                    if (preReferencePrice) {\r\n                        if (highPrice > preReferencePrice) {\r\n                            highPriceClassName = \"trade-long-color\"\r\n                        } else if (highPrice < preReferencePrice) {\r\n                            highPriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    highPrice = numberFormat(Number(highPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.lowPrice)) {\r\n                    lowPrice = selectedTick.lowPrice\r\n                    if (preReferencePrice) {\r\n                        if (lowPrice > preReferencePrice) {\r\n                            lowPriceClassName = \"trade-long-color\"\r\n                        } else if (lowPrice < preReferencePrice) {\r\n                            lowPriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    lowPrice = numberFormat(Number(lowPrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.settlePrice)) {\r\n                    settlePrice = selectedTick.settlePrice\r\n                    if (preReferencePrice) {\r\n                        if (settlePrice > preReferencePrice) {\r\n                            settlePriceClassName = \"trade-long-color\"\r\n                        } else if (settlePrice < preReferencePrice) {\r\n                            settlePriceClassName = \"trade-short-color\"\r\n                        }\r\n                    }\r\n                    settlePrice = numberFormat(Number(settlePrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.upperLimit)) {\r\n                    upperLimit = selectedTick.upperLimit\r\n                    upperLimit = numberFormat(Number(upperLimit), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.lowerLimit)) {\r\n                    lowerLimit = selectedTick.lowerLimit\r\n                    lowerLimit = numberFormat(Number(lowerLimit), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.preClosePrice)) {\r\n                    preClosePrice = selectedTick.preClosePrice\r\n                    preClosePrice = numberFormat(Number(preClosePrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.preSettlePrice)) {\r\n                    preSettlePrice = selectedTick.preSettlePrice\r\n                    preSettlePrice = numberFormat(Number(preSettlePrice), numberOfDecimalDigits)\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.volume)) {\r\n                    volume = selectedTick.volume\r\n                }\r\n                if (checkEffectiveNumber(selectedTick.volumeDelta)) {\r\n                    volumeDelta = selectedTick.volumeDelta\r\n                }\r\n\r\n\r\n                if (checkEffectiveNumber(selectedTick.openInterest)) {\r\n                    openInterest = selectedTick.openInterest\r\n                }\r\n\r\n                if (checkEffectiveNumber(selectedTick.openInterest)\r\n                    && checkEffectiveNumber(selectedTick.preOpenInterest)) {\r\n                    dayOpenInterestChange = `${selectedTick.openInterest - selectedTick.preOpenInterest}`\r\n                }\r\n\r\n                if (isNumber(selectedTick.actionTimestamp)) {\r\n                    time = timestampFormat(selectedTick.actionTimestamp, \"HH:mm:ss.SSS\")\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n\r\n        }\r\n\r\n        const { selectedContract } = tradeActionStore\r\n\r\n\r\n        const { componentHeight } = this.props;\r\n\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { height: componentHeight, background: \"rgb(17,17,17)\", width: \"100%\", paddingTop: 2, fontSize: FontSizes.xSmall, overflowY: \"auto\" } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"100%\", textAlign: \"center\", fontSize: FontSizes.xLarge } }}>\r\n                                        {selectedContract ? selectedContract.name : <span>--</span>}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"100%\", textAlign: \"center\", fontSize: FontSizes.xLarge } }}>\r\n                                        <TooltipHost\r\n                                            calloutProps={{ gapSpace: 20 }}\r\n                                            tooltipProps={{\r\n                                                onRenderContent: () => {\r\n                                                    const tooltipLabelStyls: React.CSSProperties = { display: 'inline-block', width: 75, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n                                                    if (selectedContract) {\r\n                                                        return (\r\n                                                            <div>\r\n                                                                <ul style={{ margin: 0, padding: 0 }}>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约代码:</span><span>{selectedContract.symbol}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>简称:</span><span>{selectedContract.name}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>完整名称:</span><span>{selectedContract.fullName}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>交易所:</span><span>{ExchangeEnum[selectedContract.exchange]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>产品类型:</span><span>{ProductClassEnum[selectedContract.productClass]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>第三方ID:</span><span>{selectedContract.thirdPartyId}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>货币:</span><span>{CurrencyEnum[selectedContract.currency]}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>合约乘数:</span><span>{selectedContract.multiplier}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最小变动价位:</span><span>{selectedContract.priceTick}</span></li>\r\n                                                                    <li><span style={tooltipLabelStyls}>最后交易日或合约月:</span><span>{selectedContract.lastTradeDateOrContractMonth}</span></li>\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        );\r\n                                                    } else {\r\n                                                        return (\r\n                                                            <div>无合约信息</div>\r\n                                                        )\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                            delay={TooltipDelay.zero}\r\n                                            directionalHint={DirectionalHint.bottomCenter}\r\n                                        >\r\n                                            <span style={{ cursor: \"help\" }}> {selectedContract ? selectedContract.symbol : \"--\"}</span>\r\n                                        </TooltipHost>\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖五\r\n                                            </Stack>\r\n                                    <Stack className={askPrice5ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice5\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume5\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖四\r\n                                            </Stack>\r\n                                    <Stack className={askPrice4ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice4\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume4\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖三\r\n                                            </Stack>\r\n                                    <Stack className={askPrice3ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice3\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume3\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        卖二\r\n                                            </Stack>\r\n                                    <Stack className={askPrice2ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askPrice2\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            askVolume2\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3 } }}>\r\n                                        卖一\r\n                                            </Stack>\r\n                                    <Stack className={askPrice1ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            askPrice1\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            askVolume1\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3 } }}>\r\n                                        买一\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice1ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            bidPrice1\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3, fontSize: FontSizes.large } }}>\r\n                                        {\r\n                                            bidVolume1\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买二\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice2ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice2\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume2\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买三\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice3ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice3\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume3\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买四\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice4ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice4\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume4\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\", borderBottom: \"1px solid #666666\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"16%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        买五\r\n                                            </Stack>\r\n                                    <Stack className={bidPrice5ClassName} styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidPrice5\r\n                                        }\r\n                                    </Stack>\r\n                                    <Stack className=\"trade-remind-color\" styles={{ root: { width: \"42%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {\r\n                                            bidVolume5\r\n                                        }\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        最新\r\n                                            </Stack>\r\n                                    <Stack className={lastPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {lastPrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        涨跌\r\n                                            </Stack>\r\n                                    <Stack className={lastPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {pctChange}%\r\n                                            </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        现手\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {volumeDelta}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        价差\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {priceDiff}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        总手\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {volume}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        开盘\r\n                                            </Stack>\r\n                                    <Stack className={openPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {openPrice}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        持仓\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {openInterest}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        最高\r\n                                            </Stack>\r\n                                    <Stack className={highPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {highPrice}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        日增\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-info-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {dayOpenInterestChange}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        最低\r\n                                            </Stack>\r\n                                    <Stack className={lowPriceClassName} styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {lowPrice}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        昨收\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {preClosePrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        涨停\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-long-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {upperLimit}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        昨结\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {preSettlePrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        跌停\r\n                                            </Stack>\r\n                                    <Stack className=\"trade-short-color\" styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {lowerLimit}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"20%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\" } }}>\r\n                                        结算价\r\n                                            </Stack>\r\n                                    <Stack className={settlePriceClassName} styles={{ root: { width: \"30%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {settlePrice}\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"15%\", textAlign: \"left\", paddingLeft: 3, color: \"#999\", borderLeft: \"1px solid #666666\" } }}>\r\n                                        时间\r\n                                            </Stack>\r\n                                    <Stack styles={{ root: { width: \"35%\", textAlign: \"right\", paddingRight: 3 } }}>\r\n                                        {time}\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(MarketDetailsPage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { withRouter } from 'react-router';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\nimport './TradeHomePage.css';\r\nimport AccountDetailsPage from './childcomponents/AccountDetailsPage';\r\nimport PositionDetailsPage from './childcomponents/PositionDetailsPage';\r\nimport OrderDetailsPage from './childcomponents/OrderDetailsPage';\r\nimport ContractDetailsPage from './childcomponents/ContractDetailsPage';\r\nimport FavoriteContractDetailsPage from './childcomponents/FavoriteContractDetailsPage';\r\nimport TradeDetailsPage from './childcomponents/TradeDetailsPage';\r\nimport TradeBoardPage from './childcomponents/TradeBoardPage';\r\nimport MarketDetailsPage from './childcomponents/MarketDetailsPage';\r\n\r\nexport const TradeHomePage = inject('authenticationStore')(observer(class TradeHomePage extends React.Component<any> {\r\n\r\n  public state = {\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { authenticationStore } = this.props;\r\n    authenticationStore.checkLoginStatus()\r\n    this.resize()\r\n    window.addEventListener('resize', this.resize);\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n  resize = () => {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n  public render() {\r\n\r\n    return (\r\n      <Stack horizontal={true} tokens={{ childrenGap: 2 }} styles={{ root: { width: '100%' } }}>\r\n        <Stack styles={{ root: { background: \"#111111\", width: \"100%\" } }}>\r\n          <Stack.Item>\r\n            <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', borderBottom: \"2px solid rgb(25,25,25)\" } }}>\r\n              <Stack styles={{ root: { width: \"249px\", borderRight: \"1px solid rgb(102,102,102)\" } }}>\r\n                <MarketDetailsPage componentHeight={456} />\r\n              </Stack>\r\n              <Stack styles={{ root: { width: \"calc(100% - 250px)\" } }}>\r\n                <TradeBoardPage componentHeight={456} />\r\n              </Stack>\r\n            </Stack>\r\n          </Stack.Item>\r\n          <Stack.Item>\r\n            <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n              <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Pivot\r\n                  styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n                >\r\n                  <PivotItem\r\n                    headerText=\"定单\"\r\n                  >\r\n                    <OrderDetailsPage componentHeight={this.state.windowInnerHeight - 50 - 456} />\r\n                  </PivotItem>\r\n                  <PivotItem headerText=\"成交\">\r\n                    <TradeDetailsPage componentHeight={this.state.windowInnerHeight - 50 - 456} />\r\n                  </PivotItem>\r\n                </Pivot>\r\n              </Stack>\r\n            </Stack>\r\n          </Stack.Item>\r\n        </Stack>\r\n        <Stack styles={{ root: { width: \"100%\" } }}>\r\n          <Stack.Item>\r\n            <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n              <Stack styles={{ root: { background: \"#111111\", width: \"100%\" } }}>\r\n                <Pivot\r\n                  styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n                >\r\n                  <PivotItem\r\n                    headerText=\"投资组合\"\r\n                  >\r\n                    <Stack styles={{ root: { width: \"100%\" } }}>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <AccountDetailsPage componentHeight={(this.state.windowInnerHeight - 48) / 2} />\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <PositionDetailsPage componentHeight={(this.state.windowInnerHeight - 48) / 2} />\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                    </Stack>\r\n                  </PivotItem>\r\n                  <PivotItem headerText=\"常用合约\">\r\n                    <Stack styles={{ root: { width: \"100%\" } }}>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <FavoriteContractDetailsPage componentHeight={this.state.windowInnerHeight - 50} />\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                    </Stack>\r\n                  </PivotItem>\r\n                  <PivotItem headerText=\"全部合约(缓存)\">\r\n                    <Stack styles={{ root: { width: \"100%\" } }}>\r\n                      <Stack.Item>\r\n                        <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                          <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <ContractDetailsPage componentHeight={this.state.windowInnerHeight - 50} />\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Stack.Item>\r\n                    </Stack>\r\n                  </PivotItem>\r\n                </Pivot>\r\n              </Stack>\r\n\r\n            </Stack>\r\n          </Stack.Item>\r\n        </Stack>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n\r\n\r\n}));\r\n\r\nexport default withRouter(TradeHomePage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\n\r\nimport './TradePage.css';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { RouteWithSubRoutes } from '../../router'\r\n\r\nexport const TradePage = inject('routingStore')(observer(class TradePage extends React.Component<any> {\r\n\r\n  public state = { selectedKey: 'Settings' };\r\n\r\n  public render() {\r\n    const { routes, location } = this.props;\r\n\r\n    let defaultSelectedKey = '';\r\n    routes.map((route: any, i: any) => {\r\n      if (location.pathname.startsWith(route.path)) {\r\n        defaultSelectedKey = route.path;\r\n      }\r\n    })\r\n\r\n    return (\r\n      <Pivot defaultSelectedKey={defaultSelectedKey} onLinkClick={this.onLinkClick} style={{ height: \"100%\" }}\r\n        styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n      >\r\n        {routes.map((route: any, i: any) => (\r\n          <PivotItem key={`PivotItemKey_${route.name}`} itemKey={route.path} headerText={route.name} style={{ height: \"calc(100% - 24px)\" }}>\r\n            <RouteWithSubRoutes {...route} />\r\n          </PivotItem>\r\n        ))}\r\n      </Pivot>\r\n    );\r\n  }\r\n\r\n  onLinkClick = (item: PivotItem|undefined): void => {\r\n    const { history } = this.props;\r\n    if(item){\r\n      history.push(item.props.itemKey)\r\n    }\r\n  };\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(TradePage)","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\n\r\nexport const TradeMobileHomePage = inject('authenticationStore')(observer(class TradeMobileHomePage extends React.Component<any> {\r\n\r\n  public state = { password: '', newPassword: '' };\r\n\r\n  public render() {\r\n    return (\r\n      <div>开发中</div>\r\n    );\r\n  }\r\n\r\n}));\r\n\r\nexport default withRouter(TradeMobileHomePage)\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Pivot, PivotItem } from '@fluentui/react/lib/Pivot';\r\n\r\nimport './TradeMobilePage.css';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { RouteWithSubRoutes } from '../../router'\r\n\r\nexport const TradeMobilePage = inject('routingStore')(observer(class TradeMobilePage extends React.Component<any> {\r\n\r\n  public state = { selectedKey: 'Settings' };\r\n\r\n  public render() {\r\n    const { routes, location } = this.props;\r\n\r\n    let defaultSelectedKey = '';\r\n    routes.map((route: any, i: any) => {\r\n      if (location.pathname.startsWith(route.path)) {\r\n        defaultSelectedKey = route.path;\r\n      }\r\n    })\r\n\r\n    return (\r\n      <Pivot \r\n        defaultSelectedKey={defaultSelectedKey} onLinkClick={this.onLinkClick}\r\n        styles={{linkIsSelected:{height:24},link:{height:24},linkContent:{height:24},root:{height:24},text:{lineHeight:24}}}\r\n      >\r\n        {routes.map((route: any, i: any) => (\r\n          <PivotItem key={`PivotItemKey_${route.name}`} itemKey={route.path} headerText={route.name}>\r\n            <RouteWithSubRoutes {...route} />\r\n          </PivotItem>\r\n        ))}\r\n      </Pivot>\r\n    );\r\n  }\r\n\r\n  onLinkClick = (item: PivotItem|undefined): void => {\r\n    const { history } = this.props;\r\n    if(item){\r\n      history.push(item.props.itemKey)\r\n    }\r\n  };\r\n}));\r\n\r\n// NOTE: hack https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md#quick-solution\r\nexport default withRouter(TradeMobilePage)","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\nimport { Stack, IStackProps } from '@fluentui/react/lib/Stack';\r\nimport { PrimaryButton, DefaultButton, IconButton, ActionButton, IButtonStyles } from '@fluentui/react/lib/Button';\r\nimport { IColumn, DetailsList, SelectionMode, DetailsListLayoutMode, Selection, ConstrainMode, IDetailsHeaderProps, IDetailsFooterProps, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { Dialog, DialogFooter, DialogType } from '@fluentui/react/lib/Dialog';\r\nimport { MarqueeSelection } from '@fluentui/react/lib/MarqueeSelection';\r\nimport { Checkbox } from '@fluentui/react/lib/Checkbox';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { FontSizes, mergeStyleSets } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { IRenderFunction } from '@fluentui/react/lib/Utilities';\r\nimport { StickyPositionType, Sticky } from '@fluentui/react/lib/Sticky';\r\nimport { toast } from 'react-toastify';\r\nimport { Modal } from '@fluentui/react/lib/Modal';\r\n\r\nconst columnProps: Partial<IStackProps> = {\r\n  tokens: { childrenGap: 15 },\r\n  styles: { root: { width: 300 } }\r\n};\r\n\r\nconst actionButtonStyles: IButtonStyles = {\r\n  root: {\r\n    fontSize: '12px',\r\n    height: 16\r\n  }\r\n}\r\n\r\nexport const HomePage = inject('authenticationStore', 'operatorStore')(observer(class HomePage extends React.Component<any> {\r\n\r\n  state = {\r\n    hiddenDeleteOperatorDialog: true,\r\n    showUpdateOperatorDescriptionModal: false,\r\n    operatorIdForUpdateDescription: null,\r\n    editOperatorDescription: \"\",\r\n    operatorIdForDelete: null,\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight,\r\n    selectedOperatorId: '',\r\n\r\n    acceptReadSpecialAccountIdInput: '',\r\n    denyReadSpecialAccountIdInput: '',\r\n    acceptTradeSpecialAccountIdInput: '',\r\n    denyTradeSpecialAccountIdInput: '',\r\n    acceptTradeSpecialUniformSymbolInput: '',\r\n    denyTradeSpecialUniformSymbolInput: '',\r\n    acceptSubscribeSpecialUniformSymbolInput: '',\r\n    denySubscribeSpecialUniformSymbolInput: '',\r\n\r\n\r\n  }\r\n\r\n\r\n  private operatorSelection: Selection = new Selection({\r\n    onSelectionChanged: () => {\r\n      const selectionCount = this.operatorSelection.getSelectedCount();\r\n      if (selectionCount === 0) {\r\n        if (this.state.selectedOperatorId !== '') {\r\n          this.setState({ \"selectedOperatorId\": '' })\r\n        }\r\n\r\n      } else if (selectionCount > 0) {\r\n        const operator: any = this.operatorSelection.getSelection()[0]\r\n        if (this.state.selectedOperatorId !== operator.operatorId) {\r\n          this.setState({ \"selectedOperatorId\": operator.operatorId })\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  componentDidMount() {\r\n    this.props.operatorStore.getOperatorList()\r\n    this.resize()\r\n    window.addEventListener('resize', () => { this.resize() });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    // const columnProps: Partial<IStackProps> = {\r\n    //   tokens: { childrenGap: 5 },\r\n    //   styles: { root: { width: 300 } }\r\n    // };\r\n    const operatorItems = this.props.operatorStore.operatorList.slice()\r\n\r\n    let canReadAllAccounts = false\r\n    const acceptReadSpecialAccountIdList: any[] = []\r\n    const denyReadSpecialAccountIdList: any[] = []\r\n\r\n    let canTradeAllAccounts = false\r\n    const acceptTradeSpecialAccountIdList: any[] = []\r\n    const denyTradeSpecialAccountIdList: any[] = []\r\n\r\n    let canTradeAllContracts = false;\r\n    const acceptTradeSpecialUniformSymbolList: any[] = []\r\n    const denyTradeSpecialUniformSymbolList: any[] = []\r\n\r\n    let canSubscribeAllContracts = false\r\n    const acceptSubscribeSpecialUniformSymbolList: any[] = []\r\n    const denySubscribeSpecialUniformSymbolList: any[] = []\r\n\r\n\r\n    const { operatorStore } = this.props\r\n\r\n    let selectedOperator: any = null;\r\n\r\n    if (this.state.selectedOperatorId) {\r\n\r\n\r\n      if (operatorStore.operatorMap.has(this.state.selectedOperatorId)) {\r\n\r\n\r\n        selectedOperator = operatorStore.operatorMap.get(this.state.selectedOperatorId)\r\n\r\n\r\n        if (selectedOperator.canReadAllAccounts) {\r\n          canReadAllAccounts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptReadSpecialAccountIdSet) {\r\n          selectedOperator.acceptReadSpecialAccountIdSet.forEach((element: any) => {\r\n            acceptReadSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n        if (selectedOperator.denyReadSpecialAccountIdSet) {\r\n          selectedOperator.denyReadSpecialAccountIdSet.forEach((element: any) => {\r\n            denyReadSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n\r\n        if (selectedOperator.canTradeAllAccounts) {\r\n          canTradeAllAccounts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptTradeSpecialAccountIdSet) {\r\n          selectedOperator.acceptTradeSpecialAccountIdSet.forEach((element: any) => {\r\n            acceptTradeSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n\r\n        }\r\n\r\n        if (selectedOperator.denyTradeSpecialAccountIdSet) {\r\n          selectedOperator.denyTradeSpecialAccountIdSet.forEach((element: any) => {\r\n            denyTradeSpecialAccountIdList.push({\r\n              \"accountId\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n\r\n        }\r\n\r\n\r\n        if (selectedOperator.canTradeAllContracts) {\r\n          canTradeAllContracts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptTradeSpecialUniformSymbolSet) {\r\n          selectedOperator.acceptTradeSpecialUniformSymbolSet.forEach((element: any) => {\r\n            acceptTradeSpecialUniformSymbolList.push({\r\n              \"uniformSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n        if (selectedOperator.denyTradeSpecialUniformSymbolSet) {\r\n          selectedOperator.denyTradeSpecialUniformSymbolSet.forEach((element: any) => {\r\n            denyTradeSpecialUniformSymbolList.push({\r\n              \"uniformSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n\r\n        if (selectedOperator.canSubscribeAllContracts) {\r\n          canSubscribeAllContracts = true\r\n        }\r\n\r\n        if (selectedOperator.acceptSubscribeSpecialUniformSymbolSet) {\r\n          selectedOperator.acceptSubscribeSpecialUniformSymbolSet.forEach((element: any) => {\r\n            acceptSubscribeSpecialUniformSymbolList.push({\r\n              \"uniformSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n\r\n        if (selectedOperator.denySubscribeSpecialUniformSymbolSet) {\r\n          selectedOperator.denySubscribeSpecialUniformSymbolSet.forEach((element: any) => {\r\n            denySubscribeSpecialUniformSymbolList.push({\r\n              \"uniformSymbol\": element,\r\n              \"operatorId\": this.state.selectedOperatorId\r\n            })\r\n          });\r\n        }\r\n      } else {\r\n        this.setState({ \"selselectedOperatorIde\": '' })\r\n      }\r\n\r\n    }\r\n\r\n\r\n    const columnLeftProps: Partial<IStackProps> = {\r\n      tokens: { childrenGap: 5 },\r\n      styles: { root: { width: 499, borderRight: \"solid 1px #383838\" } }\r\n    };\r\n\r\n    const columnRightProps: Partial<IStackProps> = {\r\n      tokens: { childrenGap: 5 },\r\n      styles: { root: { width: this.state.windowInnerWidth - 450, height: this.state.windowInnerHeight - 41, overflowY: \"auto\" } }\r\n    };\r\n\r\n    const operatorColumns: IColumn[] = [\r\n      {\r\n        key: \"operatorId\",\r\n        name: \"ID\",\r\n        minWidth: 220,\r\n        maxWidth: 220,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.operatorId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }, {\r\n        key: \"username\",\r\n        name: \"用户名\",\r\n        minWidth: 40,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.username}</span>\r\n            </div>\r\n          );\r\n        }\r\n      }, {\r\n        key: \"description\",\r\n        name: \"描述\",\r\n        minWidth: 75,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.description}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <IconButton\r\n              menuIconProps={{ iconName: 'MoreVertical' }}\r\n              role=\"button\"\r\n              aria-haspopup={true}\r\n              aria-label=\"Show actions\"\r\n              styles={{ root: { float: 'right', height: 'inherit' } }}\r\n              menuProps={{\r\n                items: [\r\n                  {\r\n                    key: 'delete',\r\n                    text: '删除',\r\n                    disabled: item.associatedToUser,\r\n                    iconProps: {\r\n                      iconName: \"DeleteRows\"\r\n                    },\r\n                    onClick: () => {\r\n                      this.openDeleteOperatorDialog(item)\r\n                    }\r\n                  },\r\n\r\n                  {\r\n                    key: 'updateDescription',\r\n                    text: '更新描述',\r\n                    iconProps: {\r\n                      iconName: \"EditNote\"\r\n                    },\r\n                    onClick: () => {\r\n                      this.openUpdateOperatorDescriptionModal(item.operatorId, item.description)\r\n                    }\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const acceptReadSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptReadSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptReadSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.acceptReadSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denyReadSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denyReadSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.denyReadSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.denyReadSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const acceptTradeSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptTradeSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptTradeSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.acceptTradeSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denyTradeSpecialAccountIdSetColumns: IColumn[] = [\r\n      {\r\n        key: \"accountId\",\r\n        name: \"账户ID\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.accountId}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denyTradeSpecialAccountIdSet) {\r\n                      tmpSet = new Set(selectedOperator.denyTradeSpecialAccountIdSet)\r\n                    }\r\n                    tmpSet.delete(item.accountId)\r\n                    selectedOperator.denyTradeSpecialAccountIdSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const acceptTradeSpecialUniformSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"uniformSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.uniformSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptTradeSpecialUniformSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptTradeSpecialUniformSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.uniformSymbol)\r\n                    selectedOperator.acceptTradeSpecialUniformSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denyTradeSpecialUniformSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"uniformSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.uniformSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denyTradeSpecialUniformSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.denyTradeSpecialUniformSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.uniformSymbol)\r\n                    selectedOperator.denyTradeSpecialUniformSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n\r\n\r\n    const acceptSubscribeSpecialUniformSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"uniformSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.uniformSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.acceptSubscribeSpecialUniformSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.acceptSubscribeSpecialUniformSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.uniformSymbol)\r\n                    selectedOperator.acceptSubscribeSpecialUniformSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const denySubscribeSpecialUniformSymbolSetColumns: IColumn[] = [\r\n      {\r\n        key: \"uniformSymbol\",\r\n        name: \"合约统一标识\",\r\n        minWidth: 310,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        data: 'string',\r\n        onRender: (item) => {\r\n          return (\r\n            <div>\r\n              <span>{item.uniformSymbol}</span>\r\n            </div>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        key: \"action\",\r\n        name: \"操作\",\r\n        minWidth: 25,\r\n        isResizable: true,\r\n        isCollapsible: true,\r\n        onRender: (item) => {\r\n          return (\r\n            <span>\r\n              <ActionButton\r\n                allowDisabledFocus={true}\r\n                checked={false}\r\n                styles={actionButtonStyles}\r\n                onClick={() => {\r\n                  if (selectedOperator) {\r\n                    let tmpSet = new Set()\r\n                    if (selectedOperator.denySubscribeSpecialUniformSymbolSet) {\r\n                      tmpSet = new Set(selectedOperator.denySubscribeSpecialUniformSymbolSet)\r\n                    }\r\n                    tmpSet.delete(item.uniformSymbol)\r\n                    selectedOperator.denySubscribeSpecialUniformSymbolSet = [...tmpSet]\r\n                    this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                  } else {\r\n                    toast(\"请选择操作员\", { type: 'error' })\r\n                  }\r\n                }}\r\n              >\r\n                删除\r\n              </ActionButton>\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n    ]\r\n\r\n    const classNames = mergeStyleSets({\r\n      selectTableWrapper: {\r\n        height: this.state.windowInnerHeight - 90,\r\n        position: 'relative',\r\n        maxHeight: 'inherit'\r\n      },\r\n      childTableWrapper: {\r\n        height: 250,\r\n        position: 'relative',\r\n        maxHeight: 'inherit',\r\n        borderBottom: \"solid 1px #383838\"\r\n      }\r\n    });\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n      <Stack tokens={{ childrenGap: 12, padding:20 }} styles={{ root: { width: '100%' } }}>\r\n        <Stack.Item>\r\n          <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n            <Stack {...columnLeftProps}>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} styles={{ root: { width: 498, } }}>\r\n                  <Stack {...{ tokens: { childrenGap: 5 }, styles: { root: { width: 498, paddingTop: 5 } } }}>\r\n                    <MarqueeSelection selection={this.operatorSelection} isEnabled={false}>\r\n                      <div className={classNames.selectTableWrapper}>\r\n                        <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                          <DetailsList\r\n                            items={operatorItems}\r\n                            compact={true}\r\n                            columns={operatorColumns}\r\n                            selectionMode={SelectionMode.single}\r\n                            setKey=\"operatorId\"\r\n                            selection={this.operatorSelection}\r\n                            layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                            constrainMode={ConstrainMode.unconstrained}\r\n                            selectionPreservedOnEmptyClick={true}\r\n                            // data-is-scrollable={true}\r\n\r\n                            // @ts-ignore\r\n                            onRenderDetailsHeader={\r\n                              // tslint:disable-next-line:jsx-no-lambda\r\n                              (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                  <DetailsHeader\r\n                                    {...detailsHeaderProps}\r\n                                    styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                  />\r\n                                  {/* {defaultRender(detailsHeaderProps)} */}\r\n                                </Sticky>\r\n                              )}\r\n\r\n                            // @ts-ignore\r\n                            onRenderDetailsFooter={\r\n                              // tslint:disable-next-line:jsx-no-lambda\r\n                              (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                  {defaultRender(detailsFooterProps)}\r\n                                </Sticky>\r\n                              )}\r\n                          />\r\n                        </ScrollablePane>\r\n                      </div>\r\n                    </MarqueeSelection>\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增\"\r\n                      onClick={() => {\r\n                        this.createOperator()\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n            </Stack>\r\n            <Stack {...columnRightProps}>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 20 } }\r\n                  }}>\r\n\r\n                    {selectedOperator ?\r\n                      <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>操作员ID: </span><span style={{ fontSize: FontSizes.xLarge }} >{selectedOperator.operatorId}</span></div>\r\n                      : <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>操作员ID: </span><span style={{ fontSize: FontSizes.medium }} >&nbsp;</span></div>\r\n                    }\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 20 } }\r\n                  }}>\r\n\r\n                    {selectedOperator ?\r\n                      <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>用户名: </span><span style={{ fontSize: FontSizes.xLarge }} >{selectedOperator.username}</span></div>\r\n                      : <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>用户名: </span><span style={{ fontSize: FontSizes.medium }} >&nbsp;</span></div>\r\n                    }\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 20 } }\r\n                  }}>\r\n                    {selectedOperator ?\r\n                      <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>描述: </span><span style={{ fontSize: FontSizes.large }} >{selectedOperator.description}</span></div>\r\n                      : <div><span style={{ fontSize: FontSizes.small, display: \"inline-block\", width: 55, textAlign: \"right\", paddingRight: 5 }}>描述: </span><span style={{ fontSize: FontSizes.large }} >&nbsp;</span></div>\r\n                    }\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    账户读取权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许读取所有帐户\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canReadAllAccounts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canReadAllAccounts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptReadSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={acceptReadSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptReadSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptReadSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptReadSpecialAccountIdInput && this.state.acceptReadSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptReadSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptReadSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptReadSpecialAccountIdInput)\r\n                            selectedOperator.acceptReadSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptReadSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denyReadSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={denyReadSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denyReadSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denyReadSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denyReadSpecialAccountIdInput && this.state.denyReadSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denyReadSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.denyReadSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.denyReadSpecialAccountIdInput)\r\n                            selectedOperator.denyReadSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denyReadSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderTop: \"solid 1px #383838\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    账户交易权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许交易所有帐户\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canTradeAllAccounts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canTradeAllAccounts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptTradeSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={acceptTradeSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptTradeSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptTradeSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptTradeSpecialAccountIdInput && this.state.acceptTradeSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptTradeSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptTradeSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptTradeSpecialAccountIdInput)\r\n                            selectedOperator.acceptTradeSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptTradeSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denyTradeSpecialAccountIdList}\r\n                          compact={true}\r\n                          columns={denyTradeSpecialAccountIdSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"accountId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"账户ID\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denyTradeSpecialAccountIdInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denyTradeSpecialAccountIdInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denyTradeSpecialAccountIdInput && this.state.denyTradeSpecialAccountIdInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denyTradeSpecialAccountIdSet) {\r\n                              tmpSet = new Set(selectedOperator.denyTradeSpecialAccountIdSet)\r\n                            }\r\n                            tmpSet.add(this.state.denyTradeSpecialAccountIdInput)\r\n                            selectedOperator.denyTradeSpecialAccountIdSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denyTradeSpecialAccountIdInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderTop: \"solid 1px #383838\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    合约交易权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许交易所有合约\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canTradeAllContracts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canTradeAllContracts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptTradeSpecialUniformSymbolList}\r\n                          compact={true}\r\n                          columns={acceptTradeSpecialUniformSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"uniformSymbol\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptTradeSpecialUniformSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptTradeSpecialUniformSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptTradeSpecialUniformSymbolInput && this.state.acceptTradeSpecialUniformSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptTradeSpecialUniformSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptTradeSpecialUniformSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptTradeSpecialUniformSymbolInput)\r\n                            selectedOperator.acceptTradeSpecialUniformSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptTradeSpecialUniformSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denyTradeSpecialUniformSymbolList}\r\n                          compact={true}\r\n                          columns={denyTradeSpecialUniformSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"opuniformSymboleratorId\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denyTradeSpecialUniformSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denyTradeSpecialUniformSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denyTradeSpecialUniformSymbolInput && this.state.denyTradeSpecialUniformSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denyTradeSpecialUniformSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.denyTradeSpecialUniformSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.denyTradeSpecialUniformSymbolInput)\r\n                            selectedOperator.denyTradeSpecialUniformSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denyTradeSpecialUniformSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack {...{\r\n                    styles: { root: { width: \"100%\", borderTop: \"solid 1px #383838\", borderBottom: \"solid 1px #383838\", padding: 10 } }\r\n                  }}>\r\n                    合约订阅权限\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n              <Stack.Item>\r\n                <Stack horizontal={true} tokens={{ childrenGap: 10 }} styles={{ root: { width: '100%', } }}>\r\n                  <Stack styles={{ root: { width: 175, paddingLeft: 10 } }}>\r\n                    <Checkbox\r\n                      label=\"允许订阅所有合约\"\r\n                      styles={{ root: { marginTop: 3 } }}\r\n                      checked={canSubscribeAllContracts}\r\n                      onChange={(event: any, checked) => {\r\n                        if (selectedOperator) {\r\n                          selectedOperator.canSubscribeAllContracts = checked\r\n                          this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                        } else {\r\n                          toast(\"请选择操作员\", { type: 'error' })\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      允许列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={acceptSubscribeSpecialUniformSymbolList}\r\n                          compact={true}\r\n                          columns={acceptSubscribeSpecialUniformSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"uniformSymbol\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.acceptSubscribeSpecialUniformSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'acceptSubscribeSpecialUniformSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增允许\"\r\n                      onClick={() => {\r\n                        if (this.state.acceptSubscribeSpecialUniformSymbolInput && this.state.acceptSubscribeSpecialUniformSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.acceptSubscribeSpecialUniformSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.acceptSubscribeSpecialUniformSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.acceptSubscribeSpecialUniformSymbolInput)\r\n                            selectedOperator.acceptSubscribeSpecialUniformSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'acceptSubscribeSpecialUniformSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  <Stack styles={{ root: { width: 400, borderLeft: \"solid 1px #383838\", borderRight: \"solid 1px #383838\" } }}>\r\n                    <div style={{ width: \"100%\", borderBottom: \"solid 1px #383838\", padding: 5 }}>\r\n                      拒绝列表\r\n                          </div>\r\n                    <div className={classNames.childTableWrapper}>\r\n                      <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                        <DetailsList\r\n                          items={denySubscribeSpecialUniformSymbolList}\r\n                          compact={true}\r\n                          columns={denySubscribeSpecialUniformSymbolSetColumns}\r\n                          selectionMode={SelectionMode.none}\r\n                          setKey=\"uniformSymbol\"\r\n                          layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                          constrainMode={ConstrainMode.unconstrained}\r\n                          selectionPreservedOnEmptyClick={true}\r\n                          // data-is-scrollable={true}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsHeader={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                <DetailsHeader\r\n                                  {...detailsHeaderProps}\r\n                                  styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                />\r\n                                {/* {defaultRender(detailsHeaderProps)} */}\r\n                              </Sticky>\r\n                            )}\r\n\r\n                          // @ts-ignore\r\n                          onRenderDetailsFooter={\r\n                            // tslint:disable-next-line:jsx-no-lambda\r\n                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                              <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                {defaultRender(detailsFooterProps)}\r\n                              </Sticky>\r\n                            )}\r\n                        />\r\n                      </ScrollablePane>\r\n                    </div>\r\n                    <TextField label=\"合约统一标识\"\r\n                      placeholder=\"......\"\r\n                      defaultValue={this.state.denySubscribeSpecialUniformSymbolInput}\r\n                      onChange={(event: any, newValue?: string) => this.setState({ 'denySubscribeSpecialUniformSymbolInput': newValue })}\r\n                    />\r\n                    <PrimaryButton\r\n                      allowDisabledFocus={true}\r\n                      checked={false}\r\n                      text=\"新增拒绝\"\r\n                      onClick={() => {\r\n                        if (this.state.denySubscribeSpecialUniformSymbolInput && this.state.denySubscribeSpecialUniformSymbolInput !== '') {\r\n                          if (selectedOperator) {\r\n                            let tmpSet = new Set()\r\n                            if (selectedOperator.denySubscribeSpecialUniformSymbolSet) {\r\n                              tmpSet = new Set(selectedOperator.denySubscribeSpecialUniformSymbolSet)\r\n                            }\r\n                            tmpSet.add(this.state.denySubscribeSpecialUniformSymbolInput)\r\n                            selectedOperator.denySubscribeSpecialUniformSymbolSet = [...tmpSet]\r\n                            this.props.operatorStore.saveOrUpdateOperator(selectedOperator)\r\n                            this.setState({ 'denySubscribeSpecialUniformSymbolInput': '' })\r\n                          } else {\r\n                            toast(\"请选择操作员\", { type: 'error' })\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack.Item>\r\n\r\n            </Stack>\r\n          </Stack>\r\n        </Stack.Item>\r\n\r\n        <Dialog\r\n          hidden={this.state.hiddenDeleteOperatorDialog}\r\n          onDismiss={() => this.closeDeleteOperatorDialog()}\r\n          dialogContentProps={{\r\n            type: DialogType.normal,\r\n            title: '删除操作员确认',\r\n            subText: `是否删除操作员 ${this.state.operatorIdForDelete} ？此操作不可逆`\r\n          }}\r\n          modalProps={{\r\n            isBlocking: false,\r\n            styles: { main: { maxWidth: 498 } },\r\n          }}\r\n        >\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={() => this.deleteOperatorById()} text=\"删除\" />\r\n            <DefaultButton onClick={() => this.closeDeleteOperatorDialog()} text=\"取消\" />\r\n          </DialogFooter>\r\n        </Dialog>\r\n\r\n        <Modal\r\n          isOpen={this.state.showUpdateOperatorDescriptionModal}\r\n          isBlocking={false}\r\n          onDismiss={() => this.closeUpdateOperatorDescriptionModal()}\r\n        >\r\n          <Stack tokens={{ childrenGap: 12, padding:20 }}>\r\n\r\n            <Stack.Item align=\"center\">\r\n              <div style={{ fontSize: FontSizes.medium }} >操作员ID: {this.state.operatorIdForUpdateDescription}</div>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <TextField label=\"操作员描述\" multiline={true} resizable={true} defaultValue={this.state.editOperatorDescription ? this.state.editOperatorDescription : \"\"} onChange={(event: any, newValue?: string) => this.editOperatorDescriptionOnChange(event)} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item align=\"center\">\r\n              <Stack horizontal={true} tokens={{ childrenGap: 50 }} styles={{ root: { width: '100%' } }}>\r\n                <Stack {...columnProps}>\r\n                  <PrimaryButton text=\"保存\" onClick={() => this.updateOperatorDescriptionByOperatorId()} />\r\n                  <DefaultButton text=\"取消\" onClick={() => this.closeUpdateOperatorDescriptionModal()} />\r\n                </Stack>\r\n              </Stack>\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal>\r\n\r\n      </Stack>\r\n    )\r\n  }\r\n\r\n  private resize() {\r\n    this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n  }\r\n\r\n  private createOperator() {\r\n    this.props.operatorStore.createOperator()\r\n  }\r\n\r\n\r\n  private openDeleteOperatorDialog(operator: any) {\r\n    this.setState({ operatorIdForDelete: operator.operatorId, hiddenDeleteOperatorDialog: false })\r\n  }\r\n\r\n  private deleteOperatorById() {\r\n    this.operatorSelection.setAllSelected(false)\r\n    this.props.operatorStore.deleteOperatorByOperatorId(this.state.operatorIdForDelete);\r\n    this.closeDeleteOperatorDialog();\r\n  }\r\n\r\n  private closeDeleteOperatorDialog() {\r\n    this.setState({ operatorIdForDelete: null, hiddenDeleteOperatorDialog: true })\r\n  }\r\n\r\n  private openUpdateOperatorDescriptionModal = (operatorId: number, description: string) => {\r\n    this.setState({ operatorIdForUpdateDescription: operatorId, editOperatorDescription: description, showUpdateOperatorDescriptionModal: true });\r\n  }\r\n\r\n  private closeUpdateOperatorDescriptionModal = () => {\r\n    this.setState({ showUpdateOperatorDescriptionModal: false, operatorIdForUpdateDescription: null, editOperatorDescription: '' });\r\n  }\r\n\r\n  private updateOperatorDescriptionByOperatorId = () => {\r\n    const operatorId = this.state.operatorIdForUpdateDescription\r\n    const operatorDescription = this.state.editOperatorDescription\r\n    if (this.props.operatorStore.operatorMap.has(operatorId)) {\r\n      const operator = this.props.operatorStore.operatorMap.get(operatorId)\r\n      operator.description = operatorDescription\r\n      this.props.operatorStore.saveOrUpdateOperator(operator)\r\n    } else {\r\n      toast(\"未能根据ID找到对应的操作员\", { type: 'error' })\r\n    }\r\n\r\n    this.closeUpdateOperatorDescriptionModal();\r\n  }\r\n\r\n  private editOperatorDescriptionOnChange(event: any) {\r\n    this.setState({ editOperatorDescription: event.target.value })\r\n  }\r\n\r\n\r\n}));\r\n\r\n\r\nexport default withRouter(HomePage);\r\n","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { withRouter } from 'react-router';\r\nimport { mergeStyleSets, FontSizes } from '@fluentui/react/lib/Styling';\r\nimport { ScrollablePane, ScrollbarVisibility } from '@fluentui/react/lib/ScrollablePane';\r\nimport { DetailsList, DetailsListLayoutMode, IDetailsHeaderProps, IColumn, IDetailsFooterProps, ConstrainMode, DetailsHeader } from '@fluentui/react/lib/DetailsList';\r\nimport { IRenderFunction, SelectionMode } from '@fluentui/react/lib/Utilities';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint } from '@fluentui/react/lib/Tooltip';\r\nimport { xyz } from \"../../node/pb/pb\";\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { DefaultButton, IconButton } from '@fluentui/react/lib/Button';\r\n\r\nimport { exchangeOptions, currencyOptions, productClassOptions } from '../../utils'\r\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\n\r\nconst { CurrencyEnum, ExchangeEnum, ProductClassEnum, OptionsTypeEnum } = xyz.redtorch.pb\r\n\r\nexport const MarketDataRecordingPage = inject('authenticationStore', 'tradeContractStore', 'tradeActionStore', 'customizeStore', 'marketDataRecordingStore')(observer(class MarketDataRecordingPage extends React.Component<any> {\r\n\r\n    state = {\r\n        filterExchange: 9999,\r\n        filterProductClass: 9999,\r\n        filterCurrency: 9999,\r\n        filterSymbol: \"\",\r\n        filterUnderlyingSymbol: \"\",\r\n        filterThirdPartyId: \"\",\r\n        filterName: \"\",\r\n        filterLastTradeDateOrContractMonth: \"\",\r\n        windowInnerWidth: window.innerWidth,\r\n        windowInnerHeight: window.innerHeight\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resize()\r\n        window.addEventListener('resize', this.resize);\r\n        this.getContractList()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resize);\r\n    }\r\n\r\n    resize = () => {\r\n        this.setState({ \"windowInnerWidth\": window.innerWidth, \"windowInnerHeight\": window.innerHeight })\r\n    }\r\n\r\n    public getContractList = () => {\r\n        const { marketDataRecordingStore } = this.props\r\n        marketDataRecordingStore.getContractList()\r\n    }\r\n\r\n    public render() {\r\n\r\n        const { customizeStore, tradeActionStore, marketDataRecordingStore } = this.props;\r\n\r\n        const { selectedContract } = tradeActionStore;\r\n\r\n        let contractList = []\r\n        if ((this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0))\r\n            && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0))\r\n            && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0))\r\n            && (this.state.filterSymbol === \"\" || !this.state.filterSymbol)\r\n            && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth)\r\n            && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId)\r\n            && (this.state.filterName === \"\" || !this.state.filterName)\r\n            && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol)) {\r\n            contractList = marketDataRecordingStore.contractList\r\n\r\n        } else {\r\n\r\n            for (let i = 0; i < marketDataRecordingStore.contractList.length; i++) {\r\n                const contract = marketDataRecordingStore.contractList[i]\r\n\r\n                let flag = false;\r\n                flag = this.state.filterCurrency === 9999 || (!this.state.filterCurrency && this.state.filterCurrency !== 0) || contract.currency === this.state.filterCurrency\r\n\r\n                flag = flag && (this.state.filterExchange === 9999 || (!this.state.filterExchange && this.state.filterExchange !== 0) || contract.exchange === this.state.filterExchange)\r\n\r\n                flag = flag && (this.state.filterProductClass === 9999 || (!this.state.filterProductClass && this.state.filterProductClass !== 0) || contract.productClass === this.state.filterProductClass)\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterSymbol === \"\" || !this.state.filterSymbol || (contract.symbol && `${contract.symbol}`.indexOf(this.state.filterSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterLastTradeDateOrContractMonth === \"\" || !this.state.filterLastTradeDateOrContractMonth || (contract.lastTradeDateOrContractMonth && `${contract.lastTradeDateOrContractMonth}`.indexOf(this.state.filterLastTradeDateOrContractMonth) !== -1))\r\n\r\n                flag = flag && (this.state.filterUnderlyingSymbol === \"\" || !this.state.filterUnderlyingSymbol || (contract.underlyingSymbol && `${contract.underlyingSymbol}`.indexOf(this.state.filterUnderlyingSymbol) !== -1))\r\n\r\n                flag = flag && (this.state.filterThirdPartyId === \"\" || !this.state.filterThirdPartyId || (contract.thirdPartyId && `${contract.thirdPartyId}`.indexOf(this.state.filterThirdPartyId) !== -1))\r\n\r\n                flag = flag && (this.state.filterName === \"\" || !this.state.filterName || (contract.name && `${contract.name}`.indexOf(this.state.filterName) !== -1) || (contract.fullName && `${contract.fullName}`.indexOf(this.state.filterName) !== -1))\r\n\r\n\r\n                if (flag) {\r\n                    contractList.push(contract)\r\n                }\r\n            }\r\n        }\r\n\r\n        const classNames = mergeStyleSets({\r\n            wrapper: {\r\n                height: `${this.state.windowInnerHeight - 249}px`,\r\n                position: 'relative',\r\n                maxHeight: 'inherit',\r\n                borderBottom: \"1px solid #666666\",\r\n            }\r\n        });\r\n\r\n        const columns: IColumn[] = [\r\n            {\r\n                key: \"uniformSymbol\",\r\n                name: \"统一标识\",\r\n                minWidth: 150,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    const labelStyls: React.CSSProperties = { display: 'inline-block', width: 55, textAlign: \"right\", color: '#999', paddingRight: 3 }\r\n\r\n                    let clazzNames = \"\"\r\n                    if (selectedContract && item.uniformSymbol === selectedContract.uniformSymbol) {\r\n                        clazzNames = \"trade-remind-color\"\r\n                    }\r\n\r\n                    return (\r\n                        <TooltipHost\r\n                            calloutProps={{ gapSpace: 20 }}\r\n                            tooltipProps={{\r\n                                onRenderContent: () => {\r\n                                    return (\r\n                                        <div>\r\n                                            <ul style={{ margin: 0, padding: 0 }}>\r\n                                                <li><span style={labelStyls}>网关ID:</span><span>{item.gatewayId}</span></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }}\r\n                            delay={TooltipDelay.long}\r\n                            directionalHint={DirectionalHint.bottomCenter}\r\n                        >\r\n                            <div className={clazzNames} onClick={\r\n                                () => {\r\n                                    tradeActionStore.setSelectedContract(item)\r\n                                }\r\n                            }>\r\n                                <span style={{ cursor: \"pointer\" }}>{item.uniformSymbol}</span>\r\n                            </div>\r\n                        </TooltipHost>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"shortName\",\r\n                name: \"简称\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.name}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"fullName\",\r\n                name: \"完整名称\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.fullName}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"action\",\r\n                name: \"操作\",\r\n                minWidth: 30,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                onRender: (item) => {\r\n                    return (\r\n                        <IconButton\r\n                            menuIconProps={{ iconName: 'MoreVertical' }}\r\n                            role=\"button\"\r\n                            aria-haspopup={true}\r\n                            aria-label=\"Show actions\"\r\n                            styles={{ root: { float: 'right', height: 'inherit' } }}\r\n                            menuProps={{\r\n                                items: [\r\n                                    {\r\n                                        key: 'deleteFavoriteContractByUniformSymbol',\r\n                                        text: '从行情记录中移除',\r\n                                        iconProps: {\r\n                                            iconName: \"Delete\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            marketDataRecordingStore.deleteContractByUniformSymbol(item.uniformSymbol)\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        key: 'addToMarketDataRecording',\r\n                                        // disabled: true,\r\n                                        text: '加入常用',\r\n                                        iconProps: {\r\n                                            iconName: \"CircleAddition\"\r\n                                        },\r\n                                        onClick: () => {\r\n                                            customizeStore.addFavoriteContractByUniformSymbol(item.uniformSymbol)\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"symbol\",\r\n                name: \"代码\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.symbol}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"exchange\",\r\n                name: \"交易所\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ExchangeEnum[item.exchange]}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"productClass\",\r\n                name: \"产品类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{ProductClassEnum[item.productClass]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"lastTradeDateOrContractMonth\",\r\n                name: \"合约月或最后交易日\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.lastTradeDateOrContractMonth}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"currency\",\r\n                name: \"币种\",\r\n                minWidth: 40,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{CurrencyEnum[item.currency]}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"thirdPartyId\",\r\n                name: \"第三方ID\",\r\n                minWidth: 100,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.thirdPartyId}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"multiplier\",\r\n                name: \"合约乘数\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.multiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"priceTick\",\r\n                name: \"最小变动价位\",\r\n                minWidth: 70,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.priceTick}</span>\r\n                    );\r\n                }\r\n            }, {\r\n                key: \"optionsType\",\r\n                name: \"期权类型\",\r\n                minWidth: 60,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    if (item.optionsType === OptionsTypeEnum.O_CallOptions) {\r\n                        return (\r\n                            <span>看涨</span>\r\n                        );\r\n                    }\r\n                    if (item.optionsType === OptionsTypeEnum.O_PutOptions) {\r\n                        return (\r\n                            <span>看跌</span>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <span>{item.optionsType}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingSymbol\",\r\n                name: \"基础商品代码\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'string',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingSymbol}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"underlyingMultiplier\",\r\n                name: \"基础商品乘数\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.underlyingMultiplier}</span>\r\n                    );\r\n                }\r\n            },\r\n            {\r\n                key: \"strikePrice\",\r\n                name: \"执行价\",\r\n                minWidth: 80,\r\n                isResizable: true,\r\n                isCollapsible: true,\r\n                data: 'number',\r\n                onRender: (item) => {\r\n                    return (\r\n                        <span>{item.strikePrice}</span>\r\n                    );\r\n                }\r\n            }\r\n\r\n        ]\r\n\r\n\r\n        return (\r\n            <Stack styles={{ root: { width: \"100%\" } }}>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack tokens={{ childrenGap: 2 }} styles={{ root: { width: \"100%\", height: 207, borderBottom: \"1px solid #666666\", paddingTop: 2, fontSize: FontSizes.xSmall } }}>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"交易所\"\r\n                                            // styles={{ root: { width: \"90%\" } }}\r\n                                            defaultSelectedKey={this.state.filterExchange}\r\n                                            options={\r\n                                                exchangeOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterExchange: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"产品类型\"\r\n                                            defaultSelectedKey={this.state.filterProductClass}\r\n                                            options={\r\n                                                productClassOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterProductClass: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <Dropdown label=\"币种\"\r\n                                            defaultSelectedKey={this.state.filterCurrency}\r\n                                            options={\r\n                                                currencyOptions\r\n                                            }\r\n                                            onChange={(event: any, option?: IDropdownOption, index?: number, value?: string) => {\r\n                                                if (option) {\r\n                                                    this.setState({ filterCurrency: option.key })\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterName} label=\"名称\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterName: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterSymbol} label=\"合约代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterUnderlyingSymbol} label=\"基础商品代码\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterUnderlyingSymbol: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterLastTradeDateOrContractMonth} label=\"最后交易日或合约月\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterLastTradeDateOrContractMonth: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5 } }}>\r\n                                        <TextField defaultValue={this.state.filterThirdPartyId} label=\"第三方ID\" onChange={(event: any, newValue?: string) => {\r\n                                            this.setState({ filterThirdPartyId: newValue })\r\n                                        }} />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n\r\n                            <Stack.Item styles={{ root: { width: \"100%\" } }}>\r\n                                <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        &nbsp;\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        &nbsp;\r\n                                    </Stack>\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        &nbsp;\r\n                                    </Stack>\r\n\r\n                                    <Stack styles={{ root: { width: \"24%\", paddingLeft: 5, paddingRight: 5, paddingTop: 15 } }}>\r\n                                        <DefaultButton\r\n                                            text=\"刷新\"\r\n                                            onClick={() => {\r\n                                                this.getContractList()\r\n                                            }}\r\n                                            allowDisabledFocus={true}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Stack.Item>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Stack horizontal={true} tokens={{ childrenGap: 0 }} styles={{ root: { width: '100%' } }}>\r\n                        <Stack styles={{ root: { width: \"100%\" } }}>\r\n                            <div className={classNames.wrapper}>\r\n                                <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>\r\n                                    <DetailsList\r\n                                        items={contractList}\r\n                                        compact={true}\r\n                                        columns={columns}\r\n                                        selectionMode={SelectionMode.none}\r\n                                        setKey=\"accountId\"\r\n                                        layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                                        constrainMode={ConstrainMode.unconstrained}\r\n                                        // data-is-scrollable={true}\r\n\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsHeader={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced={true}>\r\n                                                    <DetailsHeader\r\n                                                        {...detailsHeaderProps}\r\n                                                        styles={{ root: { paddingTop: 0, height: 24, lineHeight: 24 }, check: { height: \"24px !important\" }, cellIsCheck: { height: 24 } }}\r\n                                                    />\r\n                                                    {/* {defaultRender(detailsHeaderProps)} */}\r\n                                                </Sticky>\r\n                                            )}\r\n\r\n                                        // @ts-ignore\r\n                                        onRenderDetailsFooter={\r\n                                            // tslint:disable-next-line:jsx-no-lambda\r\n                                            (detailsFooterProps: IDetailsFooterProps, defaultRender: IRenderFunction<IDetailsFooterProps>) => (\r\n                                                <Sticky stickyPosition={StickyPositionType.Footer} isScrollSynced={true}>\r\n                                                    {defaultRender(detailsFooterProps)}\r\n                                                </Sticky>\r\n                                            )}\r\n                                    />\r\n                                </ScrollablePane>\r\n                            </div>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack.Item>\r\n\r\n            </Stack>\r\n\r\n        );\r\n    }\r\n\r\n}));\r\n\r\nexport default withRouter(MarketDataRecordingPage)\r\n","import * as React from 'react';\r\nimport ManagementPage from './pages/management/ManagementPage'\r\n\r\nimport NodePage from './pages/management/NodePage'\r\nimport GatewayPage from './pages/management/GatewayPage'\r\nimport SettingPage from './pages/common/SettingPage'\r\nimport LoginPage from './pages/LoginPage'\r\nimport NotFoundPage from './pages/NotFoundPage'\r\nimport { inject } from 'mobx-react';\r\nimport UserPage from './pages/management/UserPage';\r\nimport RedirectToManagementPage from './pages/common/RedirectToManagementPage';\r\nimport RedirectToTradeMobilePage from './pages/common/RedirectToTradeMobilePage';\r\nimport RedirectToTradePage from './pages/common/RedirectToTradePage'\r\nimport TradeHomePage from './pages/trade/TradeHomePage';\r\nimport TradePage from './pages/trade/TradePage';\r\nimport { TradeMobileHomePage } from './pages/tradeMobile/TradeMobileHomePage';\r\nimport { TradeMobilePage } from './pages/tradeMobile/TradeMobilePage';\r\nimport OperatorPage from './pages/management/OperatorPage';\r\n// import LogPage from './pages/management/LogPage';\r\nimport MarketDataRecordingPage from './pages/management/MarketDataRecordingPage';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst routes = [\r\n  {\r\n    name: \"登录\",\r\n    path: \"/login\",\r\n    component: LoginPage\r\n  },\r\n  {\r\n    path: \"/trade\",\r\n    component: TradePage,\r\n    routes: [\r\n      {\r\n        name: \"交易(PC)\",\r\n        path: \"/trade/home\",\r\n        component: TradeHomePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"管理\",\r\n        path: \"/trade/redirectToManagement\",\r\n        component: RedirectToManagementPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"交易（移动端)\",\r\n        path: \"/trade/redirectToMobileTrade\",\r\n        component: RedirectToTradeMobilePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"设置\",\r\n        path: \"/trade/setting\",\r\n        component: SettingPage,\r\n        isPrivate: true\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: \"/management\",\r\n    component: ManagementPage,\r\n    routes: [\r\n      {\r\n        name: \"交易(PC)\",\r\n        path: \"/management/redirectToTrade\",\r\n        component: RedirectToTradePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"网关\",\r\n        path: \"/management/gateway\",\r\n        component: GatewayPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"节点\",\r\n        path: \"/management/node\",\r\n        component: NodePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"用户\",\r\n        path: \"/management/user\",\r\n        component: UserPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"操作员\",\r\n        path: \"/management/operator\",\r\n        component: OperatorPage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"行情数据记录\",\r\n        path: \"/management/marketDataRecording\",\r\n        component: MarketDataRecordingPage,\r\n        isPrivate: true\r\n      },\r\n      // {\r\n      //   name: \"日志\",\r\n      //   path: \"/management/log\",\r\n      //   component: LogPage,\r\n      //   isPrivate: true\r\n      // },\r\n      {\r\n        name: \"设置\",\r\n        path: \"/management/setting\",\r\n        component: SettingPage,\r\n        isPrivate: true\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: \"/tradeMobile\",\r\n    component: TradeMobilePage,\r\n    routes: [\r\n      {\r\n        name: \"交易(PC)\",\r\n        path: \"/management/redirectToTrade\",\r\n        component: RedirectToTradePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"交易(移动端)\",\r\n        path: \"/tradeMobile/home\",\r\n        component: TradeMobileHomePage,\r\n        isPrivate: true\r\n      },\r\n      {\r\n        name: \"设置\",\r\n        path: \"/tradeMobile/setting\",\r\n        component: SettingPage,\r\n        isPrivate: true\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    component: NotFoundPage\r\n  }\r\n];\r\n\r\n\r\n@inject('authenticationStore')\r\nclass RouteWithSubRoutes extends React.Component<any> {\r\n\r\n  render() {\r\n    const { authenticationStore } = this.props;\r\n    return (\r\n      <Route\r\n        path={this.props.path}\r\n        render={props => {\r\n          if (this.props.isPrivate) {\r\n            if (authenticationStore.isAuthenticated) {\r\n              return (\r\n                <this.props.component {...props} routes={this.props.routes} />\r\n              )\r\n            } else {\r\n              return (\r\n                <Redirect from=\"*\" to='/login' />\r\n              )\r\n            }\r\n          }\r\n          return (\r\n            // pass the sub-routes down to keep nesting\r\n            <this.props.component {...props} routes={this.props.routes} />\r\n          )\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport { routes, RouteWithSubRoutes }","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'mobx-react';\r\nimport { Router, Switch } from 'react-router';\r\nimport {\r\n  history,\r\n  routingStore,\r\n  authenticationStore,\r\n  nodeStore,\r\n  gatewayStore,\r\n  userStore,\r\n  tradeAccountStore,\r\n  tradeContractStore,\r\n  tradeOrderStore,\r\n  tradePositionStore,\r\n  tradeTradeStore,\r\n  tradeTickStore,\r\n  tradeActionStore,\r\n  marketDataRecordingStore,\r\n  customizeStore,\r\n  operatorStore\r\n} from './stores/storesIndex'\r\nimport { routes, RouteWithSubRoutes } from './router'\r\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './index.css';\r\nimport { loadTheme } from '@fluentui/react/lib/Styling';\r\n// import 'mobx-react-lite/batchingForReactDom'\r\n\r\n// Call it once in your app. At the root of your app is the best place\r\ntoast.configure({\r\n  autoClose: 15000,\r\n  style: { width: 400, wordBreak: \"break-all\", whiteSpace: \"pre-wrap\", zIndex: 10000000 }\r\n})\r\n\r\ninitializeIcons('../fabric/fonts/');\r\n\r\nloadTheme({\r\n  palette: {\r\n    themePrimary: '#00a0ff',\r\n    themeLighterAlt: '#00060a',\r\n    themeLighter: '#001a29',\r\n    themeLight: '#00304d',\r\n    themeTertiary: '#006199',\r\n    themeSecondary: '#008ee0',\r\n    themeDarkAlt: '#19abff',\r\n    themeDark: '#3db8ff',\r\n    themeDarker: '#70cbff',\r\n    neutralLighterAlt: '#232323',\r\n    neutralLighter: '#2c2c2c',\r\n    neutralLight: '#3b3b3b',\r\n    neutralQuaternaryAlt: '#444444',\r\n    neutralQuaternary: '#4b4b4b',\r\n    neutralTertiaryAlt: '#6a6a6a',\r\n    neutralTertiary: '#c8c8c8',\r\n    neutralSecondary: '#d0d0d0',\r\n    neutralPrimaryAlt: '#dadada',\r\n    neutralPrimary: '#ffffff',\r\n    neutralDark: '#f4f4f4',\r\n    black: '#f8f8f8',\r\n    white: '#191919',\r\n  }\r\n});\r\n\r\n\r\n// Stores\r\nconst stores = {\r\n  authenticationStore,\r\n  routingStore,\r\n  nodeStore,\r\n  gatewayStore,\r\n  userStore,\r\n  tradeAccountStore,\r\n  tradeContractStore,\r\n  tradeOrderStore,\r\n  tradePositionStore,\r\n  tradeTradeStore,\r\n  tradeTickStore,\r\n  tradeActionStore,\r\n  marketDataRecordingStore,\r\n  customizeStore,\r\n  operatorStore\r\n};\r\n\r\nReactDOM.render(\r\n  <Provider {...stores} style={{ height: \"100%\" }}>\r\n    <Router history={history}>\r\n      <Switch>\r\n        {routes.map((route, i) => (\r\n          <RouteWithSubRoutes key={i} {...route} />\r\n        ))}\r\n      </Switch>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\n","\r\n\r\nimport { xyz } from \"../../pb/pb\"\r\nimport { webSocketClientHandler } from '../websocket/webSocketClientHandler'\r\nimport { rpcClientRtnHandler } from './rpcClientRtnHandler';\r\nimport { rpcClientRspHandler } from './rpcClientRspHandler';\r\n\r\nimport * as lz4 from \"lz4js\";\r\nimport { rpcClientApi } from \"./rpcClientApi\";\r\nimport request from \"../../../request\";\r\nimport * as base64 from \"byte-base64\";\r\n\r\nconst {\r\n    DataExchangeProtocol,\r\n    RpcExceptionRsp,\r\n    RpcId,\r\n    RpcSubscribeRsp,\r\n    RpcUnsubscribeRsp,\r\n    RpcSubmitOrderRsp,\r\n    RpcCancelOrderRsp,\r\n    RpcSearchContractRsp,\r\n    RpcGetAccountListRsp,\r\n    RpcGetPositionListRsp,\r\n    RpcGetTradeListRsp,\r\n    RpcGetOrderListRsp,\r\n    RpcGetContractListRsp,\r\n    RpcGetTickListRsp,\r\n    RpcOrderRtn,\r\n    RpcTradeRtn,\r\n    RpcPositionRtn,\r\n    RpcAccountRtn,\r\n    RpcTickRtn,\r\n    RpcContractRtn,\r\n    RpcNoticeRtn,\r\n    RpcOrderListRtn,\r\n    RpcTradeListRtn,\r\n    RpcPositionListRtn,\r\n    RpcAccountListRtn,\r\n    RpcTickListRtn,\r\n    RpcContractListRtn\r\n} = xyz.redtorch.pb\r\n\r\nclass RpcClientProcess {\r\n\r\n    public static getInstance = (): RpcClientProcess => {\r\n        if (!RpcClientProcess.instance) {\r\n            RpcClientProcess.instance = new RpcClientProcess();\r\n        }\r\n        return RpcClientProcess.instance;\r\n    }\r\n\r\n    private static instance: RpcClientProcess;\r\n    private intervalRefreshAllDataStarted = false;\r\n    // private intervalRefreshContractDataStarted = false;\r\n    private constructor() {\r\n    }\r\n\r\n    // 定时刷新全部合约列表功能停用,对性能要求太高\r\n    // startIntervalRefreshContractData = () => {\r\n    //     this.intervalRefreshContractDataStarted = true;\r\n    //     if(webSocketClientHandler.checkConnected()){\r\n    //         rpcClientApi.asyncGetContractList()\r\n    //     }\r\n    //     setTimeout(this.startIntervalRefreshContractData,70*1000)\r\n\r\n    // }\r\n\r\n    private startIntervalRefreshAllData = () => {\r\n        this.intervalRefreshAllDataStarted = true;\r\n        if (webSocketClientHandler.checkConnected()) {\r\n            // 合约列表太大，单独刷新，减少刷新频率\r\n            // rpcClientApi.asyncGetContractList()\r\n            rpcClientApi.asyncGetAccountList()\r\n            rpcClientApi.asyncGetOrderList()\r\n            rpcClientApi.asyncGetTradeList()\r\n            rpcClientApi.asyncGetPositionList()\r\n            rpcClientApi.asyncGetTickList()\r\n        }\r\n        setTimeout(this.startIntervalRefreshAllData, 30 * 1000)\r\n\r\n    }\r\n\r\n    public onConnectd = () => {\r\n        if (!this.intervalRefreshAllDataStarted) {\r\n            this.startIntervalRefreshAllData()\r\n        }\r\n\r\n        // if(!this.intervalRefreshContractDataStarted){\r\n        //     this.startIntervalRefreshContractData()\r\n        // }\r\n    }\r\n\r\n    public processData = (data: Uint8Array) => {\r\n        let dep;\r\n        try {\r\n            dep = DataExchangeProtocol.decode(data);\r\n        } catch (error) {\r\n            console.error(\"处理DEP错误,PB解析数据发生错误\", error)\r\n            console.error(`处理DEP错误,PB解析数据发生错误,原始数据HEX:${Buffer.from(data).toString('hex')}`);\r\n            return;\r\n        }\r\n\r\n        const { rpcId, timestamp, contentType, contentBytes } = dep;\r\n\r\n        // console.info(`处理DEP记录,RPC类型:${rpcType},RPC ID:${rpcId},业务ID:${transactionId}内容类型:${contentType},时间戳:${timestamp}`);\r\n\r\n        let finalContentBytes;\r\n        if (contentType === DataExchangeProtocol.ContentType.COMPRESSED_LZ4) {\r\n            try {\r\n                finalContentBytes = lz4.decompress(contentBytes, undefined);\r\n            } catch (error) {\r\n                console.error(`处理DEP异常,RPC ID:${rpcId},时间戳:${timestamp},无法使用LZ4正确解析报文内容`)\r\n                return;\r\n            }\r\n        } else if (contentType === DataExchangeProtocol.ContentType.ROUTINE) {\r\n            finalContentBytes = contentBytes\r\n        } else {\r\n            console.error(`处理DEP错误,RPC ID:${rpcId},时间戳:${timestamp},不支持的报文类型`)\r\n            return;\r\n        }\r\n        if (!finalContentBytes || finalContentBytes.length <= 0) {\r\n            console.error(`处理DEP错误,RPC ID:${rpcId},时间戳:${timestamp},报文长度错误`)\r\n            return;\r\n        }\r\n\r\n        this.doCoreRpc(rpcId, finalContentBytes, timestamp);\r\n    }\r\n\r\n    private doCoreRpc = (rpcId: number, contentBytes: any, timestamp: number | Long) => {\r\n\r\n        let transactionId: string | null | undefined = \"\";\r\n        switch (rpcId) {\r\n            case RpcId.UNKNOWN_RPC_ID: {\r\n                console.log(`处理RPC,RPC ID:${rpcId}`);\r\n                break;\r\n            }\r\n            case RpcId.SUBSCRIBE_RSP: {\r\n                try {\r\n                    const rpcSubscribeRsp = RpcSubscribeRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcSubscribeRsp.commonRsp);\r\n                    transactionId = rpcSubscribeRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onSubscribeRsp(rpcSubscribeRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:SUBSCRIBE_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.UNSUBSCRIBE_RSP: {\r\n                try {\r\n                    const rpcUnsubscribeRsp = RpcUnsubscribeRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcUnsubscribeRsp.commonRsp);\r\n                    transactionId = rpcUnsubscribeRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onUnsubscribeRsp(rpcUnsubscribeRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:UNSUBSCRIBE_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.SUBMIT_ORDER_RSP: {\r\n                try {\r\n                    const rpcSubmitOrderRsp = RpcSubmitOrderRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcSubmitOrderRsp.commonRsp);\r\n                    transactionId = rpcSubmitOrderRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onSubmitOrderRsp(rpcSubmitOrderRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:SUBMIT_ORDER_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.CANCEL_ORDER_RSP: {\r\n                try {\r\n                    const rpcCancelOrderRsp = RpcCancelOrderRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcCancelOrderRsp.commonRsp);\r\n                    transactionId = rpcCancelOrderRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onCancelOrderRsp(rpcCancelOrderRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:CANCEL_ORDER_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.SEARCH_CONTRACT_RSP: {\r\n                try {\r\n                    const rpcSearchContractRsp = RpcSearchContractRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcSearchContractRsp.commonRsp);\r\n                    transactionId = rpcSearchContractRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onCancelOrderRsp(rpcSearchContractRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:SEARCH_CONTRACT_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_ACCOUNT_LIST_RSP: {\r\n                try {\r\n                    const rpcGetAccountListRsp = RpcGetAccountListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetAccountListRsp.commonRsp);\r\n                    transactionId = rpcGetAccountListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetAccountListRsp(rpcGetAccountListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_ACCOUNT_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_CONTRACT_LIST_RSP: {\r\n                try {\r\n                    const rpcGetContractListRsp = RpcGetContractListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetContractListRsp.commonRsp);\r\n                    transactionId = rpcGetContractListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetContractListRsp(rpcGetContractListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_CONTRACT_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_POSITION_LIST_RSP: {\r\n                try {\r\n                    const rpcGetPositionListRsp = RpcGetPositionListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetPositionListRsp.commonRsp);\r\n                    transactionId = rpcGetPositionListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetPositionListRsp(rpcGetPositionListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_POSITION_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_TRADE_LIST_RSP: {\r\n                try {\r\n                    const rpcGetTradeListRsp = RpcGetTradeListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetTradeListRsp.commonRsp);\r\n                    transactionId = rpcGetTradeListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetTradeListRsp(rpcGetTradeListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_TRADE_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_ORDER_LIST_RSP: {\r\n                try {\r\n                    const rpcGetOrderListRsp = RpcGetOrderListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetOrderListRsp.commonRsp);\r\n                    transactionId = rpcGetOrderListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetOrderListRsp(rpcGetOrderListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_ORDER_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.GET_TICK_LIST_RSP: {\r\n                try {\r\n                    const rpcGetTickListRsp = RpcGetTickListRsp.decode(contentBytes);\r\n                    this.checkCommonRsp(rpcGetTickListRsp.commonRsp);\r\n                    transactionId = rpcGetTickListRsp.commonRsp?.transactionId;\r\n                    rpcClientRspHandler.onGetTickListRsp(rpcGetTickListRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,业务ID:${transactionId},RPC:GET_TICK_LIST_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            // -------------------------------------------------------------------------------\r\n            case RpcId.EXCEPTION_RSP: {\r\n                try {\r\n                    const rpcExceptionRsp = RpcExceptionRsp.decode(contentBytes);\r\n                    rpcClientRspHandler.onExceptionRsp(rpcExceptionRsp)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:EXCEPTION_RSP`, error);\r\n                }\r\n                break;\r\n            }\r\n            // -------------------------------------------------------------------------------\r\n\r\n            case RpcId.ORDER_RTN: {\r\n                try {\r\n                    const rpcOrderRtn = RpcOrderRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onOrderRtn(rpcOrderRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ORDER_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TRADE_RTN: {\r\n                try {\r\n                    const rpcTradeRtn = RpcTradeRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTradeRtn(rpcTradeRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TRADE_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.POSITION_RTN: {\r\n                try {\r\n                    const rpcPositionRtn = RpcPositionRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onPositionRtn(rpcPositionRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:POSITION_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.ACCOUNT_RTN: {\r\n                try {\r\n                    const rpcAccountRtn = RpcAccountRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onAccountRtn(rpcAccountRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ACCOUNT_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.CONTRACT_RTN: {\r\n                try {\r\n                    const rpcContractRtn = RpcContractRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onContractRtn(rpcContractRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:CONTRACT_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TICK_RTN: {\r\n                try {\r\n                    const rpcTickRtn = RpcTickRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTickRtn(rpcTickRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TICK_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.ORDER_LIST_RTN: {\r\n                try {\r\n                    const rpcOrderListRtn = RpcOrderListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onOrderListRtn(rpcOrderListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ORDER_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TRADE_LIST_RTN: {\r\n                try {\r\n                    const rpcTradeListRtn = RpcTradeListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTradeListRtn(rpcTradeListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TRADE_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.POSITION_LIST_RTN: {\r\n                try {\r\n                    const rpcPositionListRtn = RpcPositionListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onPositionListRtn(rpcPositionListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:POSITION_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.ACCOUNT_LIST_RTN: {\r\n                try {\r\n                    const rpcAccountListRtn = RpcAccountListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onAccountListRtn(rpcAccountListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:ACCOUNT_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.CONTRACT_LIST_RTN: {\r\n                try {\r\n                    const rpcContractListRtn = RpcContractListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onContractListRtn(rpcContractListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:CONTRACT_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.TICK_LIST_RTN: {\r\n                try {\r\n                    const rpcTickListRtn = RpcTickListRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onTickListRtn(rpcTickListRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:TICK_LIST_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n            case RpcId.NOTICE_RTN: {\r\n                try {\r\n                    const rpcNoticeRtn = RpcNoticeRtn.decode(contentBytes);\r\n                    rpcClientRtnHandler.onNoticeRtn(rpcNoticeRtn)\r\n                } catch (error) {\r\n                    console.error(`处理RPC异常,RPC:NOTICE_RTN`, error);\r\n                }\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                console.error(`处理RPC错误,RPC ID:${rpcId}不支持此功能`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // HTTP\r\n    public sendAsyncHttpRpc = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n\r\n        const data = this.generateRpcDep(rpcId, transactionId, content);\r\n        if (data) {\r\n\r\n            request('/api/rpc', {\r\n                method: 'POST',\r\n                data: {\r\n                    voData: base64.bytesToBase64(data)\r\n                }\r\n            }).then((res: any) => {\r\n                if (res) {\r\n                    if (res.status) {\r\n                        if (res.voData) {\r\n                            const resData = base64.base64ToBytes(res.voData)\r\n                            this.processData(resData)\r\n                        }\r\n                    } else {\r\n                        console.error(`发送HTTP RPC错误,业务ID:${transactionId},RPC ID:${rpcId}`)\r\n                    }\r\n                }\r\n            }).catch((err: any) => {\r\n                console.log(err);\r\n            });\r\n        }\r\n        return false;\r\n\r\n\r\n\r\n    }\r\n\r\n    public sendRpc = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n\r\n        const data = this.generateRpcDep(rpcId, transactionId, content);\r\n        if (data) {\r\n            if (!webSocketClientHandler.sendData(data)) {\r\n                console.error(`发送RPC错误,业务ID:${transactionId},RPC ID:${rpcId}`)\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private generateRpcDep = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n        if (content.length > 10240) {\r\n            return this.generateLz4RpcDep(rpcId, transactionId, content);\r\n        } else {\r\n            return this.generateRoutineRpcDep(rpcId, transactionId, content)\r\n        }\r\n    }\r\n\r\n    private generateLz4RpcDep = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n        let encodeContent;\r\n        try {\r\n            encodeContent = lz4.compress(content, undefined)\r\n        } catch (error) {\r\n            console.error(`发送RPC错误,压缩错误,业务ID:${transactionId},RPC ID:${rpcId}`, error)\r\n            return null;\r\n        }\r\n\r\n        const dep = new DataExchangeProtocol();\r\n        dep.contentType = DataExchangeProtocol.ContentType.COMPRESSED_LZ4;\r\n        dep.rpcId = rpcId;\r\n        dep.timestamp = Date.now();\r\n        dep.contentBytes = encodeContent;\r\n\r\n        return DataExchangeProtocol.encode(dep).finish()\r\n    }\r\n\r\n    private generateRoutineRpcDep = (rpcId: number, transactionId: string, content: Uint8Array) => {\r\n        const dep = new DataExchangeProtocol();\r\n        dep.contentType = DataExchangeProtocol.ContentType.ROUTINE\r\n        dep.rpcId = rpcId\r\n        dep.timestamp = Date.now()\r\n        dep.contentBytes = content\r\n\r\n        return DataExchangeProtocol.encode(dep).finish()\r\n    }\r\n\r\n    private checkCommonRsp = (commonRsp: xyz.redtorch.pb.ICommonRspField | null | undefined) => {\r\n        if (!commonRsp) {\r\n            console.error(\"参数commonRsp缺失\");\r\n            throw new Error(\"参数commonRsp缺失\");\r\n        }\r\n\r\n        if (!commonRsp.transactionId || commonRsp.transactionId === \"\") {\r\n            console.error(\"参数transactionId缺失\");\r\n            throw new Error(\"参数transactionId缺失\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst rpcClientProcess = RpcClientProcess.getInstance()\r\n\r\nexport { rpcClientProcess };","import { xyz } from \"../../pb/pb\";\r\nimport { tradeOrderStore, tradeTradeStore, tradeAccountStore, tradePositionStore, tradeContractStore, tradeTickStore } from \"../../../stores/storesIndex\";\r\nimport { toast } from 'react-toastify';\r\nimport { timestampFormat } from \"../../../utils\";\r\n\r\nconst {\r\n    CommonStatusEnum\r\n} = xyz.redtorch.pb\r\n\r\nclass RpcClientRtnHandler {\r\n\r\n    public static getInstance(): RpcClientRtnHandler {\r\n        if (!RpcClientRtnHandler.instance) {\r\n            RpcClientRtnHandler.instance = new RpcClientRtnHandler();\r\n        }\r\n        return RpcClientRtnHandler.instance;\r\n    }\r\n\r\n    private static instance: RpcClientRtnHandler;\r\n    private constructor() {\r\n    }\r\n\r\n    public onOrderRtn = (rpcOrderRtn: xyz.redtorch.pb.IRpcOrderRtn) => {\r\n        if (rpcOrderRtn.order) {\r\n            tradeOrderStore.storeOrder(rpcOrderRtn.order)\r\n        }\r\n    }\r\n\r\n    public onTradeRtn = (rpcTradeRtn: xyz.redtorch.pb.IRpcTradeRtn) => {\r\n        if (rpcTradeRtn.trade) {\r\n            tradeTradeStore.storeTrade(rpcTradeRtn.trade)\r\n        }\r\n    }\r\n\r\n    public onContractRtn = (rpcContractRtn: xyz.redtorch.pb.IRpcContractRtn) => {\r\n        if (rpcContractRtn.contract) {\r\n            tradeContractStore.storeContract(rpcContractRtn.contract)\r\n        }\r\n    }\r\n\r\n    public onPositionRtn = (rpcPositionRtn: xyz.redtorch.pb.IRpcPositionRtn) => {\r\n        if (rpcPositionRtn.position) {\r\n            tradePositionStore.storePosition(rpcPositionRtn.position)\r\n        }\r\n    }\r\n\r\n    public onAccountRtn = (rpcAccountRtn: xyz.redtorch.pb.IRpcAccountRtn) => {\r\n        if (rpcAccountRtn.account) {\r\n            tradeAccountStore.storeAccount(rpcAccountRtn.account)\r\n        }\r\n    }\r\n\r\n    public onTickRtn = (rpcTickRtn: xyz.redtorch.pb.RpcTickRtn) => {\r\n        if (rpcTickRtn.tick) {\r\n            tradeTickStore.storeTick(rpcTickRtn.tick)\r\n        }\r\n\r\n    }\r\n\r\n    public onOrderListRtn = (rpcOrderListRtn: xyz.redtorch.pb.IRpcOrderListRtn) => {\r\n        if (rpcOrderListRtn.order) {\r\n            tradeOrderStore.storeOrderList(rpcOrderListRtn.order)\r\n        }\r\n    }\r\n\r\n    public onTradeListRtn = (rpcTradeListRtn: xyz.redtorch.pb.IRpcTradeListRtn) => {\r\n        if (rpcTradeListRtn.trade) {\r\n            tradeTradeStore.storeTradeList(rpcTradeListRtn.trade)\r\n        }\r\n    }\r\n\r\n    public onContractListRtn = (rpcContractListRtn: xyz.redtorch.pb.IRpcContractListRtn) => {\r\n        if (rpcContractListRtn.contract) {\r\n            tradeContractStore.storeContractList(rpcContractListRtn.contract)\r\n        }\r\n    }\r\n\r\n    public onPositionListRtn = (rpcPositionListRtn: xyz.redtorch.pb.IRpcPositionListRtn) => {\r\n        if (rpcPositionListRtn.position) {\r\n            tradePositionStore.storePositionList(rpcPositionListRtn.position)\r\n        }\r\n    }\r\n\r\n    public onAccountListRtn = (rpcAccountListRtn: xyz.redtorch.pb.IRpcAccountListRtn) => {\r\n        if (rpcAccountListRtn.account) {\r\n            tradeAccountStore.storeAccountList(rpcAccountListRtn.account)\r\n        }\r\n    }\r\n\r\n    public onTickListRtn = (rpcTickListRtn: xyz.redtorch.pb.RpcTickListRtn) => {\r\n        if (rpcTickListRtn.tick) {\r\n            tradeTickStore.storeTick(rpcTickListRtn.tick)\r\n        }\r\n    }\r\n\r\n    public onNoticeRtn = (rpcNoticeRtn: xyz.redtorch.pb.RpcNoticeRtn) => {\r\n        // 检查notice,以免编译器报错\r\n        if (rpcNoticeRtn.notice) {\r\n            const commonStatus = rpcNoticeRtn.notice.status\r\n            let timestamp: any = 0;\r\n            if (rpcNoticeRtn.notice.timestamp) {\r\n                timestamp = rpcNoticeRtn.notice.timestamp\r\n            }\r\n            if (commonStatus === CommonStatusEnum.COMS_INFO) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: 8000, type: \"success\" })\r\n                console.log(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            } else if (commonStatus === CommonStatusEnum.COMS_WARN) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: false, type: \"warning\" })\r\n                console.warn(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            } else if (commonStatus === CommonStatusEnum.COMS_ERROR) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: false, type: \"error\" })\r\n                console.error(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            } else if (commonStatus === CommonStatusEnum.COMS_SUCCESS) {\r\n                toast(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`, { autoClose: 5000, type: \"success\" })\r\n                console.log(`通知:${timestampFormat(timestamp)}→ ${rpcNoticeRtn.notice.content}`)\r\n            }\r\n        }\r\n    }\r\n}\r\nconst rpcClientRtnHandler = RpcClientRtnHandler.getInstance()\r\n\r\nexport { rpcClientRtnHandler };","import { xyz } from \"../../pb/pb\";\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { tradeAccountStore, tradeContractStore, tradeOrderStore, tradePositionStore, tradeTradeStore, tradeTickStore } from \"../../../stores/storesIndex\";\r\n\r\nclass RpcClientRspHandler {\r\n\r\n    public static getInstance = (): RpcClientRspHandler => {\r\n        if (!RpcClientRspHandler.instance) {\r\n            RpcClientRspHandler.instance = new RpcClientRspHandler();\r\n        }\r\n        return RpcClientRspHandler.instance;\r\n    }\r\n\r\n    private static instance: RpcClientRspHandler;\r\n    private constructor() {\r\n    }\r\n\r\n\r\n    public onSubscribeRsp = (rpcSubscribeRsp: xyz.redtorch.pb.IRpcSubscribeRsp) => {\r\n        const commonRsp = rpcSubscribeRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`订阅完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onUnsubscribeRsp = (rpcUnsubscribeRsp: xyz.redtorch.pb.IRpcUnsubscribeRsp) => {\r\n        const commonRsp = rpcUnsubscribeRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`取消订阅完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`取消订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`取消订阅错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onSubmitOrderRsp = (rpcSubmitOrderRsp: xyz.redtorch.pb.IRpcSubmitOrderRsp) => {\r\n        const commonRsp = rpcSubmitOrderRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`提交定单完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`提交定单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`提交订单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public onCancelOrderRsp = (rpcCancelOrderRsp: xyz.redtorch.pb.IRpcCancelOrderRsp) => {\r\n        const commonRsp = rpcCancelOrderRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`撤销定单完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`撤销定单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`撤销定单错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onSearchContractRsp = (rpcSearchContractRsp: xyz.redtorch.pb.IRpcSearchContractRsp) => {\r\n        const commonRsp = rpcSearchContractRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`搜寻合约完成,业务ID:${rpcTransactionId}`);\r\n            } else {\r\n                console.error(`搜寻合约错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`搜寻合约错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onGetAccountListRsp = (rpcGetAccountListRsp: xyz.redtorch.pb.RpcGetAccountListRsp) => {\r\n        const commonRsp = rpcGetAccountListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                const accountListlength = rpcGetAccountListRsp.account.length\r\n                console.log(`获取账户列表完成,业务ID:${rpcTransactionId},共计${accountListlength}条数据`);\r\n                tradeAccountStore.clearAndStoreAccountList(rpcGetAccountListRsp.account);\r\n            } else {\r\n                console.error(`获取账户列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取账户列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onGetContractListRsp = (rpcGetContractListRsp: xyz.redtorch.pb.RpcGetContractListRsp) => {\r\n        const commonRsp = rpcGetContractListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取混合合约列表完成,业务ID:${rpcTransactionId},共计${rpcGetContractListRsp.contract.length}条数据`);\r\n                // const mixContractList: any[] = []\r\n                // for (let i = 0; i < rpcGetContractListRsp.contract.length; i++) {\r\n                //     const contract = rpcGetContractListRsp.contract[i];\r\n                //     mixContractList.push(ContractField.toObject(contract as xyz.redtorch.pb.ContractField, {\r\n                //         enums: String,\r\n                //         longs: String,\r\n                //         defaults: true,\r\n                //         arrays: true,\r\n                //         objects: true\r\n                //     }))\r\n                // }\r\n                tradeContractStore.clearAndStoreContractList(rpcGetContractListRsp.contract);\r\n            } else {\r\n                console.error(`获取混合列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取混合列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onGetPositionListRsp = (rpcGetPositionListRsp: xyz.redtorch.pb.RpcGetPositionListRsp) => {\r\n        const commonRsp = rpcGetPositionListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取持仓列表完成,业务ID:${rpcTransactionId},共计${rpcGetPositionListRsp.position.length}条数据`);\r\n                tradePositionStore.clearAndStorePositionList(rpcGetPositionListRsp.position);\r\n            } else {\r\n                console.error(`获取持仓列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取持仓列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onGetOrderListRsp = (rpcGetOrderListRsp: xyz.redtorch.pb.RpcGetOrderListRsp) => {\r\n        const commonRsp = rpcGetOrderListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取委托列表完成,业务ID:${rpcTransactionId},共计${rpcGetOrderListRsp.order.length}条数据`);\r\n                tradeOrderStore.clearAndStoreOrderList(rpcGetOrderListRsp.order);\r\n            } else {\r\n                console.error(`获取委托列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取委托列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public onGetTradeListRsp = (rpcGetTradeListRsp: xyz.redtorch.pb.RpcGetTradeListRsp) => {\r\n        const commonRsp = rpcGetTradeListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取成交列表完成,业务ID:${rpcTransactionId},共计${rpcGetTradeListRsp.trade.length}条数据`);\r\n                tradeTradeStore.clearAndStoreTradeList(rpcGetTradeListRsp.trade);\r\n            } else {\r\n                console.error(`获取成交列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取成交列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onGetTickListRsp = (rpcGetTickListRsp: xyz.redtorch.pb.RpcGetTickListRsp) => {\r\n        const commonRsp = rpcGetTickListRsp.commonRsp;\r\n        // 检查commonRsp,以免编译器报错\r\n        if (commonRsp) {\r\n            const errorId = commonRsp.errorId;\r\n            const rpcTransactionId = commonRsp.transactionId\r\n\r\n            if (errorId === 0) {\r\n                console.log(`获取Tick列表完成,业务ID:${rpcTransactionId},共计${rpcGetTickListRsp.tick.length}条数据`);\r\n                tradeTickStore.clearAndStoreTickList(rpcGetTickListRsp.tick);\r\n            } else {\r\n                console.error(`获取Tick列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`);\r\n                toast(`获取Tick列表错误,业务ID:${rpcTransactionId},错误ID:${errorId},错误信息:${commonRsp.errorMsg}`, { type: \"error\", autoClose: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    public onExceptionRsp = (rpcExceptionRsp: xyz.redtorch.pb.IRpcExceptionRsp) => {\r\n        toast(`接收到异常回报,异常信息:${rpcExceptionRsp.info}`, { type: \"error\" });\r\n        if (rpcExceptionRsp.originalTransactionId && rpcExceptionRsp.originalTransactionId !== \"\") {\r\n            const transactionId = rpcExceptionRsp.originalTransactionId;\r\n            console.error(`接收到异常回报,业务ID:${transactionId},异常信息:${rpcExceptionRsp.info}`);\r\n            toast(`接收到异常回报,业务ID:${transactionId},异常信息:${rpcExceptionRsp.info}`, { type: \"error\", autoClose: false })\r\n        } else {\r\n            console.error(`接收到未知业务ID的异常回报,异常信息:${rpcExceptionRsp.info}`);\r\n            toast(`接收到异常回报,异常信息:${rpcExceptionRsp.info}`, { type: \"error\", autoClose: false })\r\n        }\r\n    }\r\n}\r\n\r\nconst rpcClientRspHandler = RpcClientRspHandler.getInstance()\r\n\r\nexport { rpcClientRspHandler };","\r\nimport { IDatePickerStrings } from '@fluentui/react/lib/DatePicker';\r\nimport { xyz } from './node/pb/pb'\r\n\r\nconst hostNamePattern = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/\r\n\r\nconst ipv4PattenPattern = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\r\n\r\nconst portPattern = /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/\r\n\r\nconst normalIntegerPattern = /^\\+?(0|[1-9]\\d*)$/\r\n\r\n\r\nconst numberFormat = (value: number, decimals: number, comma?: boolean) => {\r\n\r\n    try {\r\n        if (value === undefined) {\r\n            return \"undefined\";\r\n        } else if (Number.isNaN(value)) {\r\n            return \"NA\";\r\n        } else {\r\n            if (Math.abs(value) > 10000000000) {\r\n                return value.toExponential(decimals)\r\n            }\r\n        }\r\n        const result = value.toFixed(decimals);\r\n        if (comma) {\r\n            const reg = result.indexOf(\".\") > -1 ? /(\\d)(?=(\\d{3})+\\.)/g : /(\\d)(?=(?:\\d{3})+$)/g;\r\n            return result.replace(reg, \"$1,\")\r\n        } else {\r\n            return result\r\n        }\r\n    } catch (error) {\r\n        console.log(\"格式化数字发生错误\", error)\r\n        return \"ERROR\"\r\n    }\r\n\r\n}\r\n\r\nconst leftZeroPad = (val: any, minLength: number) => {\r\n    try {\r\n        let newValue = val;\r\n        if (typeof (newValue) !== \"string\") {\r\n            newValue = String(val);\r\n        }\r\n        if (minLength <= newValue.length) {\r\n            return newValue\r\n        }\r\n        return (\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\".substring(0, minLength - newValue.length)) + newValue;\r\n    } catch (error) {\r\n        console.error(\"补齐长度发生错误\", error)\r\n        throw error\r\n    }\r\n}\r\n\r\nconst formatDate = (date: Date, fmt: string) => {\r\n    if (!date) {\r\n        return ''\r\n    }\r\n\r\n    let result = fmt;\r\n    try {\r\n        if (/(y+)/.test(result)) {\r\n            result = result.replace(RegExp.$1, (`${date.getFullYear()}`).substr(4 - RegExp.$1.length));\r\n        }\r\n        const o = {\r\n            'M+': date.getMonth() + 1,\r\n            'd+': date.getDate(),\r\n            'H+': date.getHours(),\r\n            'm+': date.getMinutes(),\r\n            's+': date.getSeconds(),\r\n            'S+': date.getMilliseconds()\r\n        }\r\n\r\n        const keyList = Object.keys(o)\r\n        for (let i = 0; i < keyList.length; i++) {\r\n            const k = keyList[i]\r\n            if (new RegExp(`(${k})`).test(result)) {\r\n                const str = `${o[k]}`;\r\n                if (k === 'S+') {\r\n                    result = result.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : leftZeroPad(str, 3));\r\n                } else {\r\n                    result = result.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : leftZeroPad(str, 2));\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(\"格式化时间发生错误\", error)\r\n        result = date.toISOString()\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n\r\nconst timestampFormat = (timestamp?: number | null, formatStr?: string) => {\r\n    if (!timestamp) {\r\n        return ''\r\n    }\r\n    try {\r\n        const date = new Date(timestamp);\r\n        if (formatStr) {\r\n            return formatDate(date, formatStr)\r\n        }\r\n        return formatDate(date, \"yyyy-MM-dd HH:mm:ss.SSS\")\r\n    } catch (error) {\r\n        console.error(\"时间转换错误\", error)\r\n        return 'ERROR'\r\n    }\r\n};\r\n\r\n\r\nconst roundWithStep = (value: number, step: number) => {\r\n    try {\r\n        let tmpStep = step;\r\n        if (!step) {\r\n            tmpStep = 1.0\r\n        }\r\n        const inv = 1.0 / tmpStep;\r\n        return Math.round(value * inv) / inv;\r\n    } catch (error) {\r\n        console.error(\"格式化到最小变动价位发生错误\", error)\r\n        return 0\r\n    }\r\n\r\n}\r\n\r\nconst deepCopy = (o: any): any => {\r\n    if (o instanceof Array) {  // 先判断Array\r\n        const n = [];\r\n        for (let i = 0; i < o.length; ++i) {\r\n            n[i] = deepCopy(o[i]);\r\n        }\r\n        return n;\r\n\r\n    } else if (o instanceof Object) {\r\n        const n = {}\r\n        for (const i in o) {\r\n            if (i) {\r\n                n[i] = deepCopy(o[i]);\r\n            }\r\n        }\r\n        return n;\r\n    } else {\r\n        return o;\r\n    }\r\n}\r\n\r\nconst getNumberOfDecimalDigits = (value: number) => {\r\n    try {\r\n\r\n        let x = String(value).indexOf('.');\r\n        if (x === -1) {\r\n            return 0\r\n        } else {\r\n            x = x + 1\r\n        }\r\n        const y = String(value).length - x; // 小数的位数\r\n        if (y > 0) {\r\n            return y\r\n        } else {\r\n            return 0\r\n        }\r\n    } catch (error) {\r\n        console.error(\"获取小数位数发生错误\")\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nconst checkEffectiveNumber = (value: any): boolean => {\r\n    if (value === 0 || (value && value !== Number.MAX_VALUE)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n// const isDevEnv = process.env.NODE_ENV === \"development\"\r\nconst isDevEnv = false\r\n\r\n\r\nconst dayPickerStrings: IDatePickerStrings = {\r\n    months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],\r\n\r\n    shortMonths: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],\r\n\r\n    days: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],\r\n\r\n    shortDays: ['日', '一', '二', '三', '四', '五', '六'],\r\n\r\n    goToToday: '今日',\r\n    prevMonthAriaLabel: '上个月',\r\n    nextMonthAriaLabel: '下个月',\r\n    prevYearAriaLabel: '上一年',\r\n    nextYearAriaLabel: '下一年',\r\n    closeButtonAriaLabel: '关闭'\r\n};\r\n\r\nconst { ExchangeEnum, CurrencyEnum, ProductClassEnum } = xyz.redtorch.pb\r\n\r\nconst exchangeOptions: any[] = []\r\nexchangeOptions.push({\r\n    key: 9999,\r\n    text: '全部'\r\n})\r\nObject.keys(ExchangeEnum).forEach(\r\n    (element: any) => {\r\n        exchangeOptions.push({\r\n            key: ExchangeEnum[element],\r\n            text: element\r\n        })\r\n    }\r\n)\r\n\r\nconst currencyOptions: any[] = []\r\ncurrencyOptions.push({\r\n    key: 9999,\r\n    text: '全部'\r\n})\r\nObject.keys(CurrencyEnum).forEach(\r\n    (element: any) => {\r\n        currencyOptions.push({\r\n            key: CurrencyEnum[element],\r\n            text: element\r\n        })\r\n    }\r\n)\r\n\r\nconst productClassOptions: any[] = []\r\nproductClassOptions.push({\r\n    key: 9999,\r\n    text: '全部'\r\n})\r\nObject.keys(ProductClassEnum).forEach(\r\n    (element: any) => {\r\n        productClassOptions.push({\r\n            key: ProductClassEnum[element],\r\n            text: element\r\n        })\r\n    }\r\n)\r\n\r\nexport {\r\n    hostNamePattern,\r\n    ipv4PattenPattern,\r\n    portPattern,\r\n    normalIntegerPattern,\r\n    numberFormat,\r\n    leftZeroPad,\r\n    timestampFormat,\r\n    roundWithStep,\r\n    deepCopy,\r\n    isDevEnv,\r\n    dayPickerStrings,\r\n    getNumberOfDecimalDigits,\r\n    checkEffectiveNumber,\r\n    productClassOptions,\r\n    currencyOptions,\r\n    exchangeOptions\r\n}","import { rpcClientProcess } from '../service/rpcClientProcess'\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nclass WebSocketClientHandler {\r\n\r\n    public static STATUS_DISCONNECTED = 0;\r\n    public static STATUS_CONNECTED = 1;\r\n    public static STATUS_CONNECTING = 2;\r\n    public static STATUS_DISCONNECTING = 3;\r\n\r\n    public static getInstance(): WebSocketClientHandler {\r\n        if (!WebSocketClientHandler.instance) {\r\n            WebSocketClientHandler.instance = new WebSocketClientHandler();\r\n        }\r\n        return WebSocketClientHandler.instance;\r\n    }\r\n\r\n    private static instance: WebSocketClientHandler;\r\n    private authFailedState: boolean = false;\r\n    private connectRetry: boolean = false;\r\n    private connectRetryTimes: number = 0;\r\n    private connectStatus: number = 0;\r\n    private closeCode: number = 0;\r\n    private closeReason: string = \"\";\r\n    private authToken: string = \"\";\r\n    private ws: WebSocket | null = null;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    public setAuthToken = (authToken: string) => {\r\n        this.authToken = authToken\r\n    }\r\n\r\n    public getStatus = () => {\r\n        return {\r\n            'authFailedState': this.authFailedState,\r\n            'connectStatus': this.connectStatus,\r\n            'closeCode': this.closeCode,\r\n            'closeReason': this.closeReason,\r\n            'connectRetryTimes': this.connectRetryTimes\r\n        }\r\n    }\r\n\r\n    public checkConnected = () => {\r\n        return this.connectStatus === WebSocketClientHandler.STATUS_CONNECTED\r\n    }\r\n\r\n    public connect = () => {\r\n        if (this.authToken) {\r\n            if (this.connectStatus === WebSocketClientHandler.STATUS_DISCONNECTED) {\r\n                this.connectRetry = true;\r\n                this.connectStatus = WebSocketClientHandler.STATUS_CONNECTING;\r\n                this.authFailedState = false;\r\n\r\n                this.ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/websocket`)\r\n                this.ws.binaryType = \"arraybuffer\"\r\n                this.ws.addEventListener(\"open\", this.onopen)\r\n                this.ws.addEventListener(\"close\", this.onclose)\r\n                this.ws.addEventListener(\"error\", this.onerror)\r\n                this.ws.addEventListener(\"message\", this.onmessage)\r\n            } else {\r\n                console.log(\"连接已建立或正在连接,请勿重复连接\");\r\n            }\r\n        } else {\r\n            console.error(\"拒绝开始连接,授权令牌不存在\");\r\n        }\r\n    }\r\n\r\n    public disconnect = () => {\r\n        this.connectRetry = false;\r\n        this.connectRetryTimes = 0;\r\n        if (this.connectStatus === WebSocketClientHandler.STATUS_CONNECTED && this.ws) {\r\n            this.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTING;\r\n            try {\r\n                this.ws.close()\r\n            } catch (error) {\r\n                console.log(\"尝试关闭WS客户端发生错误\", error)\r\n            }\r\n        } else {\r\n            console.log(\"无需断开连接,连接尚未建立\")\r\n        }\r\n    }\r\n\r\n    private onopen = () => {\r\n        console.log(`WebSocket连接已建立,发送授权令牌`)\r\n        if (this.ws) {\r\n            this.ws.send(`{\"Auth-Token\":\"${this.authToken}\"}`)\r\n        }\r\n    }\r\n\r\n    private onmessage = (e: MessageEvent) => {\r\n        if (typeof (e.data) === \"string\") {\r\n            const jsonData = JSON.parse(e.data)\r\n            if (jsonData.verified) {\r\n                this.connectRetryTimes = 0;\r\n                this.connectStatus = WebSocketClientHandler.STATUS_CONNECTED;\r\n                toast.success(\"WebSocket连接授权成功\")\r\n                rpcClientProcess.onConnectd()\r\n            }\r\n        } else {\r\n            const bytes = new Uint8Array(e.data)\r\n            rpcClientProcess.processData(bytes)\r\n        }\r\n    }\r\n\r\n    private onclose = (e: CloseEvent) => {\r\n        this.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTED;\r\n        toast.error(`WebSocket连接已关闭,代码:${e.code},原因:${e.reason}`)\r\n        if (this.ws) {\r\n            try {\r\n                this.ws.close()\r\n            } catch (error) {\r\n                console.log(\"尝试关闭WS客户端发生错误\", e)\r\n            }\r\n            try {\r\n                this.ws.removeEventListener(\"open\", this.onopen)\r\n                this.ws.removeEventListener(\"close\", this.onclose)\r\n                this.ws.removeEventListener(\"error\", this.onerror)\r\n                this.ws.removeEventListener(\"message\", this.onmessage)\r\n            } catch (error) {\r\n                console.log(\"移除监听函数错误\", e)\r\n            }\r\n        }\r\n        this.closeCode = e.code;\r\n        this.closeReason = e.reason;\r\n        const that = this;\r\n        if (e.code === 1000 && e.reason === \"节点冲突!\") {\r\n            console.log(\"WebSocket连接已关闭,节点冲突!不再重连!\")\r\n            toast.error(\"WebSocket连接已关闭,节点冲突!不再重连!\")\r\n            this.authFailedState = true;\r\n        } else if (e.code === 1003 && e.reason === \"登录失败!\") {\r\n            console.log(\"WebSocket连接已关闭,登录失败!不再重连!\")\r\n            toast.error(\"WebSocket连接已关闭,登录失败!不再重连!\")\r\n            this.authFailedState = true;\r\n        } else {\r\n            if (this.connectRetry) {\r\n                console.log(`连接已关闭,等待3s后重连`)\r\n                this.connectStatus = WebSocketClientHandler.STATUS_CONNECTING;\r\n                this.connectRetryTimes++;\r\n                setTimeout(() => {\r\n                    that.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTED;\r\n                    if (that.connectRetry) {\r\n                        toast.warn(`WebSocket第${that.connectRetryTimes}次尝试重连`)\r\n                        that.connect();\r\n                    }\r\n                }, 3000);\r\n            } else {\r\n                console.log(`连接已关闭,不再重连`)\r\n            }\r\n        }\r\n    }\r\n    private onerror = (e: Event) => {\r\n        this.connectStatus = WebSocketClientHandler.STATUS_DISCONNECTED;\r\n        console.error(`连接错误`, e)\r\n    }\r\n\r\n    public sendData = (data: ArrayBufferLike): boolean => {\r\n        if (!this.ws || !(this.ws.readyState === 1)) {\r\n            console.error(\"发送二进制数据错误，连接不存在或已经断开\");\r\n            toast.error(`WebSocket发送二进制数据错误，连接不存在或已经断开`)\r\n            return false;\r\n        } else {\r\n            try {\r\n                this.ws.send(data);\r\n            } catch (error) {\r\n                console.error(\"发送二进制数据错误\", error);\r\n                toast.error(`WebSocket发送二进制数据错误`)\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nconst webSocketClientHandler = WebSocketClientHandler.getInstance()\r\n\r\nexport { webSocketClientHandler };"],"sourceRoot":""}